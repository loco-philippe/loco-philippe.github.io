window.pdocSearch = (function(){
/** elasticlunr - http://weixsong.github.io * Copyright (C) 2017 Oliver Nightingale * Copyright (C) 2017 Wei Song * MIT Licensed */!function(){function e(e){if(null===e||"object"!=typeof e)return e;var t=e.constructor();for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n]);return t}var t=function(e){var n=new t.Index;return n.pipeline.add(t.trimmer,t.stopWordFilter,t.stemmer),e&&e.call(n,n),n};t.version="0.9.5",lunr=t,t.utils={},t.utils.warn=function(e){return function(t){e.console&&console.warn&&console.warn(t)}}(this),t.utils.toString=function(e){return void 0===e||null===e?"":e.toString()},t.EventEmitter=function(){this.events={}},t.EventEmitter.prototype.addListener=function(){var e=Array.prototype.slice.call(arguments),t=e.pop(),n=e;if("function"!=typeof t)throw new TypeError("last argument must be a function");n.forEach(function(e){this.hasHandler(e)||(this.events[e]=[]),this.events[e].push(t)},this)},t.EventEmitter.prototype.removeListener=function(e,t){if(this.hasHandler(e)){var n=this.events[e].indexOf(t);-1!==n&&(this.events[e].splice(n,1),0==this.events[e].length&&delete this.events[e])}},t.EventEmitter.prototype.emit=function(e){if(this.hasHandler(e)){var t=Array.prototype.slice.call(arguments,1);this.events[e].forEach(function(e){e.apply(void 0,t)},this)}},t.EventEmitter.prototype.hasHandler=function(e){return e in this.events},t.tokenizer=function(e){if(!arguments.length||null===e||void 0===e)return[];if(Array.isArray(e)){var n=e.filter(function(e){return null===e||void 0===e?!1:!0});n=n.map(function(e){return t.utils.toString(e).toLowerCase()});var i=[];return n.forEach(function(e){var n=e.split(t.tokenizer.seperator);i=i.concat(n)},this),i}return e.toString().trim().toLowerCase().split(t.tokenizer.seperator)},t.tokenizer.defaultSeperator=/[\s\-]+/,t.tokenizer.seperator=t.tokenizer.defaultSeperator,t.tokenizer.setSeperator=function(e){null!==e&&void 0!==e&&"object"==typeof e&&(t.tokenizer.seperator=e)},t.tokenizer.resetSeperator=function(){t.tokenizer.seperator=t.tokenizer.defaultSeperator},t.tokenizer.getSeperator=function(){return t.tokenizer.seperator},t.Pipeline=function(){this._queue=[]},t.Pipeline.registeredFunctions={},t.Pipeline.registerFunction=function(e,n){n in t.Pipeline.registeredFunctions&&t.utils.warn("Overwriting existing registered function: "+n),e.label=n,t.Pipeline.registeredFunctions[n]=e},t.Pipeline.getRegisteredFunction=function(e){return e in t.Pipeline.registeredFunctions!=!0?null:t.Pipeline.registeredFunctions[e]},t.Pipeline.warnIfFunctionNotRegistered=function(e){var n=e.label&&e.label in this.registeredFunctions;n||t.utils.warn("Function is not registered with pipeline. This may cause problems when serialising the index.\n",e)},t.Pipeline.load=function(e){var n=new t.Pipeline;return e.forEach(function(e){var i=t.Pipeline.getRegisteredFunction(e);if(!i)throw new Error("Cannot load un-registered function: "+e);n.add(i)}),n},t.Pipeline.prototype.add=function(){var e=Array.prototype.slice.call(arguments);e.forEach(function(e){t.Pipeline.warnIfFunctionNotRegistered(e),this._queue.push(e)},this)},t.Pipeline.prototype.after=function(e,n){t.Pipeline.warnIfFunctionNotRegistered(n);var i=this._queue.indexOf(e);if(-1===i)throw new Error("Cannot find existingFn");this._queue.splice(i+1,0,n)},t.Pipeline.prototype.before=function(e,n){t.Pipeline.warnIfFunctionNotRegistered(n);var i=this._queue.indexOf(e);if(-1===i)throw new Error("Cannot find existingFn");this._queue.splice(i,0,n)},t.Pipeline.prototype.remove=function(e){var t=this._queue.indexOf(e);-1!==t&&this._queue.splice(t,1)},t.Pipeline.prototype.run=function(e){for(var t=[],n=e.length,i=this._queue.length,o=0;n>o;o++){for(var r=e[o],s=0;i>s&&(r=this._queue[s](r,o,e),void 0!==r&&null!==r);s++);void 0!==r&&null!==r&&t.push(r)}return t},t.Pipeline.prototype.reset=function(){this._queue=[]},t.Pipeline.prototype.get=function(){return this._queue},t.Pipeline.prototype.toJSON=function(){return this._queue.map(function(e){return t.Pipeline.warnIfFunctionNotRegistered(e),e.label})},t.Index=function(){this._fields=[],this._ref="id",this.pipeline=new t.Pipeline,this.documentStore=new t.DocumentStore,this.index={},this.eventEmitter=new t.EventEmitter,this._idfCache={},this.on("add","remove","update",function(){this._idfCache={}}.bind(this))},t.Index.prototype.on=function(){var e=Array.prototype.slice.call(arguments);return this.eventEmitter.addListener.apply(this.eventEmitter,e)},t.Index.prototype.off=function(e,t){return this.eventEmitter.removeListener(e,t)},t.Index.load=function(e){e.version!==t.version&&t.utils.warn("version mismatch: current "+t.version+" importing "+e.version);var n=new this;n._fields=e.fields,n._ref=e.ref,n.documentStore=t.DocumentStore.load(e.documentStore),n.pipeline=t.Pipeline.load(e.pipeline),n.index={};for(var i in e.index)n.index[i]=t.InvertedIndex.load(e.index[i]);return n},t.Index.prototype.addField=function(e){return this._fields.push(e),this.index[e]=new t.InvertedIndex,this},t.Index.prototype.setRef=function(e){return this._ref=e,this},t.Index.prototype.saveDocument=function(e){return this.documentStore=new t.DocumentStore(e),this},t.Index.prototype.addDoc=function(e,n){if(e){var n=void 0===n?!0:n,i=e[this._ref];this.documentStore.addDoc(i,e),this._fields.forEach(function(n){var o=this.pipeline.run(t.tokenizer(e[n]));this.documentStore.addFieldLength(i,n,o.length);var r={};o.forEach(function(e){e in r?r[e]+=1:r[e]=1},this);for(var s in r){var u=r[s];u=Math.sqrt(u),this.index[n].addToken(s,{ref:i,tf:u})}},this),n&&this.eventEmitter.emit("add",e,this)}},t.Index.prototype.removeDocByRef=function(e){if(e&&this.documentStore.isDocStored()!==!1&&this.documentStore.hasDoc(e)){var t=this.documentStore.getDoc(e);this.removeDoc(t,!1)}},t.Index.prototype.removeDoc=function(e,n){if(e){var n=void 0===n?!0:n,i=e[this._ref];this.documentStore.hasDoc(i)&&(this.documentStore.removeDoc(i),this._fields.forEach(function(n){var o=this.pipeline.run(t.tokenizer(e[n]));o.forEach(function(e){this.index[n].removeToken(e,i)},this)},this),n&&this.eventEmitter.emit("remove",e,this))}},t.Index.prototype.updateDoc=function(e,t){var t=void 0===t?!0:t;this.removeDocByRef(e[this._ref],!1),this.addDoc(e,!1),t&&this.eventEmitter.emit("update",e,this)},t.Index.prototype.idf=function(e,t){var n="@"+t+"/"+e;if(Object.prototype.hasOwnProperty.call(this._idfCache,n))return this._idfCache[n];var i=this.index[t].getDocFreq(e),o=1+Math.log(this.documentStore.length/(i+1));return this._idfCache[n]=o,o},t.Index.prototype.getFields=function(){return this._fields.slice()},t.Index.prototype.search=function(e,n){if(!e)return[];e="string"==typeof e?{any:e}:JSON.parse(JSON.stringify(e));var i=null;null!=n&&(i=JSON.stringify(n));for(var o=new t.Configuration(i,this.getFields()).get(),r={},s=Object.keys(e),u=0;u<s.length;u++){var a=s[u];r[a]=this.pipeline.run(t.tokenizer(e[a]))}var l={};for(var c in o){var d=r[c]||r.any;if(d){var f=this.fieldSearch(d,c,o),h=o[c].boost;for(var p in f)f[p]=f[p]*h;for(var p in f)p in l?l[p]+=f[p]:l[p]=f[p]}}var v,g=[];for(var p in l)v={ref:p,score:l[p]},this.documentStore.hasDoc(p)&&(v.doc=this.documentStore.getDoc(p)),g.push(v);return g.sort(function(e,t){return t.score-e.score}),g},t.Index.prototype.fieldSearch=function(e,t,n){var i=n[t].bool,o=n[t].expand,r=n[t].boost,s=null,u={};return 0!==r?(e.forEach(function(e){var n=[e];1==o&&(n=this.index[t].expandToken(e));var r={};n.forEach(function(n){var o=this.index[t].getDocs(n),a=this.idf(n,t);if(s&&"AND"==i){var l={};for(var c in s)c in o&&(l[c]=o[c]);o=l}n==e&&this.fieldSearchStats(u,n,o);for(var c in o){var d=this.index[t].getTermFrequency(n,c),f=this.documentStore.getFieldLength(c,t),h=1;0!=f&&(h=1/Math.sqrt(f));var p=1;n!=e&&(p=.15*(1-(n.length-e.length)/n.length));var v=d*a*h*p;c in r?r[c]+=v:r[c]=v}},this),s=this.mergeScores(s,r,i)},this),s=this.coordNorm(s,u,e.length)):void 0},t.Index.prototype.mergeScores=function(e,t,n){if(!e)return t;if("AND"==n){var i={};for(var o in t)o in e&&(i[o]=e[o]+t[o]);return i}for(var o in t)o in e?e[o]+=t[o]:e[o]=t[o];return e},t.Index.prototype.fieldSearchStats=function(e,t,n){for(var i in n)i in e?e[i].push(t):e[i]=[t]},t.Index.prototype.coordNorm=function(e,t,n){for(var i in e)if(i in t){var o=t[i].length;e[i]=e[i]*o/n}return e},t.Index.prototype.toJSON=function(){var e={};return this._fields.forEach(function(t){e[t]=this.index[t].toJSON()},this),{version:t.version,fields:this._fields,ref:this._ref,documentStore:this.documentStore.toJSON(),index:e,pipeline:this.pipeline.toJSON()}},t.Index.prototype.use=function(e){var t=Array.prototype.slice.call(arguments,1);t.unshift(this),e.apply(this,t)},t.DocumentStore=function(e){this._save=null===e||void 0===e?!0:e,this.docs={},this.docInfo={},this.length=0},t.DocumentStore.load=function(e){var t=new this;return t.length=e.length,t.docs=e.docs,t.docInfo=e.docInfo,t._save=e.save,t},t.DocumentStore.prototype.isDocStored=function(){return this._save},t.DocumentStore.prototype.addDoc=function(t,n){this.hasDoc(t)||this.length++,this.docs[t]=this._save===!0?e(n):null},t.DocumentStore.prototype.getDoc=function(e){return this.hasDoc(e)===!1?null:this.docs[e]},t.DocumentStore.prototype.hasDoc=function(e){return e in this.docs},t.DocumentStore.prototype.removeDoc=function(e){this.hasDoc(e)&&(delete this.docs[e],delete this.docInfo[e],this.length--)},t.DocumentStore.prototype.addFieldLength=function(e,t,n){null!==e&&void 0!==e&&0!=this.hasDoc(e)&&(this.docInfo[e]||(this.docInfo[e]={}),this.docInfo[e][t]=n)},t.DocumentStore.prototype.updateFieldLength=function(e,t,n){null!==e&&void 0!==e&&0!=this.hasDoc(e)&&this.addFieldLength(e,t,n)},t.DocumentStore.prototype.getFieldLength=function(e,t){return null===e||void 0===e?0:e in this.docs&&t in this.docInfo[e]?this.docInfo[e][t]:0},t.DocumentStore.prototype.toJSON=function(){return{docs:this.docs,docInfo:this.docInfo,length:this.length,save:this._save}},t.stemmer=function(){var e={ational:"ate",tional:"tion",enci:"ence",anci:"ance",izer:"ize",bli:"ble",alli:"al",entli:"ent",eli:"e",ousli:"ous",ization:"ize",ation:"ate",ator:"ate",alism:"al",iveness:"ive",fulness:"ful",ousness:"ous",aliti:"al",iviti:"ive",biliti:"ble",logi:"log"},t={icate:"ic",ative:"",alize:"al",iciti:"ic",ical:"ic",ful:"",ness:""},n="[^aeiou]",i="[aeiouy]",o=n+"[^aeiouy]*",r=i+"[aeiou]*",s="^("+o+")?"+r+o,u="^("+o+")?"+r+o+"("+r+")?$",a="^("+o+")?"+r+o+r+o,l="^("+o+")?"+i,c=new RegExp(s),d=new RegExp(a),f=new RegExp(u),h=new RegExp(l),p=/^(.+?)(ss|i)es$/,v=/^(.+?)([^s])s$/,g=/^(.+?)eed$/,m=/^(.+?)(ed|ing)$/,y=/.$/,S=/(at|bl|iz)$/,x=new RegExp("([^aeiouylsz])\\1$"),w=new RegExp("^"+o+i+"[^aeiouwxy]$"),I=/^(.+?[^aeiou])y$/,b=/^(.+?)(ational|tional|enci|anci|izer|bli|alli|entli|eli|ousli|ization|ation|ator|alism|iveness|fulness|ousness|aliti|iviti|biliti|logi)$/,E=/^(.+?)(icate|ative|alize|iciti|ical|ful|ness)$/,D=/^(.+?)(al|ance|ence|er|ic|able|ible|ant|ement|ment|ent|ou|ism|ate|iti|ous|ive|ize)$/,F=/^(.+?)(s|t)(ion)$/,_=/^(.+?)e$/,P=/ll$/,k=new RegExp("^"+o+i+"[^aeiouwxy]$"),z=function(n){var i,o,r,s,u,a,l;if(n.length<3)return n;if(r=n.substr(0,1),"y"==r&&(n=r.toUpperCase()+n.substr(1)),s=p,u=v,s.test(n)?n=n.replace(s,"$1$2"):u.test(n)&&(n=n.replace(u,"$1$2")),s=g,u=m,s.test(n)){var z=s.exec(n);s=c,s.test(z[1])&&(s=y,n=n.replace(s,""))}else if(u.test(n)){var z=u.exec(n);i=z[1],u=h,u.test(i)&&(n=i,u=S,a=x,l=w,u.test(n)?n+="e":a.test(n)?(s=y,n=n.replace(s,"")):l.test(n)&&(n+="e"))}if(s=I,s.test(n)){var z=s.exec(n);i=z[1],n=i+"i"}if(s=b,s.test(n)){var z=s.exec(n);i=z[1],o=z[2],s=c,s.test(i)&&(n=i+e[o])}if(s=E,s.test(n)){var z=s.exec(n);i=z[1],o=z[2],s=c,s.test(i)&&(n=i+t[o])}if(s=D,u=F,s.test(n)){var z=s.exec(n);i=z[1],s=d,s.test(i)&&(n=i)}else if(u.test(n)){var z=u.exec(n);i=z[1]+z[2],u=d,u.test(i)&&(n=i)}if(s=_,s.test(n)){var z=s.exec(n);i=z[1],s=d,u=f,a=k,(s.test(i)||u.test(i)&&!a.test(i))&&(n=i)}return s=P,u=d,s.test(n)&&u.test(n)&&(s=y,n=n.replace(s,"")),"y"==r&&(n=r.toLowerCase()+n.substr(1)),n};return z}(),t.Pipeline.registerFunction(t.stemmer,"stemmer"),t.stopWordFilter=function(e){return e&&t.stopWordFilter.stopWords[e]!==!0?e:void 0},t.clearStopWords=function(){t.stopWordFilter.stopWords={}},t.addStopWords=function(e){null!=e&&Array.isArray(e)!==!1&&e.forEach(function(e){t.stopWordFilter.stopWords[e]=!0},this)},t.resetStopWords=function(){t.stopWordFilter.stopWords=t.defaultStopWords},t.defaultStopWords={"":!0,a:!0,able:!0,about:!0,across:!0,after:!0,all:!0,almost:!0,also:!0,am:!0,among:!0,an:!0,and:!0,any:!0,are:!0,as:!0,at:!0,be:!0,because:!0,been:!0,but:!0,by:!0,can:!0,cannot:!0,could:!0,dear:!0,did:!0,"do":!0,does:!0,either:!0,"else":!0,ever:!0,every:!0,"for":!0,from:!0,get:!0,got:!0,had:!0,has:!0,have:!0,he:!0,her:!0,hers:!0,him:!0,his:!0,how:!0,however:!0,i:!0,"if":!0,"in":!0,into:!0,is:!0,it:!0,its:!0,just:!0,least:!0,let:!0,like:!0,likely:!0,may:!0,me:!0,might:!0,most:!0,must:!0,my:!0,neither:!0,no:!0,nor:!0,not:!0,of:!0,off:!0,often:!0,on:!0,only:!0,or:!0,other:!0,our:!0,own:!0,rather:!0,said:!0,say:!0,says:!0,she:!0,should:!0,since:!0,so:!0,some:!0,than:!0,that:!0,the:!0,their:!0,them:!0,then:!0,there:!0,these:!0,they:!0,"this":!0,tis:!0,to:!0,too:!0,twas:!0,us:!0,wants:!0,was:!0,we:!0,were:!0,what:!0,when:!0,where:!0,which:!0,"while":!0,who:!0,whom:!0,why:!0,will:!0,"with":!0,would:!0,yet:!0,you:!0,your:!0},t.stopWordFilter.stopWords=t.defaultStopWords,t.Pipeline.registerFunction(t.stopWordFilter,"stopWordFilter"),t.trimmer=function(e){if(null===e||void 0===e)throw new Error("token should not be undefined");return e.replace(/^\W+/,"").replace(/\W+$/,"")},t.Pipeline.registerFunction(t.trimmer,"trimmer"),t.InvertedIndex=function(){this.root={docs:{},df:0}},t.InvertedIndex.load=function(e){var t=new this;return t.root=e.root,t},t.InvertedIndex.prototype.addToken=function(e,t,n){for(var n=n||this.root,i=0;i<=e.length-1;){var o=e[i];o in n||(n[o]={docs:{},df:0}),i+=1,n=n[o]}var r=t.ref;n.docs[r]?n.docs[r]={tf:t.tf}:(n.docs[r]={tf:t.tf},n.df+=1)},t.InvertedIndex.prototype.hasToken=function(e){if(!e)return!1;for(var t=this.root,n=0;n<e.length;n++){if(!t[e[n]])return!1;t=t[e[n]]}return!0},t.InvertedIndex.prototype.getNode=function(e){if(!e)return null;for(var t=this.root,n=0;n<e.length;n++){if(!t[e[n]])return null;t=t[e[n]]}return t},t.InvertedIndex.prototype.getDocs=function(e){var t=this.getNode(e);return null==t?{}:t.docs},t.InvertedIndex.prototype.getTermFrequency=function(e,t){var n=this.getNode(e);return null==n?0:t in n.docs?n.docs[t].tf:0},t.InvertedIndex.prototype.getDocFreq=function(e){var t=this.getNode(e);return null==t?0:t.df},t.InvertedIndex.prototype.removeToken=function(e,t){if(e){var n=this.getNode(e);null!=n&&t in n.docs&&(delete n.docs[t],n.df-=1)}},t.InvertedIndex.prototype.expandToken=function(e,t,n){if(null==e||""==e)return[];var t=t||[];if(void 0==n&&(n=this.getNode(e),null==n))return t;n.df>0&&t.push(e);for(var i in n)"docs"!==i&&"df"!==i&&this.expandToken(e+i,t,n[i]);return t},t.InvertedIndex.prototype.toJSON=function(){return{root:this.root}},t.Configuration=function(e,n){var e=e||"";if(void 0==n||null==n)throw new Error("fields should not be null");this.config={};var i;try{i=JSON.parse(e),this.buildUserConfig(i,n)}catch(o){t.utils.warn("user configuration parse failed, will use default configuration"),this.buildDefaultConfig(n)}},t.Configuration.prototype.buildDefaultConfig=function(e){this.reset(),e.forEach(function(e){this.config[e]={boost:1,bool:"OR",expand:!1}},this)},t.Configuration.prototype.buildUserConfig=function(e,n){var i="OR",o=!1;if(this.reset(),"bool"in e&&(i=e.bool||i),"expand"in e&&(o=e.expand||o),"fields"in e)for(var r in e.fields)if(n.indexOf(r)>-1){var s=e.fields[r],u=o;void 0!=s.expand&&(u=s.expand),this.config[r]={boost:s.boost||0===s.boost?s.boost:1,bool:s.bool||i,expand:u}}else t.utils.warn("field name in user configuration not found in index instance fields");else this.addAllFields2UserConfig(i,o,n)},t.Configuration.prototype.addAllFields2UserConfig=function(e,t,n){n.forEach(function(n){this.config[n]={boost:1,bool:e,expand:t}},this)},t.Configuration.prototype.get=function(){return this.config},t.Configuration.prototype.reset=function(){this.config={}},lunr.SortedSet=function(){this.length=0,this.elements=[]},lunr.SortedSet.load=function(e){var t=new this;return t.elements=e,t.length=e.length,t},lunr.SortedSet.prototype.add=function(){var e,t;for(e=0;e<arguments.length;e++)t=arguments[e],~this.indexOf(t)||this.elements.splice(this.locationFor(t),0,t);this.length=this.elements.length},lunr.SortedSet.prototype.toArray=function(){return this.elements.slice()},lunr.SortedSet.prototype.map=function(e,t){return this.elements.map(e,t)},lunr.SortedSet.prototype.forEach=function(e,t){return this.elements.forEach(e,t)},lunr.SortedSet.prototype.indexOf=function(e){for(var t=0,n=this.elements.length,i=n-t,o=t+Math.floor(i/2),r=this.elements[o];i>1;){if(r===e)return o;e>r&&(t=o),r>e&&(n=o),i=n-t,o=t+Math.floor(i/2),r=this.elements[o]}return r===e?o:-1},lunr.SortedSet.prototype.locationFor=function(e){for(var t=0,n=this.elements.length,i=n-t,o=t+Math.floor(i/2),r=this.elements[o];i>1;)e>r&&(t=o),r>e&&(n=o),i=n-t,o=t+Math.floor(i/2),r=this.elements[o];return r>e?o:e>r?o+1:void 0},lunr.SortedSet.prototype.intersect=function(e){for(var t=new lunr.SortedSet,n=0,i=0,o=this.length,r=e.length,s=this.elements,u=e.elements;;){if(n>o-1||i>r-1)break;s[n]!==u[i]?s[n]<u[i]?n++:s[n]>u[i]&&i++:(t.add(s[n]),n++,i++)}return t},lunr.SortedSet.prototype.clone=function(){var e=new lunr.SortedSet;return e.elements=this.toArray(),e.length=e.elements.length,e},lunr.SortedSet.prototype.union=function(e){var t,n,i;this.length>=e.length?(t=this,n=e):(t=e,n=this),i=t.clone();for(var o=0,r=n.toArray();o<r.length;o++)i.add(r[o]);return i},lunr.SortedSet.prototype.toJSON=function(){return this.toArray()},function(e,t){"function"==typeof define&&define.amd?define(t):"object"==typeof exports?module.exports=t():e.elasticlunr=t()}(this,function(){return t})}();
    /** pdoc search index */const docs = [{"fullname": "observation", "modulename": "observation", "type": "module", "doc": "<p><strong><em>Environmental Sensing Package</em></strong></p>\n\n<p>Created on Fri Dec 24 15:21:14 2021</p>\n\n<p>@author: philippe@loco-labs.io</p>\n\n<h1 id=\"why-a-project-for-environmental-data\">Why a project for Environmental Data ?</h1>\n\n<p>The project was born from the following observations:</p>\n\n<ul>\n<li>there is no standard format (apart from the Environmental Sensing Service Bluetooth)\nused by the sensors to transmit the information (binary and textual),</li>\n<li>there is no data exchange format presenting at the same time a temporal,\nspatial and physical component (apart from file formats),</li>\n<li>the main standards used to exchange data are CSV file or JSON object. These two\nstandards are not suitable and not optimized for complex data,</li>\n<li>we spend a lot of energy converting this type of data to make it usable.</li>\n</ul>\n\n<h1 id=\"the-environmental-sensing-project\">The Environmental Sensing project</h1>\n\n<p>The <a href=\"https://github.com/loco-philippe/Environmental-Sensing#readme\">ES project</a> is made of :</p>\n\n<ul>\n<li>A data model that makes it possible to represent elementary observations\n(a simple one-off measurement), complex observations (multi-dimensions),\ndetailed levels of representation (for example, the evolution of a plume of smoke).</li>\n<li>Data formats adapted to interfaces (binary payload for networks, json for requests\nor for NoSQL API, files)</li>\n<li>structured tools to structure, analyse and optimize data (e.g. control conceptual data\nmodel cardinality in a dataset)</li>\n<li>A library of connectors for different uses (sensors, database, storage, networks, etc.)\nin different languages (python, C++)</li>\n<li>Bidirectional interfaces to data processing tools (eg Numpy, Xarray, GIS).</li>\n</ul>\n\n<p>It allows to :</p>\n\n<ul>\n<li>accelerate standards convergence</li>\n<li>Facilitate the use and sharing of environmental data</li>\n<li>Standardize both data acquisition equipment (sensors) and processing applications,</li>\n<li>Implement a software architecture replacing all coding / decoding operations\n(interfaces) by the use of standard connectors,</li>\n<li>Respect and rely on the main existing standards</li>\n<li>Collectively share and develop a set of open-source connectors responding to\nall situations (platform)</li>\n</ul>\n\n<h1 id=\"examples-of-achievements\">Examples of achievements</h1>\n\n<ul>\n<li>Bluetooth extension for Air Pollutants (available in sept-21)</li>\n<li>Add 'relationship' property in TableSchema (proposal)</li>\n<li>Development of 'indexed list' theory to deal with complex datasets (available)</li>\n<li>standard data exchange format suitable for complex data sets\n(available, data size divided by 5 to 10)</li>\n<li>data interoperability connectors (available in python since july-22)</li>\n</ul>\n\n<h1 id=\"documentation\">Documentation</h1>\n\n<p>Documentation is available in other pages :</p>\n\n<ul>\n<li>The concepts of 'observation', 'indexed list' and 'ES value' are describe in\n<a href=\"https://github.com/loco-philippe/Environmental-Sensing/wiki\">the wiki</a> and in\n<a href=\"https://github.com/loco-philippe/Environmental-Sensing/tree/main\n/documentation/Ilist_principles.pdf\">the presentation</a>.</li>\n<li>The non-regression tests are at\n<a href=\"https://github.com/loco-philippe/Environmental-Sensing/tree/main/python/Tests\">this page</a></li>\n<li>Examples are\n<a href=\"https://github.com/loco-philippe/Environmental-Sensing/tree/main/python/Examples\">here</a></li>\n<li>data exchange standard for <a href=\"https://github.com/loco-philippe/\nEnvironmental-Sensing/tree/main/documentation/ObsJSON-Standard.pdf\">observation</a>,\n<a href=\"https://github.com/loco-philippe/Environmental-Sensing/tree/main/\ndocumentation/IlistJSON-Standard.pdf\">indexed list</a> and\n<a href=\"https://github.com/loco-philippe/Environmental-Sensing/tree/main/documentation\n/ESJSON-Standard.pdf\">values</a></li>\n</ul>\n\n<p>Modules contain the following classes:</p>\n\n<ul>\n<li><p>Observation :</p>\n\n<ul>\n<li><code>observation.Observation</code></li>\n</ul></li>\n<li><p>ESValue :</p>\n\n<ul>\n<li><code>observation.esvalue</code>(<code>observation.esvalue.DatationValue</code>,\n<code>observation.esvalue.LocationValue</code>,\n<code>observation.esvalue.PropertyValue</code>, <code>observation.esvalue.NamedValue</code>,\n<code>observation.esvalue.ExternValue</code>, <code>observation.esvalue_base.ESValue</code>)</li>\n</ul></li>\n<li><p>Ilist :</p>\n\n<ul>\n<li><code>observation.ilist</code>, <code>observation.ilist_structure</code>, <code>observation.ilist_interface</code></li>\n</ul></li>\n<li><p>Iindex :</p>\n\n<ul>\n<li><code>observation.iindex</code>, <code>observation.iindex_structure</code>, <code>observation.iindex_interface</code></li>\n</ul></li>\n<li><p>TimeSlot :</p>\n\n<ul>\n<li><code>observation.timeslot</code></li>\n</ul></li>\n<li><p>ES :</p>\n\n<ul>\n<li><code>observation.esconstante</code>.</li>\n</ul></li>\n</ul>\n"}, {"fullname": "observation.esconstante", "modulename": "observation.esconstante", "type": "module", "doc": "<p>Created on Sun Aug  1 13:35:28 2021</p>\n\n<p>@author: philippe@loco-labs.io</p>\n\n<p>This module describes the constants and default values used in other modules.</p>\n"}, {"fullname": "observation.esconstante.Es", "modulename": "observation.esconstante", "qualname": "Es", "type": "class", "doc": "<p>initialization of constant data.</p>\n"}, {"fullname": "observation.esconstante.Es.__init__", "modulename": "observation.esconstante", "qualname": "Es.__init__", "type": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">defnone</span><span class=\"o\">=</span><span class=\"kc\">True</span></span>)</span>"}, {"fullname": "observation.esobservation", "modulename": "observation.esobservation", "type": "module", "doc": "<p>Created on Tue Aug  3 23:40:06 2021</p>\n\n<p>@author: philippe@loco-labs.io</p>\n\n<p>An <code>Observation</code> is an object representing a set of information having\nspatial and temporal characteristics associated with measurable or observable\n properties.</p>\n\n<p>The <code>Observation</code> Object is built around three main bricks :</p>\n\n<ul>\n<li>Ilist Object which deal with indexing,</li>\n<li>ESValue Object which integrate the specificities of environmental data,</li>\n<li>Tools dedicated to particular domains (<a href=\"https://shapely.readthedocs.io/en/stable/manual.html\">Shapely</a> \nfor location, TimeSlot for Datation)</li>\n</ul>\n\n<p>The <code>observation.esobservation</code> module contains the <code>Observation</code> class.</p>\n\n<p>Documentation is available in other pages :</p>\n\n<ul>\n<li>The concept of 'observation' is describe in \n<a href=\"https://github.com/loco-philippe/Environmental-Sensing/wiki/Observation\">this page</a>.</li>\n<li>The concept of 'indexed list' is describe in \n<a href=\"https://github.com/loco-philippe/Environmental-Sensing/wiki/Indexed-list\">this page</a>.</li>\n<li>The non-regression test are at \n<a href=\"https://github.com/loco-philippe/Environmental-Sensing/blob/main/python/Tests/test_obs.py\">this page</a></li>\n<li>The <a href=\"https://github.com/loco-philippe/Environmental-Sensing/tree/main/python/Examples/Observation\">examples</a></li>\n</ul>\n"}, {"fullname": "observation.esobservation.Observation", "modulename": "observation.esobservation", "qualname": "Observation", "type": "class", "doc": "<p>An <code>Observation</code> is derived from <code>observation.Ilist</code> object.</p>\n\n<p><em>Additional attributes (for @property see methods)</em> :</p>\n\n<ul>\n<li><strong>name</strong> : textual description</li>\n<li><strong>id</strong> : textual identity </li>\n<li><strong>param</strong> : namedValue dictionnary (external data)</li>\n</ul>\n\n<p>The methods defined in this class (included inherited) are :</p>\n\n<p><em>constructor (@classmethod))</em></p>\n\n<ul>\n<li><code>Observation.dic</code></li>\n<li><code>Observation.std</code></li>\n<li><code>observation.ilist.Ilist.obj</code></li>\n<li><code>Observation.from_obj</code></li>\n<li><code>observation.ilist.Ilist.from_file</code></li>\n</ul>\n\n<p><em>dynamic value (getters @property)</em></p>\n\n<ul>\n<li><code>Observation.bounds</code></li>\n<li><code>Observation.jsonFeature</code></li>\n<li><code>Observation.setLocation</code></li>\n<li><code>Observation.setDatation</code></li>\n<li><code>Observation.setProperty</code></li>\n<li><code>Observation.setResult</code></li>\n</ul>\n\n<p><em>dynamic value inherited (getters @property)</em></p>\n\n<ul>\n<li><code>observation.ilist.Ilist.extidx</code></li>\n<li><code>observation.ilist.Ilist.extidxext</code></li>\n<li><code>observation.ilist.Ilist.idxname</code></li>\n<li><code>observation.ilist.Ilist.idxref</code></li>\n<li><code>observation.ilist.Ilist.idxlen</code></li>\n<li><code>observation.ilist.Ilist.iidx</code></li>\n<li><code>observation.ilist.Ilist.keys</code></li>\n<li><code>observation.ilist.Ilist.lenindex</code></li>\n<li><code>observation.ilist.Ilist.lenidx</code></li>\n<li><code>observation.ilist.Ilist.lidx</code></li>\n<li><code>observation.ilist.Ilist.lidxrow</code></li>\n<li><code>observation.ilist.Ilist.lvar</code></li>\n<li><code>observation.ilist.Ilist.lvarrow</code></li>\n<li><code>observation.ilist.Ilist.lname</code></li>\n<li><code>observation.ilist.Ilist.lunicname</code></li>\n<li><code>observation.ilist.Ilist.lunicrow</code></li>\n<li><code>observation.ilist.Ilist.setidx</code></li>\n<li><code>observation.ilist.Ilist.tiidx</code></li>\n<li><code>observation.ilist.Ilist.textidx</code></li>\n<li><code>observation.ilist.Ilist.textidxext</code></li>\n</ul>\n\n<p><em>global value (getters @property)</em></p>\n\n<ul>\n<li><code>observation.ilist.Ilist.complete</code></li>\n<li><code>observation.ilist.Ilist.consistent</code></li>\n<li><code>observation.ilist.Ilist.dimension</code></li>\n<li><code>observation.ilist.Ilist.lencomplete</code></li>\n<li><code>observation.ilist.Ilist.primary</code></li>\n<li><code>observation.ilist.Ilist.zip</code></li>\n</ul>\n\n<p><em>selecting - infos methods</em></p>\n\n<ul>\n<li><code>observation.ilist.Ilist.couplingmatrix</code></li>\n<li><code>observation.ilist.Ilist.idxrecord</code></li>\n<li><code>observation.ilist.Ilist.indexinfos</code></li>\n<li><code>observation.ilist.Ilist.indicator</code></li>\n<li><code>observation.ilist.Ilist.iscanonorder</code></li>\n<li><code>observation.ilist.Ilist.isinrecord</code></li>\n<li><code>observation.ilist.Ilist.keytoval</code></li>\n<li><code>observation.ilist.Ilist.loc</code></li>\n<li><code>observation.ilist.Ilist.nindex</code></li>\n<li><code>observation.ilist.Ilist.record</code></li>\n<li><code>observation.ilist.Ilist.recidx</code></li>\n<li><code>observation.ilist.Ilist.recvar</code></li>\n<li><code>observation.ilist.Ilist.valtokey</code></li>\n</ul>\n\n<p><em>add - update methods</em></p>\n\n<ul>\n<li><code>observation.ilist.Ilist.add</code></li>\n<li><code>observation.ilist.Ilist.addindex</code></li>\n<li><code>observation.ilist.Ilist.append</code></li>\n<li><code>Observation.appendObs</code></li>\n<li><code>observation.ilist.Ilist.delindex</code></li>\n<li><code>observation.ilist.Ilist.delrecord</code></li>\n<li><code>observation.ilist.Ilist.renameindex</code></li>\n<li><code>observation.ilist.Ilist.setvar</code></li>\n<li><code>observation.ilist.Ilist.setname</code></li>\n<li><code>observation.ilist.Ilist.updateindex</code>    </li>\n</ul>\n\n<p><em>structure management - methods</em></p>\n\n<ul>\n<li><code>observation.ilist.Ilist.applyfilter</code></li>\n<li><code>observation.ilist.Ilist.coupling</code></li>\n<li><code>observation.ilist.Ilist.full</code></li>\n<li><code>observation.ilist.Ilist.getduplicates</code></li>\n<li><code>observation.ilist.Ilist.merge</code></li>\n<li><code>observation.ilist.Ilist.reindex</code></li>\n<li><code>observation.ilist.Ilist.reorder</code></li>\n<li><code>observation.ilist.Ilist.setfilter</code></li>\n<li><code>observation.ilist.Ilist.sort</code></li>\n<li><code>observation.ilist.Ilist.swapindex</code></li>\n<li><code>observation.ilist.Ilist.setcanonorder</code></li>\n<li><code>observation.ilist.Ilist.tostdcodec</code></li>\n</ul>\n\n<p><em>exports methods</em></p>\n\n<ul>\n<li><code>Observation.choropleth</code></li>\n<li><code>observation.ilist.Ilist.json</code></li>\n<li><code>observation.ilist.Ilist.plot</code></li>\n<li><code>observation.ilist.Ilist.to_csv</code></li>\n<li><code>observation.ilist.Ilist.to_file</code></li>\n<li><code>Observation.to_obj</code></li>\n<li><code>Observation.to_xarray</code></li>\n<li><code>observation.ilist.Ilist.to_dataframe</code></li>\n<li><code>observation.ilist.Ilist.view</code></li>\n<li><code>observation.ilist.Ilist.vlist</code></li>\n<li><code>observation.ilist.Ilist.voxel</code></li>\n</ul>\n", "bases": "ilist.Ilist"}, {"fullname": "observation.esobservation.Observation.__init__", "modulename": "observation.esobservation", "qualname": "Observation.__init__", "type": "function", "doc": "<p>Observation constructor</p>\n\n<p><em>Parameters</em></p>\n\n<ul>\n<li><strong>listidx</strong>  : list (default None) - list of compatible Iindex data</li>\n<li><strong>typevalue</strong>: str (default ES.def_clsName) - default value class (None or NamedValue)</li>\n<li><strong>var</strong>      : int (default None) - row of the variable</li>\n<li><strong>length</strong>   : int (default None) - number of records (row)</li>\n<li><strong>name</strong>     : string (default None) - Obs name</li>\n<li><strong>id</strong>       : string (default None) - Identification string</li>\n<li><strong>param</strong>    : dict (default None) - Dict with parameter data or user's data</li>\n<li><strong>context</strong> : boolean (default True) - if False, only codec and keys are included</li>\n<li><strong>reindex</strong> : boolean (default True) - if True, default codec for each Iindex</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">listidx</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">name</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"nb\">id</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">param</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">length</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">var</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">reindex</span><span class=\"o\">=</span><span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">typevalue</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">context</span><span class=\"o\">=</span><span class=\"kc\">True</span></span>)</span>"}, {"fullname": "observation.esobservation.Observation.dic", "modulename": "observation.esobservation", "qualname": "Observation.dic", "type": "function", "doc": "<p>Observation constructor (external dictionnary).</p>\n\n<p><em>Parameters</em></p>\n\n<ul>\n<li><strong>idxdic</strong> : dict (default None) - dict of Iindex element (Iindex name : list of Iindex values)</li>\n<li><strong>typevalue</strong> : str (default ES.def_clsName) - default value class (None or NamedValue)</li>\n<li><strong>var</strong> :  int (default None) - row of the variable</li>\n<li><strong>name</strong>     : string (default None) - Observation name</li>\n<li><strong>id</strong>       : string (default None) - Identification string</li>\n<li><strong>param</strong>    : dict (default None) - Dict with parameter data or user's data</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">cls</span>,</span><span class=\"param\">\t<span class=\"n\">idxdic</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">typevalue</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">name</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"nb\">id</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">param</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">var</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "observation.esobservation.Observation.std", "modulename": "observation.esobservation", "qualname": "Observation.std", "type": "function", "doc": "<p>Generate an Observation Object with standard indexes</p>\n\n<p><em>Parameters</em></p>\n\n<ul>\n<li><strong>datation</strong> : compatible Iindex (default None) - index for DatationValue</li>\n<li><strong>location</strong> : compatible Iindex (default None) - index for LocationValue</li>\n<li><strong>property</strong> : compatible Iindex (default None) - index for PropertyValue</li>\n<li><em>*result  *</em> : compatible Iindex (default None) - index for Variable(NamedValue)</li>\n<li><strong>name</strong>     : string (default None) - Observation name</li>\n<li><strong>id</strong>       : string (default None) - Identification string</li>\n<li><strong>param</strong>    : dict (default None) - Dict with parameter data or user's data</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">cls</span>,</span><span class=\"param\">\t<span class=\"n\">result</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">datation</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">location</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"nb\">property</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">name</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"nb\">id</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">param</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "observation.esobservation.Observation.from_obj", "modulename": "observation.esobservation", "qualname": "Observation.from_obj", "type": "function", "doc": "<p>Generate an Observation Object from a bytes, string or dic value</p>\n\n<p><em>Parameters</em></p>\n\n<ul>\n<li><strong>bs</strong> : bytes, string or dict data to convert</li>\n<li><strong>reindex</strong> : boolean (default True) - if True, default codec for each Iindex</li>\n<li><strong>context</strong> : boolean (default True) - if False, only codec and keys are included</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">cls</span>, </span><span class=\"param\"><span class=\"n\">bs</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">reindex</span><span class=\"o\">=</span><span class=\"kc\">True</span>, </span><span class=\"param\"><span class=\"n\">context</span><span class=\"o\">=</span><span class=\"kc\">True</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "observation.esobservation.Observation.bounds", "modulename": "observation.esobservation", "qualname": "Observation.bounds", "type": "variable", "doc": "<p><strong>list of <code>observation.esvalue</code> (@property)</strong> : <code>observation.esvalue</code> bounding box for each axis.</p>\n"}, {"fullname": "observation.esobservation.Observation.jsonFeature", "modulename": "observation.esobservation", "qualname": "Observation.jsonFeature", "type": "variable", "doc": "<p><strong>string (@property)</strong> : \"FeatureCollection\" with Location geometry</p>\n"}, {"fullname": "observation.esobservation.Observation.setDatation", "modulename": "observation.esobservation", "qualname": "Observation.setDatation", "type": "variable", "doc": "<p><strong>list (@property)</strong> : list of codec values in the datation index</p>\n"}, {"fullname": "observation.esobservation.Observation.setLocation", "modulename": "observation.esobservation", "qualname": "Observation.setLocation", "type": "variable", "doc": "<p><strong>list (@property)</strong> : list of codec values in the location index</p>\n"}, {"fullname": "observation.esobservation.Observation.setProperty", "modulename": "observation.esobservation", "qualname": "Observation.setProperty", "type": "variable", "doc": "<p><strong>list (@property)</strong> : list of codec values in the property index</p>\n"}, {"fullname": "observation.esobservation.Observation.setResult", "modulename": "observation.esobservation", "qualname": "Observation.setResult", "type": "variable", "doc": "<p><strong>list (@property)</strong> : list of codec values in the result index</p>\n"}, {"fullname": "observation.esobservation.Observation.appendObs", "modulename": "observation.esobservation", "qualname": "Observation.appendObs", "type": "function", "doc": "<p>Add an <code>Observation</code> as a new Result <code>observation.esvalue</code> with bounding box for the Index <code>observation.esvalue</code></p>\n\n<p><em>Parameters</em></p>\n\n<ul>\n<li><strong>obs</strong> : Observation object</li>\n<li><strong>fillvalue</strong> : object value used for default value</li>\n</ul>\n\n<p><em>Returns</em></p>\n\n<ul>\n<li><strong>int</strong> : last index in the <code>Observation</code></li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">obs</span>, </span><span class=\"param\"><span class=\"n\">unique</span><span class=\"o\">=</span><span class=\"kc\">False</span>, </span><span class=\"param\"><span class=\"n\">fillvalue</span><span class=\"o\">=</span><span class=\"s1\">&#39;-&#39;</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "observation.esobservation.Observation.choropleth", "modulename": "observation.esobservation", "qualname": "Observation.choropleth", "type": "function", "doc": "<p>Display <code>Observation</code> on a folium.Map (only with dimension=1)</p>\n\n<ul>\n<li><strong>name</strong> : String, optionnal (default 'choropleth') - Name of the choropleth</li>\n<li><strong>line</strong> : Boolean, optionnal (default True) - Line between recods if True</li>\n</ul>\n\n<p><em>Returns</em> : None</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s1\">&#39;choropleth&#39;</span>, </span><span class=\"param\"><span class=\"n\">line</span><span class=\"o\">=</span><span class=\"kc\">True</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "observation.esobservation.Observation.to_obj", "modulename": "observation.esobservation", "qualname": "Observation.to_obj", "type": "function", "doc": "<p>Return a formatted object (json string, cbor bytes or json dict). </p>\n\n<p><em>Parameters (kwargs)</em></p>\n\n<ul>\n<li><strong>encoded</strong> : boolean (default False) - choice for return format\n(string/bytes if True, dict else)</li>\n<li><strong>encode_format</strong>  : string (default 'json')- choice for return format (json, cbor)</li>\n<li><strong>codif</strong> : dict (default ES.codeb). Numerical value for string in CBOR encoder</li>\n<li><strong>modecodec</strong> : string (default 'optimize') - if 'full', each index is with a full codec\nif 'default' each index has keys, if 'optimize' keys are optimized, \nif 'dict' dict format is used, if 'nokeys' keys are absent</li>\n<li><strong>name</strong> : boolean (default False) - if False, default index name are not included</li>\n<li><p><strong>geojson</strong> : boolean (default False) - geojson for LocationValue if True</p></li>\n<li><p><strong>json_param</strong>     : Boolean - include Obs Param</p></li>\n<li><strong>json_info</strong>      : Boolean - include all infos</li>\n<li><strong>json_info_detail</strong>: Boolean - include the other infos</li>\n</ul>\n\n<p><em>Returns</em> : string, bytes or dict</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "observation.esobservation.Observation.to_xarray", "modulename": "observation.esobservation", "qualname": "Observation.to_xarray", "type": "function", "doc": "<p>Complete the Observation and generate a Xarray DataArray with the dimension define by idx.</p>\n\n<p><em>Parameters</em></p>\n\n<ul>\n<li><strong>info</strong> : boolean (default False) - if True, add _dict attributes to attrs Xarray</li>\n<li><strong>idx</strong> : list (default none) - list of idx to be completed. If [],\nself.primary is used.</li>\n<li><strong>fillvalue</strong> : object (default '?') - value used for the new extval</li>\n<li><strong>fillextern</strong> : boolean(default True) - if True, fillvalue is converted to typevalue</li>\n<li><strong>lisfunc</strong> : function (default none) - list of function to apply to indexes before export</li>\n<li><strong>numeric</strong> : Boolean (default False) - Generate a numeric DataArray.Values.</li>\n<li><strong>npdtype</strong> : string (default None) - numpy dtype for the DataArray ('object' if None)</li>\n<li><strong>kwargs</strong> : parameter for lisfunc</li>\n</ul>\n\n<p><em>Returns</em> : DataArray</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">info</span><span class=\"o\">=</span><span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">idx</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">fillvalue</span><span class=\"o\">=</span><span class=\"s1\">&#39;?&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">fillextern</span><span class=\"o\">=</span><span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">lisfunc</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">numeric</span><span class=\"o\">=</span><span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">npdtype</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "observation.esobservation.ObsError", "modulename": "observation.esobservation", "qualname": "ObsError", "type": "class", "doc": "<p>Common base class for all non-exit exceptions.</p>\n", "bases": "builtins.Exception"}, {"fullname": "observation.essearch", "modulename": "observation.essearch", "type": "module", "doc": "<p></p>\n"}, {"fullname": "observation.essearch.geoeq", "modulename": "observation.essearch", "qualname": "geoeq", "type": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">x</span>, </span><span class=\"param\"><span class=\"n\">y</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "observation.essearch.geowith", "modulename": "observation.essearch", "qualname": "geowith", "type": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">x</span>, </span><span class=\"param\"><span class=\"n\">y</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "observation.essearch.geodis", "modulename": "observation.essearch", "qualname": "geodis", "type": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">x</span>, </span><span class=\"param\"><span class=\"n\">y</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "observation.essearch.geointer", "modulename": "observation.essearch", "qualname": "geointer", "type": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">x</span>, </span><span class=\"param\"><span class=\"n\">y</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "observation.essearch.geotou", "modulename": "observation.essearch", "qualname": "geotou", "type": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">x</span>, </span><span class=\"param\"><span class=\"n\">y</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "observation.essearch.geoover", "modulename": "observation.essearch", "qualname": "geoover", "type": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">x</span>, </span><span class=\"param\"><span class=\"n\">y</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "observation.essearch.geocont", "modulename": "observation.essearch", "qualname": "geocont", "type": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">x</span>, </span><span class=\"param\"><span class=\"n\">y</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "observation.essearch.geonear", "modulename": "observation.essearch", "qualname": "geonear", "type": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">x</span>, </span><span class=\"param\"><span class=\"n\">y</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "observation.essearch.defeq", "modulename": "observation.essearch", "qualname": "defeq", "type": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">x</span>, </span><span class=\"param\"><span class=\"n\">y</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "observation.essearch.defsupeq", "modulename": "observation.essearch", "qualname": "defsupeq", "type": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">x</span>, </span><span class=\"param\"><span class=\"n\">y</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "observation.essearch.defsup", "modulename": "observation.essearch", "qualname": "defsup", "type": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">x</span>, </span><span class=\"param\"><span class=\"n\">y</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "observation.essearch.definfeq", "modulename": "observation.essearch", "qualname": "definfeq", "type": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">x</span>, </span><span class=\"param\"><span class=\"n\">y</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "observation.essearch.definf", "modulename": "observation.essearch", "qualname": "definf", "type": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">x</span>, </span><span class=\"param\"><span class=\"n\">y</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "observation.essearch.defin", "modulename": "observation.essearch", "qualname": "defin", "type": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">x</span>, </span><span class=\"param\"><span class=\"n\">y</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "observation.essearch.timsupeq_0", "modulename": "observation.essearch", "qualname": "timsupeq_0", "type": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">x</span>, </span><span class=\"param\"><span class=\"n\">y</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "observation.essearch.timsup_0", "modulename": "observation.essearch", "qualname": "timsup_0", "type": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">x</span>, </span><span class=\"param\"><span class=\"n\">y</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "observation.essearch.timinfeq_0", "modulename": "observation.essearch", "qualname": "timinfeq_0", "type": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">x</span>, </span><span class=\"param\"><span class=\"n\">y</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "observation.essearch.timinf_0", "modulename": "observation.essearch", "qualname": "timinf_0", "type": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">x</span>, </span><span class=\"param\"><span class=\"n\">y</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "observation.essearch.timsupeq_1", "modulename": "observation.essearch", "qualname": "timsupeq_1", "type": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">x</span>, </span><span class=\"param\"><span class=\"n\">y</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "observation.essearch.timsup_1", "modulename": "observation.essearch", "qualname": "timsup_1", "type": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">x</span>, </span><span class=\"param\"><span class=\"n\">y</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "observation.essearch.timinfeq_1", "modulename": "observation.essearch", "qualname": "timinfeq_1", "type": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">x</span>, </span><span class=\"param\"><span class=\"n\">y</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "observation.essearch.timinf_1", "modulename": "observation.essearch", "qualname": "timinf_1", "type": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">x</span>, </span><span class=\"param\"><span class=\"n\">y</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "observation.essearch.insert_from_doc", "modulename": "observation.essearch", "qualname": "insert_from_doc", "type": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">collection</span>, </span><span class=\"param\"><span class=\"n\">document</span>, </span><span class=\"param\"><span class=\"n\">info</span><span class=\"o\">=</span><span class=\"kc\">True</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "observation.essearch.insert_one_to_mongo", "modulename": "observation.essearch", "qualname": "insert_one_to_mongo", "type": "function", "doc": "<p>Takes an object and inserts it into a MongoDB collection, with info by default.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">collection</span>, </span><span class=\"param\"><span class=\"n\">obj</span>, </span><span class=\"param\"><span class=\"n\">info</span><span class=\"o\">=</span><span class=\"kc\">True</span>, </span><span class=\"param\"><span class=\"n\">mode</span><span class=\"o\">=</span><span class=\"s1\">&#39;dict&#39;</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "observation.essearch.insert_many_to_mongo", "modulename": "observation.essearch", "qualname": "insert_many_to_mongo", "type": "function", "doc": "<p>Takes an object and inserts it into a MongoDB collection, with info by default.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">collection</span>, </span><span class=\"param\"><span class=\"n\">objList</span>, </span><span class=\"param\"><span class=\"n\">info</span><span class=\"o\">=</span><span class=\"kc\">True</span>, </span><span class=\"param\"><span class=\"n\">mode</span><span class=\"o\">=</span><span class=\"s1\">&#39;dict&#39;</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "observation.essearch.empty_request", "modulename": "observation.essearch", "qualname": "empty_request", "type": "function", "doc": "<p>limit : 100 MB</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">collection</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "observation.essearch.ESSearch", "modulename": "observation.essearch", "qualname": "ESSearch", "type": "class", "doc": "<p>An <code>ESSearch</code> is defined as an ensemble of conditions to be used to execute a MongoDB request or any iterable containing only observations.</p>\n\n<p><em>Attributes (for @property, see methods)</em> :</p>\n\n<ul>\n<li><strong>parameters</strong> : list of list of conditions for queries, to be interpreted as : parameters = [[cond_1 AND cond_2 AND cond_3] OR [cond_4 AND cond_5 AND cond_6]] where conds are criteria for queries</li>\n<li><strong>data</strong> : iterable on which we want to query. Must contain observations only.</li>\n<li><strong>collection</strong> : pymongo.collection.Collection on which we want to query.</li>\n</ul>\n\n<p>The methods defined in this class are (documentations in methods definitions):</p>\n\n<p><em>dynamic value (getter @property)</em></p>\n\n<ul>\n<li><code>ESSearch.request</code></li>\n</ul>\n\n<p><em>parameters for query - update methods</em></p>\n\n<ul>\n<li><code>ESSearch.addconditions</code></li>\n<li><code>ESSearch.addcondition</code></li>\n<li><code>ESSearch.orcondition</code></li>\n<li><code>ESSearch.removecondition</code></li>\n<li><code>ESSearch.clearconditions</code></li>\n<li><code>ESSearch.clear</code></li>\n</ul>\n\n<p><em>query method</em></p>\n\n<ul>\n<li><code>ESSearch.execute</code></li>\n</ul>\n"}, {"fullname": "observation.essearch.ESSearch.__init__", "modulename": "observation.essearch", "qualname": "ESSearch.__init__", "type": "function", "doc": "<p>ESSearch constructor. Parameters can also be defined and updated using class methods.</p>\n\n<p><em>Arguments</em></p>\n\n<ul>\n<li><strong>parameters</strong> :  dict, list (default None) - list of dictionnaries whose keys are arguments of ESSearch.addcondition method\nex: parameters = [\n{'name' : 'datation', 'operand' : datetime.datetime(2022, 9, 19, 1), 'comparator' : '>='},\n{'name' : 'property', 'operand' : 'PM2'}\n]</li>\n<li><strong>data</strong> :  list (default None) - list of Observation</li>\n<li><strong>collection</strong> :  pymongo.collection.Collection (default None) - MongoDB collection of Observation. Documents must have been inserted in an appropriate format</li>\n<li><strong>heavy</strong> :  bool (default False) - Must be True when values are defined directly and inside dictionnaries simultaneously.</li>\n<li><strong>kwargs</strong> :  other parameters are used as arguments for ESSearch.addcondition method</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">parameters</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">data</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">collection</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">heavy</span><span class=\"o\">=</span><span class=\"kc\">True</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span>)</span>"}, {"fullname": "observation.essearch.ESSearch.addconditions", "modulename": "observation.essearch", "qualname": "ESSearch.addconditions", "type": "function", "doc": "<p>Takes multiple parameters and executes self.addcondition() for each of them.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">parameters</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "observation.essearch.ESSearch.addcondition", "modulename": "observation.essearch", "qualname": "ESSearch.addcondition", "type": "function", "doc": "<p>Takes parameters and inserts corresponding query condition in self.parameters.</p>\n\n<p><em>Parameters</em></p>\n\n<ul>\n<li><p><strong>name</strong> :  str (default None) - name of an IIndex, which corresponds to an Ilist column name.\n        (ex: 'datation', 'location', 'property')\n        This parameter is used to give a default value to parameters path and unwind.</p></li>\n<li><p><strong>operand</strong> :  - (default None) - Object used for the comparison.\n        (ex: if we search for observations made in Paris, operand is 'Paris')</p></li>\n<li><p><strong>comparator</strong>:  str (default None) - str giving the comparator to use. (ex: '>=', 'in')</p></li>\n<li><p><strong>path</strong> :  str (default None) - to use to define a precise MongoDB path. When name is given, default path is data.<name>.value.cod</p></li>\n<li><p><strong>or_position</strong> :  int (default -1) - position in self.parameters in which the condition is to be inserted.</p></li>\n<li><p><strong>formatstring</strong> :  str (default None) - str to use to automatically change str to datetime before applying condition. \n        Does not update the data base. If value is set to 'default', format is assumed to be Isoformat.</p></li>\n<li><p><strong>inverted</strong> :  bool (default None) - to add a \"not\" in the condition.\n        To use in case where every element of a MongoDB array (equivalent to python list) must verify the condition (by default, condition is verified when at least one element of the array verifies it).</p></li>\n<li><p><strong>unwind</strong> :  int (default None) - int corresponding to the number of additional {\"$unwind\" : \"$\" + path} to be added in the beginning of the query.</p></li>\n</ul>\n\n<p>no comparator =&gt; default comparator associated with operand type in dico_alias_mongo is used (mainly equality)\nno operand =&gt; only the existence of something located at path is tested</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">name</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">operand</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">comparator</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">path</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">or_position</span><span class=\"o\">=-</span><span class=\"mi\">1</span>,</span><span class=\"param\">\t<span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "observation.essearch.ESSearch.orcondition", "modulename": "observation.essearch", "qualname": "ESSearch.orcondition", "type": "function", "doc": "<p>Adds a condition in a new sublist in self.parameters. Separations in sublists correspond to \"or\" in the query.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"o\">*</span><span class=\"n\">args</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "observation.essearch.ESSearch.removecondition", "modulename": "observation.essearch", "qualname": "ESSearch.removecondition", "type": "function", "doc": "<p>Removes a condition from self.parameters. By default, last element added is removed.\nOtherwise, condition removed is self.parameters[or_position][condnum]</p>\n\n<p>To remove all conditions, use ESSearch.clearconditions() method.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">or_position</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">condnum</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "observation.essearch.ESSearch.clearconditions", "modulename": "observation.essearch", "qualname": "ESSearch.clearconditions", "type": "function", "doc": "<p>Removes all conditions from self.parameters\nTo remove all attributes, use ESSearch.clear() method.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "observation.essearch.ESSearch.clear", "modulename": "observation.essearch", "qualname": "ESSearch.clear", "type": "function", "doc": "<p>Resets self</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "observation.essearch.ESSearch.request", "modulename": "observation.essearch", "qualname": "ESSearch.request", "type": "variable", "doc": "<p>content of the aggregation query to be executed with ESSearch.execute()</p>\n"}, {"fullname": "observation.essearch.ESSearch.execute", "modulename": "observation.essearch", "qualname": "ESSearch.execute", "type": "function", "doc": "<p>Executes the request and returns its result, either in one or many Observations.</p>\n\n<p><em>Parameter</em></p>\n\n<ul>\n<li><strong>fitered</strong> :  bool (default False) - parameter to force filtering on Mongo out.</li>\n<li><strong>namefused</strong> :  bool (default False) - Put to True to fuse observations whose names are the same together.</li>\n<li><strong>single</strong> :  bool (default True) - Must be put to False in order to return a list of Observation instead of a single Observation.</li>\n<li><strong>fillvalue</strong> :  (default None) - Value to use to fill gaps when observations are fused together.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">filtered</span><span class=\"o\">=</span><span class=\"kc\">False</span>, </span><span class=\"param\"><span class=\"n\">namefused</span><span class=\"o\">=</span><span class=\"kc\">False</span>, </span><span class=\"param\"><span class=\"n\">single</span><span class=\"o\">=</span><span class=\"kc\">False</span>, </span><span class=\"param\"><span class=\"n\">fillvalue</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "observation.esvalue", "modulename": "observation.esvalue", "type": "module", "doc": "<p>Created on Mon Aug  2 14:51:23 2021</p>\n\n<p>@author: philippe@loco-labs.io</p>\n\n<p>ESValue is a class dedicated to structured data (such as dates, location or measurable properties) \nand groups common properties and concepts.</p>\n\n<p>ESValue is build around two attributes :</p>\n\n<ul>\n<li>'name' which is a simple String</li>\n<li><p>'value' which corresponds to a more or less complex object :</p>\n\n<ul>\n<li>'DatationValue' : value is a TimeSlot Object which represent a set of time intervals</li>\n<li>'LocationValue' : value is a Shapely Geometry which represent a set of polygons</li>\n<li>'PropertyValue' : value is a simple dictionary which specifies all the characteristics of a property</li>\n<li>'NamedValue'    : value can be any simple object</li>\n<li>'ExternValue'   : value can be any other object</li>\n</ul></li>\n</ul>\n\n<p><img src=\"https://loco-philippe.github.io/ES/ESValue_class.png\" width=\"800\"></p>\n\n<p>This module groups the classes of the objects used in the <code>observation.esobservation</code> module :</p>\n\n<ul>\n<li><code>DatationValue</code>,</li>\n<li><code>LocationValue</code>,</li>\n<li><code>PropertyValue</code>,</li>\n<li><code>NamedValue</code></li>\n<li><code>ExternValue</code></li>\n</ul>\n\n<p>and the parent class :</p>\n\n<ul>\n<li><code>observation.esvalue_base.ESValue</code></li>\n</ul>\n\n<p>Documentation is available in other pages :</p>\n\n<ul>\n<li>The concepts of 'ES value' are describe in \n<a href=\"https://github.com/loco-philippe/Environmental-Sensing/wiki/ESValue\">this page</a>.</li>\n<li>The non-regression tests are at \n<a href=\"https://github.com/loco-philippe/Environmental-Sensing/blob/main/python/Tests/test_esvalue.py\">this page</a></li>\n<li>Examples are \n<a href=\"https://github.com/loco-philippe/Environmental-Sensing/tree/main/python/Examples\">here</a></li>\n<li>The Json Standard for ESValue is define \n<a href=\"https://github.com/loco-philippe/Environmental-Sensing/tree/main/documentation/ESJSON-Standard.pdf\">here</a></li>\n</ul>\n"}, {"fullname": "observation.esvalue.DatationValue", "modulename": "observation.esvalue", "qualname": "DatationValue", "type": "class", "doc": "<p>This class represent Time (instant, interval or set of intervals).</p>\n\n<p><em>Attributes (for @property see methods)</em> :</p>\n\n<ul>\n<li><strong>value</strong> : TimeSlot object (instant, interval or list of interval)</li>\n<li><strong>name</strong> : String</li>\n</ul>\n\n<p>The methods defined in this class are :</p>\n\n<p><em>constructor (@classmethod)</em></p>\n\n<ul>\n<li><code>DatationValue.Simple</code>  (instant)</li>\n<li><code>DatationValue.Box</code>     (interval)</li>\n<li><code>DatationValue.from_obj</code>(see  <code>ESValue.from_obj</code>)</li>\n</ul>\n\n<p><em>getters</em></p>\n\n<ul>\n<li><code>DatationValue.getInstant</code></li>\n<li><code>DatationValue.getInterval</code></li>\n<li><code>DatationValue.vSimple</code></li>\n<li><code>DatationValue.vInterval</code></li>\n<li><code>DatationValue.link</code></li>\n</ul>\n", "bases": "esvalue_base.ESValue"}, {"fullname": "observation.esvalue.DatationValue.__init__", "modulename": "observation.esvalue", "qualname": "DatationValue.__init__", "type": "function", "doc": "<p>DatationValue constructor.</p>\n\n<p><em>Parameters</em></p>\n\n<ul>\n<li><strong>val</strong> :  compatible Timeslot Value (default nullDate)</li>\n<li><strong>name</strong> :  string (default nullName)</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">val</span><span class=\"o\">=</span><span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">datetime</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">tzinfo</span><span class=\"o\">=</span><span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">timezone</span><span class=\"o\">.</span><span class=\"n\">utc</span><span class=\"p\">)</span>,</span><span class=\"param\">\t<span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s1\">&#39;&#39;</span></span>)</span>"}, {"fullname": "observation.esvalue.DatationValue.Simple", "modulename": "observation.esvalue", "qualname": "DatationValue.Simple", "type": "function", "doc": "<p>DatationValue built with a time value (instant)</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">cls</span>, </span><span class=\"param\"><span class=\"n\">instant</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "observation.esvalue.DatationValue.Box", "modulename": "observation.esvalue", "qualname": "DatationValue.Box", "type": "function", "doc": "<p>DatationValue built from a tuple or list box coordinates (tmin, tmax)</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">cls</span>, </span><span class=\"param\"><span class=\"n\">bounds</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "observation.esvalue.DatationValue.from_obj", "modulename": "observation.esvalue", "qualname": "DatationValue.from_obj", "type": "function", "doc": "<p>ESValue function (see ESValue.from_obj)</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">cls</span>, </span><span class=\"param\"><span class=\"n\">bs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "observation.esvalue.DatationValue.boundingBox", "modulename": "observation.esvalue", "qualname": "DatationValue.boundingBox", "type": "function", "doc": "<p>return a tuple (datmin, datmax) with bounds values</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">listValue</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "observation.esvalue.DatationValue.getInstant", "modulename": "observation.esvalue", "qualname": "DatationValue.getInstant", "type": "function", "doc": "<p>return datetime if 'instant', none else</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "observation.esvalue.DatationValue.getInterval", "modulename": "observation.esvalue", "qualname": "DatationValue.getInterval", "type": "function", "doc": "<p>return [datetime t1, datetime t2] if 'interval', none else</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "observation.esvalue.DatationValue.link", "modulename": "observation.esvalue", "qualname": "DatationValue.link", "type": "function", "doc": "<p>return the link (string) between self.value and other.value :</p>\n\n<ul>\n<li>equals     : if self and other are the same</li>\n<li>disjoint   : if self's intervals and other's intervals are all disjoint</li>\n<li>within     : if all self's intervals are included in other's intervals</li>\n<li>contains   : if all other's intervals are included in self's intervals</li>\n<li>intersects : in the others cases</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">other</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "observation.esvalue.DatationValue.nullValue", "modulename": "observation.esvalue", "qualname": "DatationValue.nullValue", "type": "function", "doc": "<p>return nullDate value</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "observation.esvalue.DatationValue.vInterval", "modulename": "observation.esvalue", "qualname": "DatationValue.vInterval", "type": "function", "doc": "<p>return [t1, t2] with t1, t2 - Mini, maxi of the TimeSlot (timestamp or datetime).</p>\n\n<p><em>Parameters</em></p>\n\n<ul>\n<li><strong>encode_format</strong>    : string (default 'json')- choice for return format (json, cbor)</li>\n</ul>\n\n<p><em>Returns</em></p>\n\n<ul>\n<li><strong>JSON with timestamp or list with datetime</strong></li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">encoded</span><span class=\"o\">=</span><span class=\"kc\">True</span>, </span><span class=\"param\"><span class=\"n\">encode_format</span><span class=\"o\">=</span><span class=\"s1\">&#39;json&#39;</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "observation.esvalue.DatationValue.vSimple", "modulename": "observation.esvalue", "qualname": "DatationValue.vSimple", "type": "function", "doc": "<p>return a datetime : middle of the TimeSlot.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">string</span><span class=\"o\">=</span><span class=\"kc\">False</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "observation.esvalue.LocationValue", "modulename": "observation.esvalue", "qualname": "LocationValue", "type": "class", "doc": "<p>This class represent the Location of an Observation (point, polygon).</p>\n\n<p><em>Attributes (for @property see methods)</em> :</p>\n\n<ul>\n<li><strong>value</strong> : Shapely object (point, polygon)</li>\n<li><strong>name</strong> : String</li>\n</ul>\n\n<p>The methods defined in this class are :</p>\n\n<p><em>constructor (@classmethod)</em></p>\n\n<ul>\n<li><code>LocationValue.Simple</code>   (point)</li>\n<li><code>LocationValue.Box</code></li>\n<li><code>LocationValue.from_obj</code> (see  <code>ESValue.from_obj</code>)</li>\n</ul>\n\n<p><em>getters (@property)</em></p>\n\n<ul>\n<li><code>LocationValue.coords</code></li>\n<li><code>LocationValue.coorInv</code></li>\n</ul>\n\n<p><em>getters</em></p>\n\n<ul>\n<li><code>LocationValue.getPoint</code></li>\n<li><code>LocationValue.vSimple</code></li>\n<li><code>LocationValue.vPointInv</code></li>\n<li><code>LocationValue.vPointX</code></li>\n<li><code>LocationValue.vPointY</code></li>\n<li><code>LocationValue.vCodePlus</code></li>\n<li><code>LocationValue.link</code></li>\n</ul>\n", "bases": "esvalue_base.ESValue"}, {"fullname": "observation.esvalue.LocationValue.__init__", "modulename": "observation.esvalue", "qualname": "LocationValue.__init__", "type": "function", "doc": "<p>LocationValue constructor.</p>\n\n<p><em>Parameters</em></p>\n\n<ul>\n<li><strong>val</strong> :  compatible shapely.geometry.Point (or Polygon) Value (default nullCoor)</li>\n<li><strong>name</strong> :  string (default nullName)</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">val</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">]</span>, </span><span class=\"param\"><span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s1\">&#39;&#39;</span></span>)</span>"}, {"fullname": "observation.esvalue.LocationValue.Simple", "modulename": "observation.esvalue", "qualname": "LocationValue.Simple", "type": "function", "doc": "<p>return LocationValue built with tuple or list coordinates (x,y)</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">cls</span>, </span><span class=\"param\"><span class=\"n\">coord</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "observation.esvalue.LocationValue.Box", "modulename": "observation.esvalue", "qualname": "LocationValue.Box", "type": "function", "doc": "<p>return LocationValue built with tuple or list box coordinates (minx, miny, maxx, maxy)</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">cls</span>, </span><span class=\"param\"><span class=\"n\">bounds</span>, </span><span class=\"param\"><span class=\"n\">ccw</span><span class=\"o\">=</span><span class=\"kc\">True</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "observation.esvalue.LocationValue.from_obj", "modulename": "observation.esvalue", "qualname": "LocationValue.from_obj", "type": "function", "doc": "<p>ESValue function (see ESValue.from_obj)</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">cls</span>, </span><span class=\"param\"><span class=\"n\">bs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "observation.esvalue.LocationValue.boundingBox", "modulename": "observation.esvalue", "qualname": "LocationValue.boundingBox", "type": "function", "doc": "<p>return a tuple (xmin, ymin, xmax, ymax) with bounds values</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">listValue</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "observation.esvalue.LocationValue.coords", "modulename": "observation.esvalue", "qualname": "LocationValue.coords", "type": "variable", "doc": "<p>return geoJson coordinates (list)</p>\n"}, {"fullname": "observation.esvalue.LocationValue.coorInv", "modulename": "observation.esvalue", "qualname": "LocationValue.coorInv", "type": "variable", "doc": "<p>list (@property) : vSimple inverse coordinates [vSimple[1], vSimple[0]]</p>\n"}, {"fullname": "observation.esvalue.LocationValue.getPoint", "modulename": "observation.esvalue", "qualname": "LocationValue.getPoint", "type": "function", "doc": "<p>return a list with point coordinates [x, y] if the shape is a point, else none</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "observation.esvalue.LocationValue.link", "modulename": "observation.esvalue", "qualname": "LocationValue.link", "type": "function", "doc": "<p>return the link (string) between self.value and other.value :</p>\n\n<ul>\n<li>equals     : if self and other are the same</li>\n<li>disjoint   : if self's shape and other's shape are disjoint</li>\n<li>within     : if other's shape contains self's shape</li>\n<li>contains   : if self's shape contains other's shape</li>\n<li>intersects : in the others cases</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">other</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "observation.esvalue.LocationValue.nullValue", "modulename": "observation.esvalue", "qualname": "LocationValue.nullValue", "type": "function", "doc": "<p>return nullPosition value</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "observation.esvalue.LocationValue.vCodePlus", "modulename": "observation.esvalue", "qualname": "LocationValue.vCodePlus", "type": "function", "doc": "<p>return CodePlus value (string) of the point property value</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "observation.esvalue.LocationValue.vSimple", "modulename": "observation.esvalue", "qualname": "LocationValue.vSimple", "type": "function", "doc": "<p>return simple value (centroid coordinates for the shape : \n[x, y]) in a string format or in a object format</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">string</span><span class=\"o\">=</span><span class=\"kc\">False</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "observation.esvalue.LocationValue.vPointInv", "modulename": "observation.esvalue", "qualname": "LocationValue.vPointInv", "type": "function", "doc": "<p>return point (property) with inversed vSimple coordinates in a string format or\nin a list format [y, x]</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">string</span><span class=\"o\">=</span><span class=\"kc\">False</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "observation.esvalue.LocationValue.vPointX", "modulename": "observation.esvalue", "qualname": "LocationValue.vPointX", "type": "function", "doc": "<p>return point (property) coordinates x</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "observation.esvalue.LocationValue.vPointY", "modulename": "observation.esvalue", "qualname": "LocationValue.vPointY", "type": "function", "doc": "<p>return point (property) coordinates y</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "observation.esvalue.PropertyValue", "modulename": "observation.esvalue", "qualname": "PropertyValue", "type": "class", "doc": "<p>This class represents the Property of an Observation.</p>\n\n<p><em>Attributes (for @property see methods)</em> :</p>\n\n<ul>\n<li><strong>value</strong> : dict</li>\n<li><strong>name</strong> : String</li>\n</ul>\n\n<p>The methods defined in this class are :</p>\n\n<p><em>constructor (@classmethod)</em></p>\n\n<ul>\n<li><code>PropertyValue.Simple</code>   (property type)</li>\n<li><code>PropertyValue.Box</code>      (set of property type)</li>\n<li><code>PropertyValue.from_obj</code> (see  <code>ESValue.from_obj</code>)</li>\n</ul>\n\n<p><em>getters</em></p>\n\n<ul>\n<li><code>PropertyValue.vSimple</code></li>\n<li><code>PropertyValue.link</code></li>\n</ul>\n", "bases": "esvalue_base.ESValue"}, {"fullname": "observation.esvalue.PropertyValue.__init__", "modulename": "observation.esvalue", "qualname": "PropertyValue.__init__", "type": "function", "doc": "<p>PropertyValue constructor.</p>\n\n<p><em>Parameters</em></p>\n\n<ul>\n<li><strong>val</strong> :  property dict or json string (default nullPrp)</li>\n<li><strong>name</strong> :  string (default nullName)</li>\n<li><strong>prp_dict</strong> : boolean(default False) - if True type property has to be in the type dictionary</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">val</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"s1\">&#39;prp&#39;</span><span class=\"p\">:</span> <span class=\"s1\">&#39;-&#39;</span><span class=\"p\">}</span>, </span><span class=\"param\"><span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s1\">&#39;&#39;</span>, </span><span class=\"param\"><span class=\"n\">prp_dict</span><span class=\"o\">=</span><span class=\"kc\">False</span></span>)</span>"}, {"fullname": "observation.esvalue.PropertyValue.Simple", "modulename": "observation.esvalue", "qualname": "PropertyValue.Simple", "type": "function", "doc": "<p>PropertyValue built with a value (property type)</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">cls</span>, </span><span class=\"param\"><span class=\"n\">prp</span>, </span><span class=\"param\"><span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s1\">&#39;simple&#39;</span>, </span><span class=\"param\"><span class=\"n\">prp_dict</span><span class=\"o\">=</span><span class=\"kc\">False</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "observation.esvalue.PropertyValue.Box", "modulename": "observation.esvalue", "qualname": "PropertyValue.Box", "type": "function", "doc": "<p>PropertyValue built with a value (property type)</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">cls</span>, </span><span class=\"param\"><span class=\"n\">prp</span>, </span><span class=\"param\"><span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s1\">&#39;box&#39;</span>, </span><span class=\"param\"><span class=\"n\">prp_dict</span><span class=\"o\">=</span><span class=\"kc\">False</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "observation.esvalue.PropertyValue.from_obj", "modulename": "observation.esvalue", "qualname": "PropertyValue.from_obj", "type": "function", "doc": "<p>ESValue function (see ESValue.from_obj)</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">cls</span>, </span><span class=\"param\"><span class=\"n\">bs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "observation.esvalue.PropertyValue.boundingBox", "modulename": "observation.esvalue", "qualname": "PropertyValue.boundingBox", "type": "function", "doc": "<p>return a tuple with 'prp' values</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">listValue</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "observation.esvalue.PropertyValue.link", "modulename": "observation.esvalue", "qualname": "PropertyValue.link", "type": "function", "doc": "<p>return the link (string) between self.value and other.value :</p>\n\n<ul>\n<li>equals     : if self and other are the same</li>\n<li>disjoint   : if the self's key/val are all different from other's key/val</li>\n<li>within     : if all self's key/val are included in other's key/val</li>\n<li>contains   : if all other's key/val are included in self's key/val</li>\n<li>intersects : in the others cases</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">other</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "observation.esvalue.PropertyValue.nullValue", "modulename": "observation.esvalue", "qualname": "PropertyValue.nullValue", "type": "function", "doc": "<p>return nullPrp value</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "observation.esvalue.PropertyValue.vSimple", "modulename": "observation.esvalue", "qualname": "PropertyValue.vSimple", "type": "function", "doc": "<p>return simple value (type for the property) in a string format or in a object format</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">string</span><span class=\"o\">=</span><span class=\"kc\">False</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "observation.esvalue.NamedValue", "modulename": "observation.esvalue", "qualname": "NamedValue", "type": "class", "doc": "<p>This class represent a simple value with an associated string.</p>\n\n<p><em>Attributes (for @property see methods)</em> :</p>\n\n<ul>\n<li><strong>value</strong> : any json object</li>\n<li><strong>name</strong> : String</li>\n</ul>\n\n<p>The methods defined in this class are :</p>\n\n<p><em>constructor</em></p>\n\n<ul>\n<li><code>NamedValue.from_obj</code> (see  <code>ESValue.from_obj</code>)</li>\n</ul>\n\n<p><em>getters</em></p>\n\n<ul>\n<li><code>NamedValue.vSimple</code></li>\n</ul>\n", "bases": "esvalue_base.ESValue"}, {"fullname": "observation.esvalue.NamedValue.__init__", "modulename": "observation.esvalue", "qualname": "NamedValue.__init__", "type": "function", "doc": "<p>NamedValue constructor.</p>\n\n<p><em>Parameters</em></p>\n\n<ul>\n<li><strong>val</strong> :  any simple object (default nullVal)</li>\n<li><strong>name</strong> : string (default nullName)</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">val</span><span class=\"o\">=</span><span class=\"n\">nan</span>, </span><span class=\"param\"><span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s1\">&#39;&#39;</span></span>)</span>"}, {"fullname": "observation.esvalue.NamedValue.from_obj", "modulename": "observation.esvalue", "qualname": "NamedValue.from_obj", "type": "function", "doc": "<p>ESValue function (see ESValue.from_obj)</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">cls</span>, </span><span class=\"param\"><span class=\"n\">bs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "observation.esvalue.NamedValue.nullValue", "modulename": "observation.esvalue", "qualname": "NamedValue.nullValue", "type": "function", "doc": "<p>return nullVal value</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "observation.esvalue.NamedValue.vSimple", "modulename": "observation.esvalue", "qualname": "NamedValue.vSimple", "type": "function", "doc": "<p>return float value in string or object format</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">string</span><span class=\"o\">=</span><span class=\"kc\">False</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "observation.esvalue.ExternValue", "modulename": "observation.esvalue", "qualname": "ExternValue", "type": "class", "doc": "<p>This class represent a complex (extern) value with an associated string.</p>\n\n<p><em>Attributes (for @property see methods)</em> :</p>\n\n<ul>\n<li><strong>value</strong> : any object</li>\n<li><strong>name</strong> : String</li>\n</ul>\n\n<p>The methods defined in this class are :</p>\n\n<p><em>constructor</em></p>\n\n<ul>\n<li><code>ExternValue.from_obj</code> (see  <code>ESValue.from_obj</code>)</li>\n</ul>\n\n<p><em>getters</em></p>\n\n<ul>\n<li><code>ExternValue.vSimple</code></li>\n</ul>\n", "bases": "esvalue_base.ESValue"}, {"fullname": "observation.esvalue.ExternValue.__init__", "modulename": "observation.esvalue", "qualname": "ExternValue.__init__", "type": "function", "doc": "<p>ExternValue constructor.</p>\n\n<p><em>Parameters</em></p>\n\n<ul>\n<li><strong>val</strong> :  any simple object (default nullVal)</li>\n<li><strong>name</strong> : string (default nullName)</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">val</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s1\">&#39;&#39;</span>, </span><span class=\"param\"><span class=\"n\">className</span><span class=\"o\">=</span><span class=\"kc\">None</span></span>)</span>"}, {"fullname": "observation.esvalue.ExternValue.from_obj", "modulename": "observation.esvalue", "qualname": "ExternValue.from_obj", "type": "function", "doc": "<p>ESValue function (see ESValue.from_obj)</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">cls</span>, </span><span class=\"param\"><span class=\"n\">bs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "observation.esvalue.ExternValue.nullValue", "modulename": "observation.esvalue", "qualname": "ExternValue.nullValue", "type": "function", "doc": "<p>return nullVal value</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "observation.esvalue.ExternValue.vSimple", "modulename": "observation.esvalue", "qualname": "ExternValue.vSimple", "type": "function", "doc": "<p>return conversion from value to float</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">string</span><span class=\"o\">=</span><span class=\"kc\">False</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "observation.esvalue.ESValueError", "modulename": "observation.esvalue", "qualname": "ESValueError", "type": "class", "doc": "<p>ESValue Exception</p>\n", "bases": "builtins.Exception"}, {"fullname": "observation.esvalue_base", "modulename": "observation.esvalue_base", "type": "module", "doc": "<p>Created on Mon Aug  2 14:51:23 2021</p>\n\n<p>@author: philippe@loco-labs.io</p>\n\n<p>ESValue is a module dedicated to structured data (such as dates, location or measurable properties) \nand groups common properties and concepts.</p>\n\n<p>ESValue is build around two attributes :</p>\n\n<ul>\n<li>'name' which is a simple String</li>\n<li><p>'value' which corresponds to a more or less complex object :</p>\n\n<ul>\n<li>DatationValue : value is a TimeSlot Object which represent a set of time intervals</li>\n<li>LocationValue : value is a Shapely Geometry which represent a set of polygons</li>\n<li>PropertyValue : value is a simple dictionary which specifies all the characteristics of a property</li>\n<li>NamedValue    : value can be any simple object</li>\n<li>ExternValue   : value can be any other object</li>\n</ul></li>\n</ul>\n\n<p><img src=\"https://loco-philippe.github.io/ES/ESValue_class.png\" width=\"800\"></p>\n\n<p>This module groups the classes of the objects used in the <code>observation.esobservation</code> module :</p>\n\n<ul>\n<li><code>DatationValue</code>,</li>\n<li><code>LocationValue</code>,</li>\n<li><code>PropertyValue</code>,</li>\n<li><code>NamedValue</code></li>\n<li><code>ExternValue</code></li>\n</ul>\n\n<p>and the parent class :</p>\n\n<ul>\n<li><code>ESValue</code></li>\n</ul>\n\n<p>Documentation is available in other pages :</p>\n\n<ul>\n<li>The concepts of 'ES value' are describe in \n<a href=\"https://github.com/loco-philippe/Environmental-Sensing/wiki/ESValue\">this page</a>.</li>\n<li>The non-regression tests are at \n<a href=\"https://github.com/loco-philippe/Environmental-Sensing/blob/main/python/Tests/test_esvalue.py\">this page</a></li>\n<li>Examples are \n<a href=\"https://github.com/loco-philippe/Environmental-Sensing/tree/main/python/Examples\">here</a></li>\n<li>The Json Standard for ESValue is define \n<a href=\"https://github.com/loco-philippe/Environmental-Sensing/tree/main/documentation/ESJSON-Standard.pdf\">here</a></li>\n</ul>\n"}, {"fullname": "observation.esvalue_base.ESValueEncoder", "modulename": "observation.esvalue_base", "qualname": "ESValueEncoder", "type": "class", "doc": "<p>add a new json encoder for ESValue</p>\n", "bases": "json.encoder.JSONEncoder"}, {"fullname": "observation.esvalue_base.ESValueEncoder.default", "modulename": "observation.esvalue_base", "qualname": "ESValueEncoder.default", "type": "function", "doc": "<p>Implement this method in a subclass such that it returns\na serializable object for <code>o</code>, or calls the base implementation\n(to raise a <code>TypeError</code>).</p>\n\n<p>For example, to support arbitrary iterators, you could\nimplement default like this::</p>\n\n<pre><code>def default(self, o):\n    try:\n        iterable = iter(o)\n    except TypeError:\n        pass\n    else:\n        return list(iterable)\n    # Let the base class default method raise the TypeError\n    return JSONEncoder.default(self, o)\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">o</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "observation.esvalue_base.ESValue", "modulename": "observation.esvalue_base", "qualname": "ESValue", "type": "class", "doc": "<p>This class is the parent class for each kind of values\n (<code>DatationValue</code>, <code>LocationValue</code>, <code>PropertyValue</code>, <code>NamedValue</code>, <code>ExternValue</code>)</p>\n\n<p><em>Attributes</em> :</p>\n\n<ul>\n<li><strong>name</strong>  : name  of <code>ESValue.ESValue</code> objects</li>\n<li><strong>value</strong> : value of <code>ESValue.ESValue</code> objects</li>\n<li><code>ESValue.bounds</code> (@property) : boundary  of <code>ESValue.ESValue</code> objects</li>\n<li><code>ESValue.simple</code> (@property) : simplified value of <code>ESValue.ESValue</code> objects</li>\n</ul>\n\n<p>The methods defined in this class are :</p>\n\n<p><strong>binary predicates</strong></p>\n\n<ul>\n<li><code>ESValue.contains</code></li>\n<li><code>ESValue.equals</code></li>\n<li><code>ESValue.intersects</code></li>\n<li><code>ESValue.within</code></li>\n<li><code>ESValue.disjoint</code></li>\n<li><code>ESValue.isEqual</code></li>\n<li><code>ESValue.isNotNull</code></li>\n<li><code>ESValue.isName</code></li>\n</ul>\n\n<p><strong>other methods</strong></p>\n\n<ul>\n<li><code>ESValue.boundingBox</code> (@classmethod)</li>\n<li><code>ESValue.from_obj</code> (@classmethod)</li>\n<li><code>ESValue.boxUnion</code></li>\n<li><code>ESValue.getValue</code></li>\n<li><code>ESValue.getName</code></li>\n<li><code>ESValue.json</code></li>\n<li><code>ESValue.setName</code></li>\n<li><code>ESValue.setValue</code></li>\n<li><code>ESValue.simple</code></li>\n<li><code>ESValue.to_float</code></li>\n<li><code>ESValue.to_obj</code></li>\n<li><code>ESValue.valClassName</code></li>\n<li><code>ESValue.vName</code></li>\n<li><code>ESValue.vSimple</code></li>\n</ul>\n"}, {"fullname": "observation.esvalue_base.ESValue.__init__", "modulename": "observation.esvalue_base", "qualname": "ESValue.__init__", "type": "function", "doc": "<p>Initialize 'name' and 'value' attribute</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">val</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">name</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">className</span><span class=\"o\">=</span><span class=\"kc\">None</span></span>)</span>"}, {"fullname": "observation.esvalue_base.ESValue.from_obj", "modulename": "observation.esvalue_base", "qualname": "ESValue.from_obj", "type": "function", "doc": "<p>Generate an ESValue Object from a bytes, json or dict object\nSeveral configurations for bs parameters (name and type are string) :\n    - {name : value}\n    - name\n    - object\n    - {type : {name: value}}\n    - {type : name}\n    - {type : value}</p>\n\n<p><em>Parameters</em></p>\n\n<ul>\n<li><strong>bs</strong> : bytes, string or dict data to convert</li>\n</ul>\n\n<p><em>Returns</em> :  ESValue object</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">bs</span>, </span><span class=\"param\"><span class=\"n\">classname</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">simple</span><span class=\"o\">=</span><span class=\"kc\">True</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "observation.esvalue_base.ESValue.equals", "modulename": "observation.esvalue_base", "qualname": "ESValue.equals", "type": "function", "doc": "<p>check if self value equals other value (return a boolean).</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">other</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "observation.esvalue_base.ESValue.disjoint", "modulename": "observation.esvalue_base", "qualname": "ESValue.disjoint", "type": "function", "doc": "<p>check if self value is disjoint from other value (return a boolean).</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">other</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "observation.esvalue_base.ESValue.contains", "modulename": "observation.esvalue_base", "qualname": "ESValue.contains", "type": "function", "doc": "<p>check if self value contains other value (return a boolean).</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">other</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "observation.esvalue_base.ESValue.within", "modulename": "observation.esvalue_base", "qualname": "ESValue.within", "type": "function", "doc": "<p>check if self value is within other value (return a boolean).</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">other</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "observation.esvalue_base.ESValue.intersects", "modulename": "observation.esvalue_base", "qualname": "ESValue.intersects", "type": "function", "doc": "<p>check if self value intersects other value (return a boolean).</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">other</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "observation.esvalue_base.ESValue.isNotNull", "modulename": "observation.esvalue_base", "qualname": "ESValue.isNotNull", "type": "function", "doc": "<p>return boolean. True if the 'ESValue' is not a NullValue</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">nullvalue</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "observation.esvalue_base.ESValue.isEqual", "modulename": "observation.esvalue_base", "qualname": "ESValue.isEqual", "type": "function", "doc": "<p>Compare two <code>ESValue</code></p>\n\n<p><em>Parameters</em></p>\n\n<ul>\n<li><strong>other</strong> : ESValue</li>\n<li><strong>name</strong> : boolean (default True) - Include Name in comparison</li>\n<li><strong>value</strong> : boolean (default True) - Include Value in comparison</li>\n</ul>\n\n<p><em>Returns</em></p>\n\n<ul>\n<li><strong>boolean</strong> : Result of the comparison</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">other</span>, </span><span class=\"param\"><span class=\"n\">name</span><span class=\"o\">=</span><span class=\"kc\">True</span>, </span><span class=\"param\"><span class=\"n\">value</span><span class=\"o\">=</span><span class=\"kc\">True</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "observation.esvalue_base.ESValue.isName", "modulename": "observation.esvalue_base", "qualname": "ESValue.isName", "type": "function", "doc": "<p>check if a pattern (regex) is presenty in the ESValue name.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">pattern</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "observation.esvalue_base.ESValue.boundingBox", "modulename": "observation.esvalue_base", "qualname": "ESValue.boundingBox", "type": "function", "doc": "<p>return a <code>ESValue</code> object with bounds values</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">listValue</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "observation.esvalue_base.ESValue.bounds", "modulename": "observation.esvalue_base", "qualname": "ESValue.bounds", "type": "variable", "doc": "<p>list or tuple (@property)</p>\n\n<ul>\n<li>DatationValue : boundingBox (tmin, tmax)</li>\n<li>LocationValue : boundingBox (minx, miny, maxx, maxy)</li>\n<li>PropertyValue : boundingBox (list of type property)</li>\n<li>Other ESValue : ()</li>\n</ul>\n"}, {"fullname": "observation.esvalue_base.ESValue.boxUnion", "modulename": "observation.esvalue_base", "qualname": "ESValue.boxUnion", "type": "function", "doc": "<p>return a new <code>ESValue</code> with :</p>\n\n<ul>\n<li>name : parameters</li>\n<li>value : union between box(self) and box(other)</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">other</span>, </span><span class=\"param\"><span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s1\">&#39;&#39;</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "observation.esvalue_base.ESValue.getValue", "modulename": "observation.esvalue_base", "qualname": "ESValue.getValue", "type": "function", "doc": "<p>return self.value object</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "observation.esvalue_base.ESValue.getName", "modulename": "observation.esvalue_base", "qualname": "ESValue.getName", "type": "function", "doc": "<p>return self.name object</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "observation.esvalue_base.ESValue.json", "modulename": "observation.esvalue_base", "qualname": "ESValue.json", "type": "function", "doc": "<p>Export in json/cbor format (string or dict).</p>\n\n<p><em>Parameters</em></p>\n\n<ul>\n<li><strong>untyped</strong> : boolean (default False) - include dtype in the json if True</li>\n<li><strong>encoded</strong> : boolean (default True) - choice for return format (string/bytes if True, dict else)</li>\n<li><strong>encode_format</strong>    : string (default 'json')- choice for return format (json, cbor)</li>\n<li><strong>simpleval</strong> : boolean (default False) - if True, only value is included</li>\n</ul>\n\n<p><em>Returns</em> :  string or dict</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "observation.esvalue_base.ESValue.setName", "modulename": "observation.esvalue_base", "qualname": "ESValue.setName", "type": "function", "doc": "<p>Set the Name of the <code>ESValue</code></p>\n\n<p><em>Parameters</em></p>\n\n<ul>\n<li><strong>nam</strong> : string - value to set</li>\n</ul>\n\n<p><em>Returns</em> : None</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">nam</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "observation.esvalue_base.ESValue.setValue", "modulename": "observation.esvalue_base", "qualname": "ESValue.setValue", "type": "function", "doc": "<p>Set a new Value</p>\n\n<p><em>Parameters</em></p>\n\n<ul>\n<li><strong>val</strong> : compatible ESValue - New ESValue</li>\n</ul>\n\n<p><em>Returns</em> : None</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">val</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "observation.esvalue_base.ESValue.simple", "modulename": "observation.esvalue_base", "qualname": "ESValue.simple", "type": "variable", "doc": "<p>return vSimple object (@property)</p>\n"}, {"fullname": "observation.esvalue_base.ESValue.to_float", "modulename": "observation.esvalue_base", "qualname": "ESValue.to_float", "type": "function", "doc": "<p>return a converted float value or nan</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "observation.esvalue_base.ESValue.to_obj", "modulename": "observation.esvalue_base", "qualname": "ESValue.to_obj", "type": "function", "doc": "<p>Export in json/cbor format (string or dict).</p>\n\n<p><em>Parameters</em></p>\n\n<ul>\n<li><strong>untyped</strong> : boolean (default False) - include dtype in the json if True</li>\n<li><strong>encoded</strong> : boolean (default True) - choice for return format (string/bytes if True, dict else)</li>\n<li><strong>encode_format</strong> : string (default 'json')- choice for return format (json, cbor)</li>\n<li><strong>simpleval</strong> : boolean (default False)- if True only value</li>\n</ul>\n\n<p><em>Returns</em> :  string or dict</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "observation.esvalue_base.ESValue.vSimple", "modulename": "observation.esvalue_base", "qualname": "ESValue.vSimple", "type": "function", "doc": "<p>Return the vSimple of the <code>ESValue</code> (string or object)</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">string</span><span class=\"o\">=</span><span class=\"kc\">False</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "observation.esvalue_base.ESValue.ljson", "modulename": "observation.esvalue_base", "qualname": "ESValue.ljson", "type": "function", "doc": "<p>Export a list in json/cbor format (string or dict).</p>\n\n<p><em>Parameters</em></p>\n\n<ul>\n<li><strong>untyped</strong> : boolean (default False) - include dtype in the json if True</li>\n<li><strong>encoded</strong> : boolean (default True) - choice for return format (string/bytes if True, dict else)</li>\n<li><strong>encode_format</strong>    : string (default 'json')- choice for return format (json, cbor)</li>\n<li><strong>simpleval</strong> : boolean (default False) - if True, only value is included</li>\n</ul>\n\n<p><em>Returns</em> :  list of string or dict</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">listval</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "observation.esvalue_base.ESValue.valClassName", "modulename": "observation.esvalue_base", "qualname": "ESValue.valClassName", "type": "function", "doc": "<p>return the calculate ESValue Class of val (string)</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">val</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "observation.esvalue_base.ESValue.vName", "modulename": "observation.esvalue_base", "qualname": "ESValue.vName", "type": "function", "doc": "<p>Return the Name of the <code>ESValue</code></p>\n\n<p><em>Parameters</em></p>\n\n<ul>\n<li><strong>default</strong> : string (default nullName) - Return value if nullName</li>\n</ul>\n\n<p><em>Returns</em></p>\n\n<ul>\n<li><strong>str</strong> : Name of the ESValue</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">default</span><span class=\"o\">=</span><span class=\"s1\">&#39;&#39;</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "observation.esvalue_base.ESValue.uncastsimple", "modulename": "observation.esvalue_base", "qualname": "ESValue.uncastsimple", "type": "function", "doc": "<p>convert val in hashable val</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">val</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "observation.esvalue_base.ESValueError", "modulename": "observation.esvalue_base", "qualname": "ESValueError", "type": "class", "doc": "<p>ESValue Exception</p>\n", "bases": "builtins.Exception"}, {"fullname": "observation.iindex", "modulename": "observation.iindex", "type": "module", "doc": "<p>Created on Thu May 26 20:30:00 2022</p>\n\n<p>@author: philippe@loco-labs.io</p>\n\n<p>The <code>observation.iindex</code> module contains the <code>Iindex</code> class.</p>\n\n<p>Documentation is available in other pages :</p>\n\n<ul>\n<li>The Json Standard for Iindex is defined <a href=\"https://github.com/loco-philippe/\nEnvironmental-Sensing/tree/main/documentation/IlistJSON-Standard.pdf\">here</a></li>\n<li>The concept of 'indexed list' is described in\n<a href=\"https://github.com/loco-philippe/Environmental-Sensing/wiki/Indexed-list\">this page</a>.</li>\n<li>The non-regression tests are at <a href=\"https://github.com/loco-philippe/\nEnvironmental-Sensing/blob/main/python/Tests/test_iindex.py\">this page</a></li>\n<li>The <a href=\"https://github.com/loco-philippe/Environmental-Sensing/tree/main/\npython/Examples/Iindex\">examples</a> are :\n<ul>\n<li><a href=\"<a href=\"https://github.com/loco-philippe/Environmental-Sensing/blob/main/\">https://github.com/loco-philippe/Environmental-Sensing/blob/main/</a>\npython/Examples/Iindex/Iindex_creation.ipynb\">creation</a></li>\n<li><a href=\"<a href=\"https://github.com/loco-philippe/Environmental-Sensing/blob/main/\">https://github.com/loco-philippe/Environmental-Sensing/blob/main/</a>\npython/Examples/Iindex/Iindex_value.ipynb\">value</a></li>\n<li><a href=\"<a href=\"https://github.com/loco-philippe/Environmental-Sensing/blob/main/\">https://github.com/loco-philippe/Environmental-Sensing/blob/main/</a>\npython/Examples/Iindex/Iindex_update.ipynb\">update</a></li>\n<li><a href=\"<a href=\"https://github.com/loco-philippe/Environmental-Sensing/blob/main/\">https://github.com/loco-philippe/Environmental-Sensing/blob/main/</a>\npython/Examples/Iindex/Iindex_structure.ipynb\">structure</a></li>\n<li><a href=\"<a href=\"https://github.com/loco-philippe/Environmental-Sensing/\">https://github.com/loco-philippe/Environmental-Sensing/</a>\nblob/main/python/Examples/Iindex/Iindex_structure-analysis.ipynb\">structure-analysis</a></li>\n</ul></li>\n</ul>\n\n<hr />\n"}, {"fullname": "observation.iindex.Iindex", "modulename": "observation.iindex", "qualname": "Iindex", "type": "class", "doc": "<p>An <code>Iindex</code> is a representation of an index list .</p>\n\n<p><em>Attributes (for dynamic attributes see @property methods)</em> :</p>\n\n<ul>\n<li><strong>name</strong> : name of the Iindex</li>\n<li><strong>codec</strong> : list of values for each key</li>\n<li><strong>keys</strong> : list of code values</li>\n</ul>\n\n<p>The methods defined in this class are :</p>\n\n<p><em>constructor (@classmethod)</em></p>\n\n<ul>\n<li><code>Iindex.dic</code></li>\n<li><code>Iindex.ext</code></li>\n<li><code>Iindex.obj</code></li>\n<li><code>Iindex.from_parent</code></li>\n<li><code>Iindex.from_obj</code></li>\n<li><code>Iindex.merging</code></li>\n</ul>\n\n<p><em>dynamic value (getters @property)</em></p>\n\n<ul>\n<li><code>Iindex.values</code></li>\n<li><code>Iindex.val</code></li>\n<li><code>Iindex.cod</code></li>\n<li><code>Iindex.infos</code></li>\n</ul>\n\n<p><em>add - update methods (<code>observation.iindex_structure.IindexStructure</code>)</em></p>\n\n<ul>\n<li><code>Iindex.append</code></li>\n<li><code>Iindex.setcodecvalue</code></li>\n<li><code>Iindex.setcodeclist</code></li>\n<li><code>Iindex.setname</code></li>\n<li><code>Iindex.setkeys</code></li>\n<li><code>Iindex.setlistvalue</code></li>\n<li><code>Iindex.setvalue</code></li>\n</ul>\n\n<p><em>transform methods (<code>observation.iindex_structure.IindexStructure</code>)</em></p>\n\n<ul>\n<li><code>Iindex.coupling</code></li>\n<li><code>Iindex.extendkeys</code></li>\n<li><code>Iindex.full</code></li>\n<li><code>Iindex.reindex</code></li>\n<li><code>Iindex.reorder</code></li>\n<li><code>Iindex.sort</code></li>\n<li><code>Iindex.tocoupled</code></li>\n<li><code>Iindex.tostdcodec</code></li>\n</ul>\n\n<p><em>getters methods (<code>observation.iindex_structure.IindexStructure</code>)</em></p>\n\n<ul>\n<li><code>Iindex.couplinginfos</code></li>\n<li><code>Iindex.derkeys</code></li>\n<li><code>Iindex.getduplicates</code></li>\n<li><code>Iindex.iscrossed</code></li>\n<li><code>Iindex.iscoupled</code></li>\n<li><code>Iindex.isderived</code></li>\n<li><code>Iindex.islinked</code></li>\n<li><code>Iindex.isvalue</code></li>\n<li><code>Iindex.iskeysfromderkeys</code></li>\n<li><code>Iindex.keysfromderkeys</code></li>\n<li><code>Iindex.keytoval</code></li>\n<li><code>Iindex.loc</code></li>\n<li><code>Iindex.recordfromkeys</code></li>\n<li><code>Iindex.recordfromvalue</code></li>\n<li><code>Iindex.valtokey</code></li>\n</ul>\n\n<p><em>export methods (<code>observation.iindex_interface.IindexInterface</code>)</em></p>\n\n<ul>\n<li><code>Iindex.json</code></li>\n<li><code>Iindex.to_obj</code></li>\n<li><code>Iindex.to_numpy</code></li>\n<li><code>Iindex.vlist</code></li>\n<li><code>Iindex.vName</code></li>\n<li><code>Iindex.vSimple</code></li>\n</ul>\n", "bases": "iindex_structure.IindexStructure, iindex_interface.IindexInterface"}, {"fullname": "observation.iindex.Iindex.__init__", "modulename": "observation.iindex", "qualname": "Iindex.__init__", "type": "function", "doc": "<p>Iindex constructor.</p>\n\n<p><em>Parameters</em></p>\n\n<ul>\n<li><strong>codec</strong> :  list (default None) - external different values of index (see data model)</li>\n<li><strong>keys</strong> :  list (default None)  - key value of index (see data model)</li>\n<li><strong>name</strong> : string (default None) - name of index (see data model)</li>\n<li><strong>typevalue</strong> : string (default ES.def_clsName) - typevalue to apply to codec</li>\n<li><strong>lendefault</strong> : integer (default 0) - default len if no keys is defined</li>\n<li><strong>reindex</strong> : boolean (default True) - if True, default codec is apply</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">codec</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">name</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">keys</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">typevalue</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">lendefault</span><span class=\"o\">=</span><span class=\"mi\">0</span>,</span><span class=\"param\">\t<span class=\"n\">reindex</span><span class=\"o\">=</span><span class=\"kc\">False</span></span>)</span>"}, {"fullname": "observation.iindex.Iindex.dic", "modulename": "observation.iindex", "qualname": "Iindex.dic", "type": "function", "doc": "<p>Iindex constructor (external dictionnary).</p>\n\n<p><em>Parameters</em></p>\n\n<ul>\n<li><strong>dicvalues</strong> : {name : values}  (see data model)</li>\n<li><strong>fullcodec</strong> : boolean (default False) - full codec if True</li>\n<li><strong>typevalue</strong> : string (default ES.def_clsName) - typevalue to apply to codec</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">cls</span>, </span><span class=\"param\"><span class=\"n\">dicvalues</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">typevalue</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">fullcodec</span><span class=\"o\">=</span><span class=\"kc\">False</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "observation.iindex.Iindex.ext", "modulename": "observation.iindex", "qualname": "Iindex.ext", "type": "function", "doc": "<p>Iindex constructor (external list).</p>\n\n<p><em>Parameters</em></p>\n\n<ul>\n<li><strong>values</strong> :  list (default None) - external values of index (see data model)</li>\n<li><strong>name</strong> : string (default None) - name of index (see data model)</li>\n<li><strong>typevalue</strong> : string (default ES.def_clsName) - typevalue to apply to codec</li>\n<li><strong>fullcodec</strong> : boolean (default False) - full codec if True</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">cls</span>, </span><span class=\"param\"><span class=\"n\">values</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">name</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">typevalue</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">fullcodec</span><span class=\"o\">=</span><span class=\"kc\">False</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "observation.iindex.Iindex.from_parent", "modulename": "observation.iindex", "qualname": "Iindex.from_parent", "type": "function", "doc": "<p>Generate an Iindex Object from specific codec and parent keys.</p>\n\n<p><em>Parameters</em></p>\n\n<ul>\n<li><strong>codec</strong> : list of objects</li>\n<li><strong>name</strong> : string (default None) - name of index (see data model)</li>\n<li><strong>parent</strong> : Iindex, parent of the new Iindex</li>\n<li><strong>typevalue</strong> : string (default ES.def_clsName) - typevalue to apply to codec</li>\n<li><strong>reindex</strong> : boolean (default True) - if True, default codec is apply</li>\n</ul>\n\n<p><em>Returns</em> : Iindex</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">cls</span>, </span><span class=\"param\"><span class=\"n\">codec</span>, </span><span class=\"param\"><span class=\"n\">parent</span>, </span><span class=\"param\"><span class=\"n\">name</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">typevalue</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">reindex</span><span class=\"o\">=</span><span class=\"kc\">False</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "observation.iindex.Iindex.from_obj", "modulename": "observation.iindex", "qualname": "Iindex.from_obj", "type": "function", "doc": "<p>Generate an Iindex Object from a bytes, json or dict value and from\na keys list (derived Iindex)</p>\n\n<p><em>Parameters</em></p>\n\n<ul>\n<li><strong>bs</strong> : bytes, string or dict data to convert</li>\n<li><strong>typevalue</strong> : string (default ES.def_clsName) - typevalue to apply to codec</li>\n<li><strong>extkeys</strong> : list (default None) of int, string or dict data to convert in keys</li>\n<li><strong>context</strong> : boolean (default True) - if False, only codec and keys are included</li>\n<li><strong>reindex</strong> : boolean (default False) - if True, default codec is apply</li>\n</ul>\n\n<p><em>Returns</em> : tuple(code, Iindex)</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">cls</span>, </span><span class=\"param\"><span class=\"n\">bsd</span>, </span><span class=\"param\"><span class=\"n\">extkeys</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">typevalue</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">context</span><span class=\"o\">=</span><span class=\"kc\">True</span>, </span><span class=\"param\"><span class=\"n\">reindex</span><span class=\"o\">=</span><span class=\"kc\">False</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "observation.iindex.Iindex.from_dict_obj", "modulename": "observation.iindex", "qualname": "Iindex.from_dict_obj", "type": "function", "doc": "<p>Generate an Iindex Object from a dict value</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">cls</span>, </span><span class=\"param\"><span class=\"n\">bsd</span>, </span><span class=\"param\"><span class=\"n\">typevalue</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">reindex</span><span class=\"o\">=</span><span class=\"kc\">False</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "observation.iindex.Iindex.merging", "modulename": "observation.iindex", "qualname": "Iindex.merging", "type": "function", "doc": "<p>Create a new Iindex with values are tuples of listidx Iindex values</p>\n\n<p><em>Parameters</em></p>\n\n<ul>\n<li><strong>listidx</strong> : list of Iindex to be merged.</li>\n<li><strong>name</strong> : string (default : None) - Name of the new Iindex</li>\n</ul>\n\n<p><em>Returns</em> : new Iindex</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">cls</span>, </span><span class=\"param\"><span class=\"n\">listidx</span>, </span><span class=\"param\"><span class=\"n\">name</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "observation.iindex.Iindex.obj", "modulename": "observation.iindex", "qualname": "Iindex.obj", "type": "function", "doc": "<p>Generate an Iindex Object from a bytes, json or dict value and from\na keys list (derived Iindex)</p>\n\n<p><em>Parameters</em></p>\n\n<ul>\n<li><strong>bsd</strong> : bytes, string or dict data to convert</li>\n<li><strong>typevalue</strong> : string (default ES.def_clsName) - typevalue to apply to codec</li>\n<li><strong>extkeys</strong> : list (default None) of int, string or dict data to convert in keys</li>\n<li><strong>context</strong> : boolean (default True) - if False, only codec and keys are included</li>\n<li><strong>reindex</strong> : boolean (default True) - if True, default codec is apply</li>\n</ul>\n\n<p><em>Returns</em> : tuple(code, Iindex)</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">cls</span>, </span><span class=\"param\"><span class=\"n\">bsd</span>, </span><span class=\"param\"><span class=\"n\">extkeys</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">typevalue</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">context</span><span class=\"o\">=</span><span class=\"kc\">True</span>, </span><span class=\"param\"><span class=\"n\">reindex</span><span class=\"o\">=</span><span class=\"kc\">False</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "observation.iindex.Iindex.add", "modulename": "observation.iindex", "qualname": "Iindex.add", "type": "function", "doc": "<p>Add other's values to self's values</p>\n\n<p><em>Parameters</em></p>\n\n<ul>\n<li><strong>other</strong> : Iindex object to add to self object</li>\n<li><strong>solve</strong> : Boolean (default True) - If True, replace None other's codec value\nwith self codec value.</li>\n</ul>\n\n<p><em>Returns</em> : self</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">other</span>, </span><span class=\"param\"><span class=\"n\">solve</span><span class=\"o\">=</span><span class=\"kc\">True</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "observation.iindex.Iindex.cod", "modulename": "observation.iindex", "qualname": "Iindex.cod", "type": "variable", "doc": "<p>return codec conversion to string</p>\n"}, {"fullname": "observation.iindex.Iindex.codec", "modulename": "observation.iindex", "qualname": "Iindex.codec", "type": "variable", "doc": "<p>return codec</p>\n"}, {"fullname": "observation.iindex.Iindex.infos", "modulename": "observation.iindex", "qualname": "Iindex.infos", "type": "variable", "doc": "<p>return dict with lencodec, typecodec, rate, disttomin, disttomax</p>\n"}, {"fullname": "observation.iindex.Iindex.keys", "modulename": "observation.iindex", "qualname": "Iindex.keys", "type": "variable", "doc": "<p>return keys</p>\n"}, {"fullname": "observation.iindex.Iindex.typevalue", "modulename": "observation.iindex", "qualname": "Iindex.typevalue", "type": "variable", "doc": "<p>return typevalue calculated from name</p>\n"}, {"fullname": "observation.iindex.Iindex.values", "modulename": "observation.iindex", "qualname": "Iindex.values", "type": "variable", "doc": "<p>return values (see data model)</p>\n"}, {"fullname": "observation.iindex.Iindex.val", "modulename": "observation.iindex", "qualname": "Iindex.val", "type": "variable", "doc": "<p>return values conversion to string</p>\n"}, {"fullname": "observation.iindex_interface", "modulename": "observation.iindex_interface", "type": "module", "doc": "<p>Created on Sun Oct  2 22:24:59 2022</p>\n\n<p>@author: philippe@loco-labs.io</p>\n\n<p>The <code>observation.iindex_interface</code> module contains the <code>IindexInterface</code> class\n(<code>observation.iindex.Iindex</code> methods).</p>\n"}, {"fullname": "observation.iindex_interface.CborDecoder", "modulename": "observation.iindex_interface", "qualname": "CborDecoder", "type": "class", "doc": "<p>Cbor extension for integer keys (codification keys)</p>\n", "bases": "json.decoder.JSONDecoder"}, {"fullname": "observation.iindex_interface.CborDecoder.__init__", "modulename": "observation.iindex_interface", "qualname": "CborDecoder.__init__", "type": "function", "doc": "<p><code>object_hook</code>, if specified, will be called with the result\nof every JSON object decoded and its return value will be used in\nplace of the given <code>dict</code>.  This can be used to provide custom\ndeserializations (e.g. to support JSON-RPC class hinting).</p>\n\n<p><code>object_pairs_hook</code>, if specified will be called with the result of\nevery JSON object decoded with an ordered list of pairs.  The return\nvalue of <code>object_pairs_hook</code> will be used instead of the <code>dict</code>.\nThis feature can be used to implement custom decoders.\nIf <code>object_hook</code> is also defined, the <code>object_pairs_hook</code> takes\npriority.</p>\n\n<p><code>parse_float</code>, if specified, will be called with the string\nof every JSON float to be decoded. By default this is equivalent to\nfloat(num_str). This can be used to use another datatype or parser\nfor JSON floats (e.g. decimal.Decimal).</p>\n\n<p><code>parse_int</code>, if specified, will be called with the string\nof every JSON int to be decoded. By default this is equivalent to\nint(num_str). This can be used to use another datatype or parser\nfor JSON integers (e.g. float).</p>\n\n<p><code>parse_constant</code>, if specified, will be called with one of the\nfollowing strings: -Infinity, Infinity, NaN.\nThis can be used to raise an exception if invalid JSON numbers\nare encountered.</p>\n\n<p>If <code>strict</code> is false (true is the default), then control\ncharacters will be allowed inside strings.  Control characters in\nthis context are those with character codes in the 0-31 range,\nincluding <code>'\\t'</code> (tab), <code>'\\n'</code>, <code>'\\r'</code> and <code>'\\0'</code>.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">()</span>"}, {"fullname": "observation.iindex_interface.CborDecoder.codecbor", "modulename": "observation.iindex_interface", "qualname": "CborDecoder.codecbor", "type": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">dic</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "observation.iindex_interface.IindexError", "modulename": "observation.iindex_interface", "qualname": "IindexError", "type": "class", "doc": "<p>Iindex Exception</p>\n", "bases": "builtins.Exception"}, {"fullname": "observation.iindex_interface.IindexEncoder", "modulename": "observation.iindex_interface", "qualname": "IindexEncoder", "type": "class", "doc": "<p>new json encoder for Iindex and Ilist</p>\n", "bases": "json.encoder.JSONEncoder"}, {"fullname": "observation.iindex_interface.IindexEncoder.default", "modulename": "observation.iindex_interface", "qualname": "IindexEncoder.default", "type": "function", "doc": "<p>Implement this method in a subclass such that it returns\na serializable object for <code>o</code>, or calls the base implementation\n(to raise a <code>TypeError</code>).</p>\n\n<p>For example, to support arbitrary iterators, you could\nimplement default like this::</p>\n\n<pre><code>def default(self, o):\n    try:\n        iterable = iter(o)\n    except TypeError:\n        pass\n    else:\n        return list(iterable)\n    # Let the base class default method raise the TypeError\n    return JSONEncoder.default(self, o)\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">o</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "observation.iindex_interface.IindexInterface", "modulename": "observation.iindex_interface", "qualname": "IindexInterface", "type": "class", "doc": "<p>this class includes Iindex methods</p>\n"}, {"fullname": "observation.iindex_interface.IindexInterface.__init__", "modulename": "observation.iindex_interface", "qualname": "IindexInterface.__init__", "type": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">()</span>"}, {"fullname": "observation.iindex_interface.IindexInterface.decodeobj", "modulename": "observation.iindex_interface", "qualname": "IindexInterface.decodeobj", "type": "function", "doc": "<p>Generate an Iindex data from a bytes, json or dict value</p>\n\n<p><em>Parameters</em></p>\n\n<ul>\n<li><strong>bs</strong> : bytes, string or dict data to convert</li>\n<li><strong>classname</strong> : string(default None) - classname to convert codec data</li>\n<li><strong>context</strong> : boolean (default True) - if False, only codec and keys are included</li>\n</ul>\n\n<p><em>Returns</em> : tuple - name, typevaluedec, codec, parent, keys</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">bs</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">classname</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">context</span><span class=\"o\">=</span><span class=\"kc\">True</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "observation.iindex_interface.IindexInterface.decodecodec", "modulename": "observation.iindex_interface", "qualname": "IindexInterface.decodecodec", "type": "function", "doc": "<p>Generate a codec list from a json value</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">codecobj</span>, </span><span class=\"param\"><span class=\"n\">classname</span><span class=\"o\">=</span><span class=\"s1\">&#39;NamedValue&#39;</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "observation.iindex_interface.IindexInterface.decodecontext", "modulename": "observation.iindex_interface", "qualname": "IindexInterface.decodecontext", "type": "function", "doc": "<p>Generate a tuple (name, dtype) from a json value</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">context</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "observation.iindex_interface.IindexInterface.decodekeys", "modulename": "observation.iindex_interface", "qualname": "IindexInterface.decodekeys", "type": "function", "doc": "<p>Generate a tuple (parent, keys) from a json value</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">keys</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "observation.iindex_interface.IindexInterface.encodeobj", "modulename": "observation.iindex_interface", "qualname": "IindexInterface.encodeobj", "type": "function", "doc": "<p>Return a formatted object with values, keys and codec.</p>\n\n<ul>\n<li>Format can be json, bson or cbor</li>\n<li>object can be string, bytes or dict</li>\n</ul>\n\n<p><em>Parameters</em></p>\n\n<ul>\n<li><strong>modecodec</strong> : string (default 'optimize') - json mode</li>\n<li><strong>codeclist</strong> : list of codec ESValue to encode</li>\n<li><strong>keyslist</strong> : list (default = None) - int keys to encode, None if no keys</li>\n<li><strong>name</strong> : string (default = None) - name to encode, None if no name</li>\n<li><strong>typevalue</strong> : string (default None) - type to convert values</li>\n<li><strong>parent</strong> : int (default ES.nullparent) - Ilist index linked to</li>\n<li><strong>listunic</strong> : boolean (default False) - if False, when len(result)=1 return value not list</li>\n<li><strong>codecval</strong> : boolean (default False) - if True, only list of codec values is included</li>\n<li><strong>simpleval</strong> : boolean (default False) - if True, only value (without name) is included</li>\n</ul>\n\n<p><em>Parameters (kwargs)</em></p>\n\n<ul>\n<li><strong>encoded</strong> : boolean (default False) - choice for return format (string/bytes if True, dict else)</li>\n<li><strong>encode_format</strong>  : string (default 'json')- choice for return format (json, cbor)</li>\n<li><strong>codif</strong> : dict (default ES.codeb). Numerical value for string in CBOR encoder</li>\n<li><strong>untyped</strong> : boolean (default False) - include dtype in the json if True</li>\n<li><strong>geojson</strong> : boolean (default False) - geojson for LocationValue if True</li>\n</ul>\n\n<p><em>Returns</em> : string, bytes or dict</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">codeclist</span>,</span><span class=\"param\">\t<span class=\"n\">keyslist</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">name</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">simpleval</span><span class=\"o\">=</span><span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">codecval</span><span class=\"o\">=</span><span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">typevalue</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">parent</span><span class=\"o\">=-</span><span class=\"mi\">2</span>,</span><span class=\"param\">\t<span class=\"n\">listunic</span><span class=\"o\">=</span><span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">modecodec</span><span class=\"o\">=</span><span class=\"s1\">&#39;optimize&#39;</span>,</span><span class=\"param\">\t<span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "observation.iindex_interface.IindexInterface.iskeysobj", "modulename": "observation.iindex_interface", "qualname": "IindexInterface.iskeysobj", "type": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">obj</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "observation.iindex_interface.IindexInterface.json", "modulename": "observation.iindex_interface", "qualname": "IindexInterface.json", "type": "function", "doc": "<p>Return a formatted object (string, bytes or dict) for the Iindex</p>\n\n<p><em>Parameters</em></p>\n\n<ul>\n<li><strong>keys</strong> : list (default None) - list: List of keys to include - None:\nno list - else: Iindex keys</li>\n<li><strong>typevalue</strong> : string (default None) - type to convert values</li>\n<li><strong>modecodec</strong> : string (default 'optimize') - json mode</li>\n<li><strong>simpleval</strong> : boolean (default False) - if True, only codec is included</li>\n<li><strong>parent</strong> : integer (default None) - index number of the parent in indexset</li>\n</ul>\n\n<p><em>Parameters (kwargs)</em></p>\n\n<ul>\n<li><strong>encoded</strong> : boolean (default False) - choice for return format\n(string/bytes if True, dict else)</li>\n<li><strong>encode_format</strong>  : string (default 'json')- choice for return format (json, cbor)</li>\n<li><strong>codif</strong> : dict (default ES.codeb). Numerical value for string in CBOR encoder</li>\n<li><strong>untyped</strong> : boolean (default True) - include dtype in the json if True</li>\n</ul>\n\n<p><em>Returns</em> : string, bytes or dict</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">keys</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">typevalue</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">modecodec</span><span class=\"o\">=</span><span class=\"s1\">&#39;optimize&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">simpleval</span><span class=\"o\">=</span><span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">codecval</span><span class=\"o\">=</span><span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">parent</span><span class=\"o\">=-</span><span class=\"mi\">2</span>,</span><span class=\"param\">\t<span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "observation.iindex_interface.IindexInterface.to_numpy", "modulename": "observation.iindex_interface", "qualname": "IindexInterface.to_numpy", "type": "function", "doc": "<p>Transform Iindex in a Numpy array.</p>\n\n<p><em>Parameters</em></p>\n\n<ul>\n<li><strong>func</strong> : function (default None) - function to apply for each value of the Iindex.\nIf func is the 'index' string, values are replaced by raw values.</li>\n<li><strong>npdtype</strong> : string (default None) - numpy dtype for the Array ('object' if None)</li>\n<li><strong>kwargs</strong> : parameters to apply to the func function</li>\n</ul>\n\n<p><em>Returns</em> : Numpy Array</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">func</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">codec</span><span class=\"o\">=</span><span class=\"kc\">False</span>, </span><span class=\"param\"><span class=\"n\">npdtype</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "observation.iindex_interface.IindexInterface.to_obj", "modulename": "observation.iindex_interface", "qualname": "IindexInterface.to_obj", "type": "function", "doc": "<p>Return a formatted object (string, bytes or dict) for the Iindex</p>\n\n<p><em>Parameters</em></p>\n\n<ul>\n<li><strong>modecodec</strong> : string (default 'optimize') - json mode</li>\n<li><strong>keys</strong> : list (default None) - list: List of keys to include - None or False:\nno list - else: Iindex keys</li>\n<li><strong>typevalue</strong> : string (default None) - type to convert values</li>\n<li><strong>name</strong> : boolean (default True) - if False, name is not included</li>\n<li><strong>codecval</strong> : boolean (default False) - if True, only list of codec values is included</li>\n<li><strong>simpleval</strong> : boolean (default False) - if True, only value (without name) is included</li>\n<li><strong>listunic</strong> : boolean (default False) - if False, when len(result)=1\nreturn value not list</li>\n<li><strong>parent</strong> : integer (default None) - index number of the parent in indexset</li>\n</ul>\n\n<p><em>Parameters (kwargs)</em></p>\n\n<ul>\n<li><strong>encoded</strong> : boolean (default False) - choice for return format\n(string/bytes if True, dict else)</li>\n<li><strong>encode_format</strong>  : string (default 'json')- choice for return format (json, cbor)</li>\n<li><strong>codif</strong> : dict (default ES.codeb). Numerical value for string in CBOR encoder</li>\n<li><strong>untyped</strong> : boolean (default False) - include dtype if True</li>\n<li><strong>geojson</strong> : boolean (default False) - geojson for LocationValue if True</li>\n</ul>\n\n<p><em>Returns</em> : string, bytes or dict</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">keys</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">typevalue</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">simpleval</span><span class=\"o\">=</span><span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">modecodec</span><span class=\"o\">=</span><span class=\"s1\">&#39;optimize&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">codecval</span><span class=\"o\">=</span><span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">parent</span><span class=\"o\">=-</span><span class=\"mi\">2</span>,</span><span class=\"param\">\t<span class=\"n\">name</span><span class=\"o\">=</span><span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">listunic</span><span class=\"o\">=</span><span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "observation.iindex_interface.IindexInterface.to_dict_obj", "modulename": "observation.iindex_interface", "qualname": "IindexInterface.to_dict_obj", "type": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">typevalue</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">simpleval</span><span class=\"o\">=</span><span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">modecodec</span><span class=\"o\">=</span><span class=\"s1\">&#39;optimize&#39;</span>,</span><span class=\"param\">\t<span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "observation.iindex_interface.IindexInterface.vlist", "modulename": "observation.iindex_interface", "qualname": "IindexInterface.vlist", "type": "function", "doc": "<p>Apply a function to values and return the result.</p>\n\n<p><em>Parameters</em></p>\n\n<ul>\n<li><strong>func</strong> : function - function to apply to values</li>\n<li><strong>args, kwargs</strong> : parameters for the function</li>\n<li><strong>extern</strong> : if True, the function is apply to external values, else internal</li>\n</ul>\n\n<p><em>Returns</em> : list of func result</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">func</span>, </span><span class=\"param\"><span class=\"o\">*</span><span class=\"n\">args</span>, </span><span class=\"param\"><span class=\"n\">extern</span><span class=\"o\">=</span><span class=\"kc\">True</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "observation.iindex_interface.IindexInterface.vName", "modulename": "observation.iindex_interface", "qualname": "IindexInterface.vName", "type": "function", "doc": "<p>Return the list of name for ESValue data .</p>\n\n<p><em>Parameters</em></p>\n\n<ul>\n<li><strong>default</strong> : value return if no name is available</li>\n<li><strong>maxlen</strong> : integer (default None) - max length of name</li>\n</ul>\n\n<p><em>Returns</em> : list of name founded</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">default</span><span class=\"o\">=</span><span class=\"s1\">&#39;&#39;</span>, </span><span class=\"param\"><span class=\"n\">maxlen</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "observation.iindex_interface.IindexInterface.vSimple", "modulename": "observation.iindex_interface", "qualname": "IindexInterface.vSimple", "type": "function", "doc": "<p>Apply a vSimple function to values and return the result.</p>\n\n<p><em>Parameters</em></p>\n\n<ul>\n<li><strong>string</strong> : boolean(default False) - if True the values returned are string</li>\n</ul>\n\n<p><em>Returns</em> : list of vSimple values (string or not)</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">string</span><span class=\"o\">=</span><span class=\"kc\">False</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "observation.iindex_structure", "modulename": "observation.iindex_structure", "type": "module", "doc": "<p>Created on Sun Oct  2 22:24:59 2022</p>\n\n<p>@author: philippe@loco-labs.io</p>\n\n<p>The <code>observation.iindex_structure</code> module contains the <code>IindexStructure</code> class\n(<code>observation.iindex.Iindex</code> methods).</p>\n"}, {"fullname": "observation.iindex_structure.IindexStructure", "modulename": "observation.iindex_structure", "qualname": "IindexStructure", "type": "class", "doc": "<p>this class includes Iindex methods</p>\n"}, {"fullname": "observation.iindex_structure.IindexStructure.__init__", "modulename": "observation.iindex_structure", "qualname": "IindexStructure.__init__", "type": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">()</span>"}, {"fullname": "observation.iindex_structure.IindexStructure.append", "modulename": "observation.iindex_structure", "qualname": "IindexStructure.append", "type": "function", "doc": "<p>add a new value</p>\n\n<p><em>Parameters</em></p>\n\n<ul>\n<li><strong>value</strong> : new object value</li>\n<li><strong>typevalue</strong> : string (default ES.def_clsName) - typevalue to apply to value</li>\n<li><strong>unique</strong> :  boolean (default True) - If False, duplication codec if value is present</li>\n</ul>\n\n<p><em>Returns</em> : key of value</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">value</span>, </span><span class=\"param\"><span class=\"n\">typevalue</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">unique</span><span class=\"o\">=</span><span class=\"kc\">True</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "observation.iindex_structure.IindexStructure.coupling", "modulename": "observation.iindex_structure", "qualname": "IindexStructure.coupling", "type": "function", "doc": "<p>Transform indexes in coupled or derived indexes (codec extension).\nIf derived option is True, self._codec is extended and idx codec not,\nelse, both are coupled and both codec are extended.</p>\n\n<p><em>Parameters</em></p>\n\n<ul>\n<li><strong>idx</strong> : single Iindex or list of Iindex to be coupled or derived.</li>\n<li><strong>derived</strong> : boolean (default : True)</li>\n</ul>\n\n<p><em>Returns</em> : tuple with duplicate records (errors)</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">idx</span>, </span><span class=\"param\"><span class=\"n\">derived</span><span class=\"o\">=</span><span class=\"kc\">True</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "observation.iindex_structure.IindexStructure.couplinginfos", "modulename": "observation.iindex_structure", "qualname": "IindexStructure.couplinginfos", "type": "function", "doc": "<p>return a dict with the coupling info between other (lencoupling, rate,\ndisttomin, disttomax, distmin, distmax, diff, typecoupl)</p>\n\n<p><em>Parameters</em></p>\n\n<ul>\n<li><strong>other</strong> : other index to compare</li>\n<li><strong>default</strong> : comparison with default codec</li>\n</ul>\n\n<p><em>Returns</em> : dict</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">other</span>, </span><span class=\"param\"><span class=\"n\">default</span><span class=\"o\">=</span><span class=\"kc\">False</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "observation.iindex_structure.IindexStructure.derkeys", "modulename": "observation.iindex_structure", "qualname": "IindexStructure.derkeys", "type": "function", "doc": "<p>return keys derived from parent keys</p>\n\n<p><em>Parameters</em></p>\n\n<ul>\n<li><strong>parent</strong> : Iindex - parent</li>\n</ul>\n\n<p><em>Returns</em> : list of keys</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">parent</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "observation.iindex_structure.IindexStructure.extendkeys", "modulename": "observation.iindex_structure", "qualname": "IindexStructure.extendkeys", "type": "function", "doc": "<p>add keys to the Iindex</p>\n\n<p><em>Parameters</em></p>\n\n<ul>\n<li><strong>keys</strong> : list of int (value lower or equal than actual keys)</li>\n</ul>\n\n<p><em>Returns</em> : None</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">keys</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "observation.iindex_structure.IindexStructure.full", "modulename": "observation.iindex_structure", "qualname": "IindexStructure.full", "type": "function", "doc": "<p>tranform a list of indexes in crossed indexes (value extension).</p>\n\n<p><em>Parameters</em></p>\n\n<ul>\n<li><strong>listidx</strong> : list of Iindex to transform</li>\n</ul>\n\n<p><em>Returns</em> : tuple of records added</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">listidx</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "observation.iindex_structure.IindexStructure.getduplicates", "modulename": "observation.iindex_structure", "qualname": "IindexStructure.getduplicates", "type": "function", "doc": "<p>return tuple of items with duplicate codec</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "observation.iindex_structure.IindexStructure.iscrossed", "modulename": "observation.iindex_structure", "qualname": "IindexStructure.iscrossed", "type": "function", "doc": "<p>return True if self is crossed to other</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">other</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "observation.iindex_structure.IindexStructure.iscoupled", "modulename": "observation.iindex_structure", "qualname": "IindexStructure.iscoupled", "type": "function", "doc": "<p>return True if self is coupled to other</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">other</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "observation.iindex_structure.IindexStructure.isderived", "modulename": "observation.iindex_structure", "qualname": "IindexStructure.isderived", "type": "function", "doc": "<p>return True if self is derived from other</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">other</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "observation.iindex_structure.IindexStructure.iskeysfromderkeys", "modulename": "observation.iindex_structure", "qualname": "IindexStructure.iskeysfromderkeys", "type": "function", "doc": "<p>return True if self._keys is relative from other._keys</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">other</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "observation.iindex_structure.IindexStructure.islinked", "modulename": "observation.iindex_structure", "qualname": "IindexStructure.islinked", "type": "function", "doc": "<p>return True if self is linked to other</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">other</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "observation.iindex_structure.IindexStructure.isvalue", "modulename": "observation.iindex_structure", "qualname": "IindexStructure.isvalue", "type": "function", "doc": "<p>return True if value is in index values</p>\n\n<p><em>Parameters</em></p>\n\n<ul>\n<li><strong>value</strong> : value to check</li>\n<li><strong>extern</strong> : if True, compare value to external representation of self.value,\nelse, internal</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">value</span>, </span><span class=\"param\"><span class=\"n\">extern</span><span class=\"o\">=</span><span class=\"kc\">True</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "observation.iindex_structure.IindexStructure.keytoval", "modulename": "observation.iindex_structure", "qualname": "IindexStructure.keytoval", "type": "function", "doc": "<p>return the value of a key</p>\n\n<p><em>Parameters</em></p>\n\n<ul>\n<li><strong>key</strong> : key to convert into values</li>\n<li><strong>extern</strong> : if True, return string representation else, internal value</li>\n</ul>\n\n<p><em>Returns</em></p>\n\n<ul>\n<li><strong>int</strong> : first key finded (None else)</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">key</span>, </span><span class=\"param\"><span class=\"n\">extern</span><span class=\"o\">=</span><span class=\"kc\">True</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "observation.iindex_structure.IindexStructure.keysfromderkeys", "modulename": "observation.iindex_structure", "qualname": "IindexStructure.keysfromderkeys", "type": "function", "doc": "<p>return keys from parent keys and derkeys</p>\n\n<p><em>Parameters</em></p>\n\n<ul>\n<li><strong>parentkeys</strong> : list of keys from parent</li>\n<li><strong>derkeys</strong> : list of derived keys</li>\n</ul>\n\n<p><em>Returns</em> : list of keys</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">parentkeys</span>, </span><span class=\"param\"><span class=\"n\">derkeys</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "observation.iindex_structure.IindexStructure.loc", "modulename": "observation.iindex_structure", "qualname": "IindexStructure.loc", "type": "function", "doc": "<p>return a list of record number with value</p>\n\n<p><em>Parameters</em></p>\n\n<ul>\n<li><strong>value</strong> : value to check</li>\n<li><strong>extern</strong> : if True, compare value to external representation of self.value,\nelse, internal</li>\n</ul>\n\n<p><em>Returns</em></p>\n\n<ul>\n<li><strong>list of int</strong> : list of record number finded (None else)</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">value</span>, </span><span class=\"param\"><span class=\"n\">extern</span><span class=\"o\">=</span><span class=\"kc\">True</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "observation.iindex_structure.IindexStructure.recordfromvalue", "modulename": "observation.iindex_structure", "qualname": "IindexStructure.recordfromvalue", "type": "function", "doc": "<p>return a list of record number with value</p>\n\n<p><em>Parameters</em></p>\n\n<ul>\n<li><strong>value</strong> : value to check</li>\n<li><strong>extern</strong> : if True, compare value to external representation of self.value,\nelse, internal</li>\n</ul>\n\n<p><em>Returns</em></p>\n\n<ul>\n<li><strong>list of int</strong> : list of record number finded (None else)</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">value</span>, </span><span class=\"param\"><span class=\"n\">extern</span><span class=\"o\">=</span><span class=\"kc\">True</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "observation.iindex_structure.IindexStructure.recordfromkeys", "modulename": "observation.iindex_structure", "qualname": "IindexStructure.recordfromkeys", "type": "function", "doc": "<p>return a list of record number with key in listkeys</p>\n\n<p><em>Parameters</em></p>\n\n<ul>\n<li><strong>listkeys</strong> : list of keys to check</li>\n</ul>\n\n<p><em>Returns</em></p>\n\n<ul>\n<li><strong>list of int</strong> : list of record number finded (None else)</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">listkeys</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "observation.iindex_structure.IindexStructure.reindex", "modulename": "observation.iindex_structure", "qualname": "IindexStructure.reindex", "type": "function", "doc": "<p>apply a reordered codec. If None, a new default codec is apply.</p>\n\n<p><em>Parameters</em></p>\n\n<ul>\n<li><strong>codec</strong> : list (default None) - reordered codec to apply.</li>\n</ul>\n\n<p><em>Returns</em> : self</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">codec</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "observation.iindex_structure.IindexStructure.reorder", "modulename": "observation.iindex_structure", "qualname": "IindexStructure.reorder", "type": "function", "doc": "<p>Change the Iindex order with a new order define by sort and reset the codec.</p>\n\n<p><em>Parameters</em></p>\n\n<ul>\n<li><strong>sort</strong> : int list (default None)- new record order to apply. If None, no change.</li>\n<li><strong>inplace</strong> : boolean (default True) - if True, new order is apply to self,\nif False a new Iindex is created.</li>\n</ul>\n\n<p><em>Returns</em></p>\n\n<ul>\n<li><strong>Iindex</strong> : self if inplace, new Iindex if not inplace</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">sort</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">inplace</span><span class=\"o\">=</span><span class=\"kc\">True</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "observation.iindex_structure.IindexStructure.setcodecvalue", "modulename": "observation.iindex_structure", "qualname": "IindexStructure.setcodecvalue", "type": "function", "doc": "<p>update all the oldvalue by newvalue</p>\n\n<p><em>Parameters</em></p>\n\n<ul>\n<li><strong>oldvalue</strong> : list of values to replace</li>\n<li><strong>newvalue</strong> : list of new value to apply</li>\n<li><strong>typevalue</strong> : str (default None) - cast to apply to the new value</li>\n<li><strong>extern</strong> : if True, the newvalue has external representation, else internal</li>\n<li><strong>nameonly</strong> : if True, only the name of ESValue is changed</li>\n<li><strong>valueonly</strong> : if True, only the value of ESValue is changed</li>\n</ul>\n\n<p><em>Returns</em> : int - last codec rank updated (-1 if None)</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">oldvalue</span>,</span><span class=\"param\">\t<span class=\"n\">newvalue</span>,</span><span class=\"param\">\t<span class=\"n\">extern</span><span class=\"o\">=</span><span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">typevalue</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">nameonly</span><span class=\"o\">=</span><span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">valueonly</span><span class=\"o\">=</span><span class=\"kc\">False</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "observation.iindex_structure.IindexStructure.setcodeclist", "modulename": "observation.iindex_structure", "qualname": "IindexStructure.setcodeclist", "type": "function", "doc": "<p>update codec with listcodec values</p>\n\n<p><em>Parameters</em></p>\n\n<ul>\n<li><strong>listcodec</strong> : list of new codec values to apply</li>\n<li><strong>typevalue</strong> : str (default None) - cast to apply to the new value</li>\n<li><strong>extern</strong> : if True, the newvalue has external representation, else internal</li>\n<li><strong>nameonly</strong> : if True, only the name of ESValue is changed</li>\n<li><strong>valueonly</strong> : if True, only the value of ESValue is changed</li>\n</ul>\n\n<p><em>Returns</em> : int - last codec rank updated (-1 if None)</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">listcodec</span>,</span><span class=\"param\">\t<span class=\"n\">extern</span><span class=\"o\">=</span><span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">typevalue</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">nameonly</span><span class=\"o\">=</span><span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">valueonly</span><span class=\"o\">=</span><span class=\"kc\">False</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "observation.iindex_structure.IindexStructure.set_keys", "modulename": "observation.iindex_structure", "qualname": "IindexStructure.set_keys", "type": "function", "doc": "<p>_keys setters</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">keys</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "observation.iindex_structure.IindexStructure.set_codec", "modulename": "observation.iindex_structure", "qualname": "IindexStructure.set_codec", "type": "function", "doc": "<p>_codec setters</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">codec</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "observation.iindex_structure.IindexStructure.setkeys", "modulename": "observation.iindex_structure", "qualname": "IindexStructure.setkeys", "type": "function", "doc": "<p>apply new keys (replace codec with extended codec from parent keys)</p>\n\n<p><em>Parameters</em></p>\n\n<ul>\n<li><strong>keys</strong> : list of keys to apply</li>\n<li><strong>inplace</strong> : if True, update self data, else create a new Iindex</li>\n</ul>\n\n<p><em>Returns</em> : self or new Iindex</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">keys</span>, </span><span class=\"param\"><span class=\"n\">inplace</span><span class=\"o\">=</span><span class=\"kc\">True</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "observation.iindex_structure.IindexStructure.setname", "modulename": "observation.iindex_structure", "qualname": "IindexStructure.setname", "type": "function", "doc": "<p>update the Iindex name</p>\n\n<p><em>Parameters</em></p>\n\n<ul>\n<li><strong>name</strong> : str to set into name</li>\n</ul>\n\n<p><em>Returns</em> : boolean - True if update</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">name</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "observation.iindex_structure.IindexStructure.setvalue", "modulename": "observation.iindex_structure", "qualname": "IindexStructure.setvalue", "type": "function", "doc": "<p>update a value at the rank ind (and update codec and keys)</p>\n\n<p><em>Parameters</em></p>\n\n<ul>\n<li><strong>ind</strong> : rank of the value</li>\n<li><strong>value</strong> : new value</li>\n<li><strong>extern</strong> : if True, the value has external representation, else internal</li>\n<li><strong>typevalue</strong> : str (default None) - cast to apply to the new value</li>\n<li><strong>nameonly</strong> : if True, only the name of ESValue is changed</li>\n<li><strong>valueonly</strong> : if True, only the value of ESValue is changed</li>\n</ul>\n\n<p><em>Returns</em> : None</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">ind</span>,</span><span class=\"param\">\t<span class=\"n\">value</span>,</span><span class=\"param\">\t<span class=\"n\">extern</span><span class=\"o\">=</span><span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">typevalue</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">nameonly</span><span class=\"o\">=</span><span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">valueonly</span><span class=\"o\">=</span><span class=\"kc\">False</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "observation.iindex_structure.IindexStructure.setlistvalue", "modulename": "observation.iindex_structure", "qualname": "IindexStructure.setlistvalue", "type": "function", "doc": "<p>update the values (and update codec and keys)</p>\n\n<p><em>Parameters</em></p>\n\n<ul>\n<li><strong>listvalue</strong> : list - list of new values</li>\n<li><strong>typevalue</strong> : str (default None) - class to apply to the new value</li>\n<li><strong>extern</strong> : if True, the value has external representation, else internal</li>\n<li><strong>nameonly</strong> : if True, only the name of ESValue is changed</li>\n<li><strong>valueonly</strong> : if True, only the value of ESValue is changed</li>\n</ul>\n\n<p><em>Returns</em> : None</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">listvalue</span>,</span><span class=\"param\">\t<span class=\"n\">extern</span><span class=\"o\">=</span><span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">typevalue</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">nameonly</span><span class=\"o\">=</span><span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">valueonly</span><span class=\"o\">=</span><span class=\"kc\">False</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "observation.iindex_structure.IindexStructure.sort", "modulename": "observation.iindex_structure", "qualname": "IindexStructure.sort", "type": "function", "doc": "<p>Define sorted index with ordered codec.</p>\n\n<p><em>Parameters</em></p>\n\n<ul>\n<li><strong>reverse</strong> : boolean (defaut False) - codec is sorted with reverse order</li>\n<li><strong>inplace</strong> : boolean (default True) - if True, new order is apply to self,\nif False a new Iindex is created.</li>\n<li><strong>func</strong>    : function (default str) - key used in the sorted function</li>\n</ul>\n\n<p><em>Return</em></p>\n\n<ul>\n<li><strong>Iindex</strong> : self if inplace, new Iindex if not inplace</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">reverse</span><span class=\"o\">=</span><span class=\"kc\">False</span>, </span><span class=\"param\"><span class=\"n\">inplace</span><span class=\"o\">=</span><span class=\"kc\">True</span>, </span><span class=\"param\">func=&lt;class &#x27;str&#x27;&gt;</span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "observation.iindex_structure.IindexStructure.tocoupled", "modulename": "observation.iindex_structure", "qualname": "IindexStructure.tocoupled", "type": "function", "doc": "<p>Transform a derived index in a coupled index (keys extension) and add\nnew values to have the same length as other.</p>\n\n<p><em>Parameters</em></p>\n\n<ul>\n<li><strong>other</strong> : index to be coupled.</li>\n<li><strong>coupling</strong> : boolean (default True) - reindex if False</li>\n</ul>\n\n<p><em>Returns</em> : None</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">other</span>, </span><span class=\"param\"><span class=\"n\">coupling</span><span class=\"o\">=</span><span class=\"kc\">True</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "observation.iindex_structure.IindexStructure.tostdcodec", "modulename": "observation.iindex_structure", "qualname": "IindexStructure.tostdcodec", "type": "function", "doc": "<p>Transform codec in full or in default codec.</p>\n\n<p><em>Parameters</em></p>\n\n<ul>\n<li><strong>inplace</strong> : boolean (default True) - if True, new order is apply to self,</li>\n<li><strong>full</strong> : boolean (default True) - if True reindex with full codec</li>\n</ul>\n\n<p><em>Return</em></p>\n\n<ul>\n<li><strong>Iindex</strong> : self if inplace, new Iindex if not inplace</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">inplace</span><span class=\"o\">=</span><span class=\"kc\">False</span>, </span><span class=\"param\"><span class=\"n\">full</span><span class=\"o\">=</span><span class=\"kc\">True</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "observation.iindex_structure.IindexStructure.valrow", "modulename": "observation.iindex_structure", "qualname": "IindexStructure.valrow", "type": "function", "doc": "<p>return val for a record</p>\n\n<p><em>Parameters</em></p>\n\n<ul>\n<li><strong>row</strong> : record to obtain val</li>\n</ul>\n\n<p><em>Returns</em> : val[row]</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">row</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "observation.iindex_structure.IindexStructure.valtokey", "modulename": "observation.iindex_structure", "qualname": "IindexStructure.valtokey", "type": "function", "doc": "<p>convert a value to a key</p>\n\n<p><em>Parameters</em></p>\n\n<ul>\n<li><strong>value</strong> : value to convert</li>\n<li><strong>extern</strong> : if True, the value has external representation, else internal</li>\n</ul>\n\n<p><em>Returns</em></p>\n\n<ul>\n<li><strong>int</strong> : first key finded (None else)</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">value</span>, </span><span class=\"param\"><span class=\"n\">extern</span><span class=\"o\">=</span><span class=\"kc\">True</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "observation.ilist", "modulename": "observation.ilist", "type": "module", "doc": "<p>Created on Thu May 26 20:30:00 2022</p>\n\n<p>@author: philippe@loco-labs.io</p>\n\n<p>The <code>observation.ilist</code> module contains the <code>Ilist</code> class.</p>\n\n<p>Documentation is available in other pages :</p>\n\n<ul>\n<li>The Json Standard for Ilist is define\n<a href=\"https://github.com/loco-philippe/Environmental-Sensing/tree/main/\ndocumentation/IlistJSON-Standard.pdf\">here</a></li>\n<li>The concept of 'indexed list' is describe in\n<a href=\"https://github.com/loco-philippe/Environmental-Sensing/wiki/Indexed-list\">this page</a>.</li>\n<li>The non-regression test are at\n<a href=\"https://github.com/loco-philippe/Environmental-Sensing/blob/main/python/\nTests/test_ilist.py\">this page</a></li>\n<li>The <a href=\"https://github.com/loco-philippe/Environmental-Sensing/tree/main/\npython/Examples/Ilist\">examples</a>\nare :\n<ul>\n<li><a href=\"<a href=\"https://github.com/loco-philippe/Environmental-Sensing/blob/main/\">https://github.com/loco-philippe/Environmental-Sensing/blob/main/</a>\npython/Examples/Ilist/Ilist_creation.ipynb\">creation</a></li>\n<li><a href=\"<a href=\"https://github.com/loco-philippe/Environmental-Sensing/blob/main/\">https://github.com/loco-philippe/Environmental-Sensing/blob/main/</a>\npython/Examples/Ilist/Ilist_variable.ipynb\">variable</a></li>\n<li><a href=\"<a href=\"https://github.com/loco-philippe/Environmental-Sensing/blob/main/\">https://github.com/loco-philippe/Environmental-Sensing/blob/main/</a>\npython/Examples/Ilist/Ilist_update.ipynb\">update</a></li>\n<li><a href=\"<a href=\"https://github.com/loco-philippe/Environmental-Sensing/blob/main/\">https://github.com/loco-philippe/Environmental-Sensing/blob/main/</a>\npython/Examples/Ilist/Ilist_structure.ipynb\">structure</a></li>\n<li><a href=\"<a href=\"https://github.com/loco-philippe/Environmental-Sensing/\">https://github.com/loco-philippe/Environmental-Sensing/</a>\nblob/main/python/Examples/Ilist/Ilist_structure-analysis.ipynb\">structure-analysis</a></li>\n</ul></li>\n</ul>\n\n<hr />\n"}, {"fullname": "observation.ilist.Ilist", "modulename": "observation.ilist", "qualname": "Ilist", "type": "class", "doc": "<p>An <code>Ilist</code> is a representation of an indexed list.</p>\n\n<p><em>Attributes (for @property see methods)</em> :</p>\n\n<ul>\n<li><strong>lindex</strong> : list of Iindex</li>\n<li><strong>lvarname</strong> : variable name (list of string)</li>\n</ul>\n\n<p>The methods defined in this class are :</p>\n\n<p><em>constructor (@classmethod))</em></p>\n\n<ul>\n<li><code>Ilist.dic</code></li>\n<li><code>Ilist.ext</code></li>\n<li><code>Ilist.obj</code></li>\n<li><code>Ilist.from_csv</code></li>\n<li><code>Ilist.from_obj</code></li>\n<li><code>Ilist.from_file</code></li>\n</ul>\n\n<p><em>dynamic value (getters @property)</em></p>\n\n<ul>\n<li><code>Ilist.extidx</code></li>\n<li><code>Ilist.extidxext</code></li>\n<li><code>Ilist.idxname</code></li>\n<li><code>Ilist.idxref</code></li>\n<li><code>Ilist.idxlen</code></li>\n<li><code>Ilist.iidx</code></li>\n<li><code>Ilist.keys</code></li>\n<li><code>Ilist.lenindex</code></li>\n<li><code>Ilist.lenidx</code></li>\n<li><code>Ilist.lidx</code></li>\n<li><code>Ilist.lidxrow</code></li>\n<li><code>Ilist.lvar</code></li>\n<li><code>Ilist.lvarrow</code></li>\n<li><code>Ilist.lname</code></li>\n<li><code>Ilist.lunicname</code></li>\n<li><code>Ilist.lunicrow</code></li>\n<li><code>Ilist.setidx</code></li>\n<li><code>Ilist.tiidx</code></li>\n<li><code>Ilist.textidx</code></li>\n<li><code>Ilist.textidxext</code></li>\n</ul>\n\n<p><em>global value (getters @property)</em></p>\n\n<ul>\n<li><code>Ilist.complete</code></li>\n<li><code>Ilist.consistent</code></li>\n<li><code>Ilist.dimension</code></li>\n<li><code>Ilist.lencomplete</code></li>\n<li><code>Ilist.primary</code></li>\n<li><code>Ilist.zip</code></li>\n</ul>\n\n<p><em>selecting - infos methods (<code>observation.ilist_structure.IlistStructure</code>)</em></p>\n\n<ul>\n<li><code>Ilist.couplingmatrix</code></li>\n<li><code>Ilist.idxrecord</code></li>\n<li><code>Ilist.indexinfos</code></li>\n<li><code>Ilist.indicator</code></li>\n<li><code>Ilist.iscanonorder</code></li>\n<li><code>Ilist.isinrecord</code></li>\n<li><code>Ilist.keytoval</code></li>\n<li><code>Ilist.loc</code></li>\n<li><code>Ilist.nindex</code></li>\n<li><code>Ilist.record</code></li>\n<li><code>Ilist.recidx</code></li>\n<li><code>Ilist.recvar</code></li>\n<li><code>Ilist.valtokey</code></li>\n</ul>\n\n<p><em>add - update methods (<code>observation.ilist_structure.IlistStructure</code>)</em></p>\n\n<ul>\n<li><code>Ilist.add</code></li>\n<li><code>Ilist.addindex</code></li>\n<li><code>Ilist.append</code></li>\n<li><code>Ilist.delindex</code></li>\n<li><code>Ilist.delrecord</code></li>\n<li><code>Ilist.orindex</code></li>\n<li><code>Ilist.renameindex</code></li>\n<li><code>Ilist.setvar</code></li>\n<li><code>Ilist.setname</code></li>\n<li><code>Ilist.updateindex</code></li>\n</ul>\n\n<p><em>structure management - methods (<code>observation.ilist_structure.IlistStructure</code>)</em></p>\n\n<ul>\n<li><code>Ilist.applyfilter</code></li>\n<li><code>Ilist.coupling</code></li>\n<li><code>Ilist.full</code></li>\n<li><code>Ilist.getduplicates</code></li>\n<li><code>Ilist.mix</code></li>\n<li><code>Ilist.merge</code></li>\n<li><code>Ilist.reindex</code></li>\n<li><code>Ilist.reorder</code></li>\n<li><code>Ilist.setfilter</code></li>\n<li><code>Ilist.sort</code></li>\n<li><code>Ilist.swapindex</code></li>\n<li><code>Ilist.setcanonorder</code></li>\n<li><code>Ilist.tostdcodec</code></li>\n</ul>\n\n<p><em>exports methods (<code>observation.ilist_interface.IlistInterface</code>)</em></p>\n\n<ul>\n<li><code>Ilist.json</code></li>\n<li><code>Ilist.plot</code></li>\n<li><code>Ilist.to_obj</code></li>\n<li><code>Ilist.to_csv</code></li>\n<li><code>Ilist.to_file</code></li>\n<li><code>Ilist.to_xarray</code></li>\n<li><code>Ilist.to_dataframe</code></li>\n<li><code>Ilist.view</code></li>\n<li><code>Ilist.vlist</code></li>\n<li><code>Ilist.voxel</code></li>\n</ul>\n", "bases": "ilist_structure.IlistStructure, ilist_interface.IlistInterface"}, {"fullname": "observation.ilist.Ilist.__init__", "modulename": "observation.ilist", "qualname": "Ilist.__init__", "type": "function", "doc": "<p>Ilist constructor.</p>\n\n<p><em>Parameters</em></p>\n\n<ul>\n<li><strong>listidx</strong> :  list (default None) - list of compatible Iindex data</li>\n<li><strong>name</strong> :  list (default None) - list of name for the Iindex data</li>\n<li><strong>var</strong> :  int (default None) - row of the variable</li>\n<li><strong>length</strong> :  int (default None)  - len of each Iindex</li>\n<li><strong>reindex</strong> : boolean (default True) - if True, default codec for each Iindex</li>\n<li><strong>typevalue</strong> : str (default ES.def_clsName) - default value class (None or NamedValue)</li>\n<li><strong>context</strong> : boolean (default True) - if False, only codec and keys are included</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">listidx</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">name</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">length</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">var</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">reindex</span><span class=\"o\">=</span><span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">typevalue</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">context</span><span class=\"o\">=</span><span class=\"kc\">True</span></span>)</span>"}, {"fullname": "observation.ilist.Ilist.dic", "modulename": "observation.ilist", "qualname": "Ilist.dic", "type": "function", "doc": "<p>Ilist constructor (external dictionnary).</p>\n\n<p><em>Parameters</em></p>\n\n<ul>\n<li><strong>idxdic</strong> : {name : values}  (see data model)</li>\n<li><strong>typevalue</strong> : str (default ES.def_clsName) - default value class (None or NamedValue)</li>\n<li><strong>var</strong> :  int (default None) - row of the variable</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">cls</span>, </span><span class=\"param\"><span class=\"n\">idxdic</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">typevalue</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">var</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">reindex</span><span class=\"o\">=</span><span class=\"kc\">True</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "observation.ilist.Ilist.ext", "modulename": "observation.ilist", "qualname": "Ilist.ext", "type": "function", "doc": "<p>Ilist constructor (external index).</p>\n\n<p><em>Parameters</em></p>\n\n<ul>\n<li><strong>idxval</strong> : list of Iindex or list of values (see data model)</li>\n<li><strong>idxname</strong> : list of string (default None) - list of Iindex name (see data model)</li>\n<li><strong>typevalue</strong> : str (default ES.def_clsName) - default value class (None or NamedValue)</li>\n<li><strong>var</strong> :  int (default None) - row of the variable</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">cls</span>,</span><span class=\"param\">\t<span class=\"n\">idxval</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">idxname</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">typevalue</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">var</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">reindex</span><span class=\"o\">=</span><span class=\"kc\">True</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "observation.ilist.Ilist.from_csv", "modulename": "observation.ilist", "qualname": "Ilist.from_csv", "type": "function", "doc": "<p>Ilist constructor (from a csv file). Each column represents index values.</p>\n\n<p><em>Parameters</em></p>\n\n<ul>\n<li><strong>filename</strong> : string (default 'ilist.csv'), name of the file to read</li>\n<li><strong>var</strong> : integer (default None). column row for variable data</li>\n<li><strong>header</strong> : boolean (default True). If True, the first raw is dedicated to names</li>\n<li><strong>nrow</strong> : integer (default None). Number of row. If None, all the row else nrow</li>\n<li><strong>dtype</strong> : list of string (default None) - data type for each column (default str)</li>\n<li><strong>optcsv</strong> : dict (default : quoting) - see csv.reader options</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">cls</span>,</span><span class=\"param\">\t<span class=\"n\">filename</span><span class=\"o\">=</span><span class=\"s1\">&#39;ilist.csv&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">var</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">header</span><span class=\"o\">=</span><span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">nrow</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">optcsv</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"s1\">&#39;quoting&#39;</span><span class=\"p\">:</span> <span class=\"mi\">2</span><span class=\"p\">}</span>,</span><span class=\"param\">\t<span class=\"n\">dtype</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "observation.ilist.Ilist.from_file", "modulename": "observation.ilist", "qualname": "Ilist.from_file", "type": "function", "doc": "<p>Generate Object from file storage.</p>\n\n<p><em>Parameters</em></p>\n\n<ul>\n<li><strong>filename</strong> : string - file name (with path)</li>\n<li><strong>forcestring</strong> : boolean (default False) - if True,\nforces the UTF-8 data format, else the format is calculated</li>\n</ul>\n\n<p><em>Returns</em> : new Object</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">cls</span>, </span><span class=\"param\"><span class=\"n\">filename</span>, </span><span class=\"param\"><span class=\"n\">forcestring</span><span class=\"o\">=</span><span class=\"kc\">False</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "observation.ilist.Ilist.obj", "modulename": "observation.ilist", "qualname": "Ilist.obj", "type": "function", "doc": "<p>Generate a new Object from a bytes, string or list value</p>\n\n<p><em>Parameters</em></p>\n\n<ul>\n<li><strong>bsd</strong> : bytes, string or list data to convert</li>\n<li><strong>reindex</strong> : boolean (default True) - if True, default codec for each Iindex</li>\n<li><strong>context</strong> : boolean (default True) - if False, only codec and keys are included</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">cls</span>, </span><span class=\"param\"><span class=\"n\">bsd</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">reindex</span><span class=\"o\">=</span><span class=\"kc\">True</span>, </span><span class=\"param\"><span class=\"n\">context</span><span class=\"o\">=</span><span class=\"kc\">True</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "observation.ilist.Ilist.from_obj", "modulename": "observation.ilist", "qualname": "Ilist.from_obj", "type": "function", "doc": "<p>Generate an Ilist Object from a bytes, string or list value</p>\n\n<p><em>Parameters</em></p>\n\n<ul>\n<li><strong>bsd</strong> : bytes, string or list data to convert</li>\n<li><strong>reindex</strong> : boolean (default True) - if True, default codec for each Iindex</li>\n<li><strong>context</strong> : boolean (default True) - if False, only codec and keys are included</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">cls</span>, </span><span class=\"param\"><span class=\"n\">bsd</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">reindex</span><span class=\"o\">=</span><span class=\"kc\">True</span>, </span><span class=\"param\"><span class=\"n\">context</span><span class=\"o\">=</span><span class=\"kc\">True</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "observation.ilist.Ilist.complete", "modulename": "observation.ilist", "qualname": "Ilist.complete", "type": "variable", "doc": "<p>return a boolean (True if Ilist is complete and consistent)</p>\n"}, {"fullname": "observation.ilist.Ilist.consistent", "modulename": "observation.ilist", "qualname": "Ilist.consistent", "type": "variable", "doc": "<p>True if all the record are different</p>\n"}, {"fullname": "observation.ilist.Ilist.dimension", "modulename": "observation.ilist", "qualname": "Ilist.dimension", "type": "variable", "doc": "<p>integer : number of primary Iindex</p>\n"}, {"fullname": "observation.ilist.Ilist.extidx", "modulename": "observation.ilist", "qualname": "Ilist.extidx", "type": "variable", "doc": "<p>idx values (see data model)</p>\n"}, {"fullname": "observation.ilist.Ilist.extidxext", "modulename": "observation.ilist", "qualname": "Ilist.extidxext", "type": "variable", "doc": "<p>idx val (see data model)</p>\n"}, {"fullname": "observation.ilist.Ilist.idxname", "modulename": "observation.ilist", "qualname": "Ilist.idxname", "type": "variable", "doc": "<p>list of idx name</p>\n"}, {"fullname": "observation.ilist.Ilist.idxref", "modulename": "observation.ilist", "qualname": "Ilist.idxref", "type": "variable", "doc": "<p>list of idx parent row (idx row if linked)</p>\n"}, {"fullname": "observation.ilist.Ilist.idxlen", "modulename": "observation.ilist", "qualname": "Ilist.idxlen", "type": "variable", "doc": "<p>list of idx codec length</p>\n"}, {"fullname": "observation.ilist.Ilist.indexlen", "modulename": "observation.ilist", "qualname": "Ilist.indexlen", "type": "variable", "doc": "<p>list of index codec length</p>\n"}, {"fullname": "observation.ilist.Ilist.iidx", "modulename": "observation.ilist", "qualname": "Ilist.iidx", "type": "variable", "doc": "<p>list of keys for each idx</p>\n"}, {"fullname": "observation.ilist.Ilist.keys", "modulename": "observation.ilist", "qualname": "Ilist.keys", "type": "variable", "doc": "<p>list of keys for each index</p>\n"}, {"fullname": "observation.ilist.Ilist.lencomplete", "modulename": "observation.ilist", "qualname": "Ilist.lencomplete", "type": "variable", "doc": "<p>number of values if complete (prod(idxlen primary))</p>\n"}, {"fullname": "observation.ilist.Ilist.lenindex", "modulename": "observation.ilist", "qualname": "Ilist.lenindex", "type": "variable", "doc": "<p>number of indexes</p>\n"}, {"fullname": "observation.ilist.Ilist.lenidx", "modulename": "observation.ilist", "qualname": "Ilist.lenidx", "type": "variable", "doc": "<p>number of idx</p>\n"}, {"fullname": "observation.ilist.Ilist.lidx", "modulename": "observation.ilist", "qualname": "Ilist.lidx", "type": "variable", "doc": "<p>list of idx</p>\n"}, {"fullname": "observation.ilist.Ilist.lvar", "modulename": "observation.ilist", "qualname": "Ilist.lvar", "type": "variable", "doc": "<p>list of var</p>\n"}, {"fullname": "observation.ilist.Ilist.lunicrow", "modulename": "observation.ilist", "qualname": "Ilist.lunicrow", "type": "variable", "doc": "<p>list of unic idx row</p>\n"}, {"fullname": "observation.ilist.Ilist.lvarrow", "modulename": "observation.ilist", "qualname": "Ilist.lvarrow", "type": "variable", "doc": "<p>list of var row</p>\n"}, {"fullname": "observation.ilist.Ilist.lidxrow", "modulename": "observation.ilist", "qualname": "Ilist.lidxrow", "type": "variable", "doc": "<p>list of idx row</p>\n"}, {"fullname": "observation.ilist.Ilist.lunicname", "modulename": "observation.ilist", "qualname": "Ilist.lunicname", "type": "variable", "doc": "<p>list of unique index name</p>\n"}, {"fullname": "observation.ilist.Ilist.lname", "modulename": "observation.ilist", "qualname": "Ilist.lname", "type": "variable", "doc": "<p>list of index name</p>\n"}, {"fullname": "observation.ilist.Ilist.primary", "modulename": "observation.ilist", "qualname": "Ilist.primary", "type": "variable", "doc": "<p>list of primary idx</p>\n"}, {"fullname": "observation.ilist.Ilist.setidx", "modulename": "observation.ilist", "qualname": "Ilist.setidx", "type": "variable", "doc": "<p>list of codec for each idx</p>\n"}, {"fullname": "observation.ilist.Ilist.tiidx", "modulename": "observation.ilist", "qualname": "Ilist.tiidx", "type": "variable", "doc": "<p>list of keys for each record</p>\n"}, {"fullname": "observation.ilist.Ilist.textidx", "modulename": "observation.ilist", "qualname": "Ilist.textidx", "type": "variable", "doc": "<p>list of values for each rec</p>\n"}, {"fullname": "observation.ilist.Ilist.textidxext", "modulename": "observation.ilist", "qualname": "Ilist.textidxext", "type": "variable", "doc": "<p>list of val for each rec</p>\n"}, {"fullname": "observation.ilist.Ilist.typevalue", "modulename": "observation.ilist", "qualname": "Ilist.typevalue", "type": "variable", "doc": "<p>return typevalue calculated from Iindex name</p>\n"}, {"fullname": "observation.ilist.Ilist.zip", "modulename": "observation.ilist", "qualname": "Ilist.zip", "type": "variable", "doc": "<p>return a zip format for textidx : tuple(tuple(rec))</p>\n"}, {"fullname": "observation.ilist_analysis", "modulename": "observation.ilist_analysis", "type": "module", "doc": "<p>Created on Sun Oct  2 22:24:59 2022</p>\n\n<p>@author: philippe@loco-labs.io</p>\n\n<p>The <code>observation.ilist_structure</code> module contains the <code>IlistStructure</code> class\n(<code>observation.ilist.Ilist</code> methods).</p>\n"}, {"fullname": "observation.ilist_analysis.Analysis", "modulename": "observation.ilist_analysis", "qualname": "Analysis", "type": "class", "doc": "<p>this class includes Ilist methods</p>\n"}, {"fullname": "observation.ilist_analysis.Analysis.__init__", "modulename": "observation.ilist_analysis", "qualname": "Analysis.__init__", "type": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">iobj</span></span>)</span>"}, {"fullname": "observation.ilist_analysis.Analysis.actualize", "modulename": "observation.ilist_analysis", "qualname": "Analysis.actualize", "type": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">forcing</span><span class=\"o\">=</span><span class=\"kc\">False</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "observation.ilist_analysis.Analysis.setinfos", "modulename": "observation.ilist_analysis", "qualname": "Analysis.setinfos", "type": "function", "doc": "<p>set and return attribute 'infos'. \nInfos is an array with infos of each index :\n    - num, name, cat, typecoupl, diff, parent, pname, pparent, linkrate</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "observation.ilist_analysis.Analysis.setmatrix", "modulename": "observation.ilist_analysis", "qualname": "Analysis.setmatrix", "type": "function", "doc": "<p>set and return matrix attributes (coupling infos between each idx)</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "observation.ilist_analysis.Analysis.getinfos", "modulename": "observation.ilist_analysis", "qualname": "Analysis.getinfos", "type": "function", "doc": "<p>return attribute infos</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">keys</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "observation.ilist_analysis.Analysis.getmatrix", "modulename": "observation.ilist_analysis", "qualname": "Analysis.getmatrix", "type": "function", "doc": "<p>return attribute matrix</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "observation.ilist_analysis.Analysis.getprimary", "modulename": "observation.ilist_analysis", "qualname": "Analysis.getprimary", "type": "function", "doc": "<p>return attribute primary</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "observation.ilist_interface", "modulename": "observation.ilist_interface", "type": "module", "doc": "<p>Created on Sun Oct  2 22:24:59 2022</p>\n\n<p>@author: philippe@loco-labs.io</p>\n\n<p>The <code>observation.ilist_interface</code> module contains the <code>IlistInterface</code> class\n(<code>observation.ilist.Ilist</code> methods).</p>\n"}, {"fullname": "observation.ilist_interface.IlistError", "modulename": "observation.ilist_interface", "qualname": "IlistError", "type": "class", "doc": "<p>Ilist Exception</p>\n", "bases": "builtins.Exception"}, {"fullname": "observation.ilist_interface.IlistInterface", "modulename": "observation.ilist_interface", "qualname": "IlistInterface", "type": "class", "doc": "<p>this class includes Iindex methods</p>\n"}, {"fullname": "observation.ilist_interface.IlistInterface.__init__", "modulename": "observation.ilist_interface", "qualname": "IlistInterface.__init__", "type": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">()</span>"}, {"fullname": "observation.ilist_interface.IlistInterface.json", "modulename": "observation.ilist_interface", "qualname": "IlistInterface.json", "type": "function", "doc": "<p>Return json dict, json string or Cbor binary.</p>\n\n<p><em>Parameters (kwargs)</em></p>\n\n<ul>\n<li><strong>encoded</strong> : boolean (default False) - choice for return format\n(string/bytes if True, dict else)</li>\n<li><strong>encode_format</strong>  : string (default 'json')- choice for return format (json, cbor)</li>\n<li><strong>codif</strong> : dict (default ES.codeb). Numerical value for string in CBOR encoder</li>\n<li><strong>modecodec</strong> : string (default 'optimize') - if 'full', each index is with a full codec\nif 'default' each index has keys, if 'optimize' keys are optimized, \nif 'dict' dict format is used, if 'nokeys' keys are absent</li>\n<li><strong>name</strong> : boolean (default False) - if False, default index name are not included</li>\n<li><strong>geojson</strong> : boolean (default False) - geojson for LocationValue if True</li>\n</ul>\n\n<p><em>Returns</em> : string or dict</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "observation.ilist_interface.IlistInterface.plot", "modulename": "observation.ilist_interface", "qualname": "IlistInterface.plot", "type": "function", "doc": "<p>This function visualize data with line or colormesh.</p>\n\n<p><em>Parameters</em></p>\n\n<ul>\n<li><strong>line</strong> : Boolean (default True) - Choice line or colormesh.</li>\n<li><strong>order</strong> : list (defaut None) - order of the axes (x, y, hue or col)</li>\n<li><strong>size</strong> : int (defaut 5) - plot size</li>\n<li><strong>marker</strong> : Char (default 'o') - Symbol for each point.</li>\n<li><strong>maxlen</strong> : Integer (default 20) - maximum length for string</li>\n</ul>\n\n<p><em>Returns</em></p>\n\n<ul>\n<li><strong>None</strong></li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">order</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">line</span><span class=\"o\">=</span><span class=\"kc\">True</span>, </span><span class=\"param\"><span class=\"n\">size</span><span class=\"o\">=</span><span class=\"mi\">5</span>, </span><span class=\"param\"><span class=\"n\">marker</span><span class=\"o\">=</span><span class=\"s1\">&#39;o&#39;</span>, </span><span class=\"param\"><span class=\"n\">maxlen</span><span class=\"o\">=</span><span class=\"mi\">20</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "observation.ilist_interface.IlistInterface.to_csv", "modulename": "observation.ilist_interface", "qualname": "IlistInterface.to_csv", "type": "function", "doc": "<p>Generate csv file to display data.</p>\n\n<p><em>Parameters</em></p>\n\n<ul>\n<li><strong>filename</strong> : string - file name (with path)</li>\n<li><strong>optcsv</strong> : parameter for csv.writer</li>\n</ul>\n\n<p><em>Parameters (kwargs)</em></p>\n\n<ul>\n<li><strong>name=listcode</strong> : element (default None) - eg location='ns'\n<ul>\n<li>listcode : string with Code for each index (j: json, n: name, s: simple).</li>\n<li>name : name of the index</li>\n</ul></li>\n<li><strong>lenres</strong> : Integer (default : 0) - Number of raws (all if 0)</li>\n<li><strong>header</strong> : Boolean (default : True) - If True, first line with names</li>\n<li><strong>optcsv</strong> : parameter for csv.writer</li>\n<li><strong>ifunc</strong> : function (default None) - function to apply to indexes</li>\n<li><strong>other kwargs</strong> : parameter for ifunc</li>\n</ul>\n\n<p><em>Returns</em> : size of csv file</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">filename</span>, </span><span class=\"param\"><span class=\"n\">optcsv</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"s1\">&#39;quoting&#39;</span><span class=\"p\">:</span> <span class=\"mi\">2</span><span class=\"p\">}</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "observation.ilist_interface.IlistInterface.to_dataframe", "modulename": "observation.ilist_interface", "qualname": "IlistInterface.to_dataframe", "type": "function", "doc": "<p>Complete the Object and generate a Pandas DataFrame with the dimension define by idx.</p>\n\n<p><em>Parameters</em></p>\n\n<ul>\n<li><strong>info</strong> : boolean (default False) - if True, add _dict attributes to attrs Xarray</li>\n<li><strong>idx</strong> : list (default none) - list of idx to be completed. If [],\nself.primary is used.</li>\n<li><strong>fillvalue</strong> : object (default '?') - value used for the new extval</li>\n<li><strong>fillextern</strong> : boolean(default True) - if True, fillvalue is converted to typevalue</li>\n<li><strong>lisfunc</strong> : function (default none) - list of function to apply to indexes before export</li>\n<li><strong>name</strong> : string (default None) - DataArray name. If None, variable name</li>\n<li><strong>numeric</strong> : Boolean (default False) - Generate a numeric DataArray.Values.</li>\n<li><strong>npdtype</strong> : string (default None) - numpy dtype for the DataArray ('object' if None)</li>\n<li><strong>kwargs</strong> : parameter for lisfunc</li>\n</ul>\n\n<p><em>Returns</em> : pandas.DataFrame</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">info</span><span class=\"o\">=</span><span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">idx</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">fillvalue</span><span class=\"o\">=</span><span class=\"s1\">&#39;?&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">fillextern</span><span class=\"o\">=</span><span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">lisfunc</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">name</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">numeric</span><span class=\"o\">=</span><span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">npdtype</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "observation.ilist_interface.IlistInterface.to_file", "modulename": "observation.ilist_interface", "qualname": "IlistInterface.to_file", "type": "function", "doc": "<p>Generate file to display data.</p>\n\n<p><em>Parameters (kwargs)</em></p>\n\n<ul>\n<li><strong>filename</strong> : string - file name (with path)</li>\n<li><strong>kwargs</strong> : see 'to_obj' parameters</li>\n</ul>\n\n<p><em>Returns</em> : Integer - file lenght (bytes)</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">filename</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "observation.ilist_interface.IlistInterface.to_obj", "modulename": "observation.ilist_interface", "qualname": "IlistInterface.to_obj", "type": "function", "doc": "<p>Return a formatted object (json string, cbor bytes or json dict).</p>\n\n<p><em>Parameters (kwargs)</em></p>\n\n<ul>\n<li><strong>encoded</strong> : boolean (default False) - choice for return format\n(string/bytes if True, dict else)</li>\n<li><strong>encode_format</strong>  : string (default 'json')- choice for return format (json, cbor)</li>\n<li><strong>codif</strong> : dict (default ES.codeb). Numerical value for string in CBOR encoder</li>\n<li><strong>modecodec</strong> : string (default 'optimize') - if 'full', each index is with a full codec\nif 'default' each index has keys, if 'optimize' keys are optimized, \nif 'dict' dict format is used, if 'nokeys' keys are absent</li>\n<li><strong>name</strong> : boolean (default False) - if False, default index name are not included</li>\n<li><strong>geojson</strong> : boolean (default False) - geojson for LocationValue if True</li>\n</ul>\n\n<p><em>Returns</em> : string, bytes or dict</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "observation.ilist_interface.IlistInterface.to_xarray", "modulename": "observation.ilist_interface", "qualname": "IlistInterface.to_xarray", "type": "function", "doc": "<p>Complete the Object and generate a Xarray DataArray with the dimension define by idx.</p>\n\n<p><em>Parameters</em></p>\n\n<ul>\n<li><strong>info</strong> : boolean (default False) - if True, add _dict attributes to attrs Xarray</li>\n<li><strong>idx</strong> : list (default none) - list of idx to be completed. If [],\nself.primary is used.</li>\n<li><strong>fillvalue</strong> : object (default '?') - value used for the new extval</li>\n<li><strong>fillextern</strong> : boolean(default True) - if True, fillvalue is converted to typevalue</li>\n<li><strong>lisfunc</strong> : function (default none) - list of function to apply to indexes before export</li>\n<li><strong>name</strong> : string (default None) - DataArray name. If None, variable name</li>\n<li><strong>numeric</strong> : Boolean (default False) - Generate a numeric DataArray.Values.</li>\n<li><strong>npdtype</strong> : string (default None) - numpy dtype for the DataArray ('object' if None)</li>\n<li><strong>attrs</strong> : dict (default None) - attributes for the DataArray</li>\n<li><strong>kwargs</strong> : parameter for lisfunc</li>\n</ul>\n\n<p><em>Returns</em> : DataArray</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">info</span><span class=\"o\">=</span><span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">idx</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">fillvalue</span><span class=\"o\">=</span><span class=\"s1\">&#39;?&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">fillextern</span><span class=\"o\">=</span><span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">lisfunc</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">name</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">numeric</span><span class=\"o\">=</span><span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">npdtype</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">attrs</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "observation.ilist_interface.IlistInterface.voxel", "modulename": "observation.ilist_interface", "qualname": "IlistInterface.voxel", "type": "function", "doc": "<p>Plot not null values in a cube with voxels and return indexes values.</p>\n\n<p><em>Returns</em> : <strong>dict of indexes values</strong></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "observation.ilist_interface.IlistInterface.view", "modulename": "observation.ilist_interface", "qualname": "IlistInterface.view", "type": "function", "doc": "<p>Generate tabular list to display data.</p>\n\n<p><em>Parameters (kwargs)</em></p>\n\n<ul>\n<li><strong>name=listcode</strong> : element (default None) - eg location='ns'\n<ul>\n<li>listcode : string with Code for each index (j: json, n: name, s: simple).</li>\n<li>name : name of the index</li>\n</ul></li>\n<li><strong>defcode</strong> : String (default : 'j') - default list code (if 'all' is True)</li>\n<li><strong>all</strong> : Boolean (default : True) - 'defcode apply to all indexes or none</li>\n<li><strong>lenres</strong> : Integer (default : 0) - Number of raws (all if 0)</li>\n<li><strong>header</strong> : Boolean (default : True) - First line with names</li>\n<li><strong>width</strong> : Integer (default None) - Number of characters displayed for each\nattribute (all if None)</li>\n<li><strong>ifunc</strong> : function (default None) - function to apply to indexes</li>\n<li><strong>tabulate params</strong> : default 'tablefmt': 'simple', 'numalign': 'left',\n'stralign': 'left', 'floatfmt': '.3f' - See tabulate module</li>\n<li><strong>other kwargs</strong> : parameter for ifunc</li>\n</ul>\n\n<p><em>Returns</em> : list or html table (tabulate format)</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "observation.ilist_interface.IlistInterface.vlist", "modulename": "observation.ilist_interface", "qualname": "IlistInterface.vlist", "type": "function", "doc": "<p>Apply a function to an index and return the result.</p>\n\n<p><em>Parameters</em></p>\n\n<ul>\n<li><strong>func</strong> : function (default none) - function to apply to extval or extidx</li>\n<li><strong>args, kwargs</strong> : parameters for the function</li>\n<li><strong>index</strong> : integer - index to update (index=-1 for variable)</li>\n</ul>\n\n<p><em>Returns</em> : list of func result</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"o\">*</span><span class=\"n\">args</span>, </span><span class=\"param\"><span class=\"n\">func</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">index</span><span class=\"o\">=-</span><span class=\"mi\">1</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "observation.ilist_structure", "modulename": "observation.ilist_structure", "type": "module", "doc": "<p>Created on Sun Oct  2 22:24:59 2022</p>\n\n<p>@author: philippe@loco-labs.io</p>\n\n<p>The <code>observation.ilist_structure</code> module contains the <code>IlistStructure</code> class\n(<code>observation.ilist.Ilist</code> methods).</p>\n"}, {"fullname": "observation.ilist_structure.IlistStructure", "modulename": "observation.ilist_structure", "qualname": "IlistStructure", "type": "class", "doc": "<p>this class includes Ilist methods</p>\n"}, {"fullname": "observation.ilist_structure.IlistStructure.__init__", "modulename": "observation.ilist_structure", "qualname": "IlistStructure.__init__", "type": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">()</span>"}, {"fullname": "observation.ilist_structure.IlistStructure.add", "modulename": "observation.ilist_structure", "qualname": "IlistStructure.add", "type": "function", "doc": "<p>Add other's values to self's values for each index</p>\n\n<p><em>Parameters</em></p>\n\n<ul>\n<li><strong>other</strong> : Ilist object to add to self object</li>\n<li><strong>name</strong> : Boolean (default False) - Add values with same index name (True) or\nsame index row (False)</li>\n</ul>\n\n<p><em>Returns</em> : self</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">other</span>, </span><span class=\"param\"><span class=\"n\">name</span><span class=\"o\">=</span><span class=\"kc\">False</span>, </span><span class=\"param\"><span class=\"n\">solve</span><span class=\"o\">=</span><span class=\"kc\">True</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "observation.ilist_structure.IlistStructure.addindex", "modulename": "observation.ilist_structure", "qualname": "IlistStructure.addindex", "type": "function", "doc": "<p>add a new index.</p>\n\n<p><em>Parameters</em></p>\n\n<ul>\n<li><strong>index</strong> : Iindex - index to add (can be index representation)</li>\n<li><strong>first</strong> : If True insert index at the first row, else at the end</li>\n<li><strong>merge</strong> : create a new index if merge is False</li>\n<li><strong>update</strong> : if True, update actual values if index name is present (and merge is True)</li>\n</ul>\n\n<p><em>Returns</em> : none</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">index</span>, </span><span class=\"param\"><span class=\"n\">first</span><span class=\"o\">=</span><span class=\"kc\">False</span>, </span><span class=\"param\"><span class=\"n\">merge</span><span class=\"o\">=</span><span class=\"kc\">False</span>, </span><span class=\"param\"><span class=\"n\">update</span><span class=\"o\">=</span><span class=\"kc\">False</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "observation.ilist_structure.IlistStructure.append", "modulename": "observation.ilist_structure", "qualname": "IlistStructure.append", "type": "function", "doc": "<p>add a new record.</p>\n\n<p><em>Parameters</em></p>\n\n<ul>\n<li><strong>record</strong> :  list of new index values to add to Ilist</li>\n<li><strong>unique</strong> :  boolean (default False) - Append isn't done if unique\nis True and record present</li>\n<li><strong>typevalue</strong> : list of string (default ES.def_clsName) - typevalue\nto convert record or string if typevalue is not define in indexes</li>\n</ul>\n\n<p><em>Returns</em> : list - key record</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">record</span>, </span><span class=\"param\"><span class=\"n\">unique</span><span class=\"o\">=</span><span class=\"kc\">False</span>, </span><span class=\"param\"><span class=\"n\">typevalue</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "observation.ilist_structure.IlistStructure.applyfilter", "modulename": "observation.ilist_structure", "qualname": "IlistStructure.applyfilter", "type": "function", "doc": "<p>delete records with defined filter value.\nFilter is deleted after record filtering.</p>\n\n<p><em>Parameters</em></p>\n\n<ul>\n<li><strong>reverse</strong> :  boolean (default False) - delete record with filter's value is reverse</li>\n<li><strong>filtname</strong> : string (default ES.filter) - Name of the filter Iindex added</li>\n<li><strong>delfilter</strong> :  boolean (default True) - If True, delete filter's Iindex</li>\n<li><strong>inplace</strong> : boolean (default True) - if True, filter is apply to self,</li>\n</ul>\n\n<p><em>Returns</em> : self or new Ilist</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">reverse</span><span class=\"o\">=</span><span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">filtname</span><span class=\"o\">=</span><span class=\"s1\">&#39;$filter&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">delfilter</span><span class=\"o\">=</span><span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">inplace</span><span class=\"o\">=</span><span class=\"kc\">True</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "observation.ilist_structure.IlistStructure.couplingmatrix", "modulename": "observation.ilist_structure", "qualname": "IlistStructure.couplingmatrix", "type": "function", "doc": "<p>return a matrix with coupling infos between each idx.\nOne info can be stored in a file (csv format).</p>\n\n<p><em>Parameters</em></p>\n\n<ul>\n<li><strong>default</strong> : comparison with default codec</li>\n<li><strong>filename</strong> : string (default None) - name of the file to write the matrix</li>\n<li><strong>att</strong> : string - name of the info to store in the file</li>\n</ul>\n\n<p><em>Returns</em> : array of array of dict</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">default</span><span class=\"o\">=</span><span class=\"kc\">False</span>, </span><span class=\"param\"><span class=\"n\">filename</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">att</span><span class=\"o\">=</span><span class=\"s1\">&#39;rate&#39;</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "observation.ilist_structure.IlistStructure.coupling", "modulename": "observation.ilist_structure", "qualname": "IlistStructure.coupling", "type": "function", "doc": "<p>Transform idx with low rate in coupled or derived indexes (codec extension).</p>\n\n<p><em>Parameters</em></p>\n\n<ul>\n<li><strong>rate</strong> : integer (default 0.1) - threshold to apply coupling.</li>\n<li><strong>derived</strong> : boolean (default : True).If True, indexes are derived, else coupled.</li>\n</ul>\n\n<p><em>Returns</em> : list - coupling infos for each idx</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">derived</span><span class=\"o\">=</span><span class=\"kc\">True</span>, </span><span class=\"param\"><span class=\"n\">rate</span><span class=\"o\">=</span><span class=\"mf\">0.1</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "observation.ilist_structure.IlistStructure.delrecord", "modulename": "observation.ilist_structure", "qualname": "IlistStructure.delrecord", "type": "function", "doc": "<p>remove a record.</p>\n\n<p><em>Parameters</em></p>\n\n<ul>\n<li><strong>record</strong> :  list - index values to remove to Ilist</li>\n<li><strong>extern</strong> : if True, compare record values to external representation of self.value,\nelse, internal</li>\n</ul>\n\n<p><em>Returns</em> : row deleted</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">record</span>, </span><span class=\"param\"><span class=\"n\">extern</span><span class=\"o\">=</span><span class=\"kc\">True</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "observation.ilist_structure.IlistStructure.delindex", "modulename": "observation.ilist_structure", "qualname": "IlistStructure.delindex", "type": "function", "doc": "<p>remove an index.</p>\n\n<p><em>Parameters</em></p>\n\n<ul>\n<li><strong>indexname</strong> : string - name of index to remove</li>\n</ul>\n\n<p><em>Returns</em> : none</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">indexname</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "observation.ilist_structure.IlistStructure.full", "modulename": "observation.ilist_structure", "qualname": "IlistStructure.full", "type": "function", "doc": "<p>tranform a list of indexes in crossed indexes (value extension).</p>\n\n<p><em>Parameters</em></p>\n\n<ul>\n<li><strong>indexname</strong> : list of string - name of indexes to transform</li>\n<li><strong>reindex</strong> : boolean (default False) - if True, set default codec before transformation</li>\n<li><strong>fillvalue</strong> : object value used for var extension</li>\n<li><strong>fillextern</strong> : boolean(default True) - if True, fillvalue is converted to typevalue</li>\n<li><strong>inplace</strong> : boolean (default True) - if True, filter is apply to self,</li>\n<li><strong>complete</strong> : boolean (default True) - if True, Iindex are ordered in canonical order</li>\n</ul>\n\n<p><em>Returns</em> : self or new Ilist</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">reindex</span><span class=\"o\">=</span><span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">indexname</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">fillvalue</span><span class=\"o\">=</span><span class=\"s1\">&#39;-&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">fillextern</span><span class=\"o\">=</span><span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">inplace</span><span class=\"o\">=</span><span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">complete</span><span class=\"o\">=</span><span class=\"kc\">True</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "observation.ilist_structure.IlistStructure.getduplicates", "modulename": "observation.ilist_structure", "qualname": "IlistStructure.getduplicates", "type": "function", "doc": "<p>check duplicate cod in a list of indexes. Result is add in a new index or returned.</p>\n\n<p><em>Parameters</em></p>\n\n<ul>\n<li><strong>indexname</strong> : list of string - name of indexes to check</li>\n<li><strong>resindex</strong> : string (default None) - Add a new index with check result</li>\n</ul>\n\n<p><em>Returns</em> : list of int - list of rows with duplicate cod</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">indexname</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">resindex</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "observation.ilist_structure.IlistStructure.iscanonorder", "modulename": "observation.ilist_structure", "qualname": "IlistStructure.iscanonorder", "type": "function", "doc": "<p>return True if primary indexes have canonical ordered keys</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "observation.ilist_structure.IlistStructure.isinrecord", "modulename": "observation.ilist_structure", "qualname": "IlistStructure.isinrecord", "type": "function", "doc": "<p>Check if record is present in self.</p>\n\n<p><em>Parameters</em></p>\n\n<ul>\n<li><strong>record</strong> : list - value for each Iindex</li>\n<li><strong>extern</strong> : if True, compare record values to external representation of self.value,\nelse, internal</li>\n</ul>\n\n<p><em>Returns boolean</em> : True if found</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">record</span>, </span><span class=\"param\"><span class=\"n\">extern</span><span class=\"o\">=</span><span class=\"kc\">True</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "observation.ilist_structure.IlistStructure.idxrecord", "modulename": "observation.ilist_structure", "qualname": "IlistStructure.idxrecord", "type": "function", "doc": "<p>return rec array (without variable) from complete record (with variable)</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">record</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "observation.ilist_structure.IlistStructure.indexinfos", "modulename": "observation.ilist_structure", "qualname": "IlistStructure.indexinfos", "type": "function", "doc": "<p>return an array with infos of each index :\n    - num, name, cat, typecoupl, diff, parent, pname, pparent, linkrate\n    - lencodec, min, max, typecodec, rate, disttomin, disttomax (base info)</p>\n\n<p><em>Parameters</em></p>\n\n<ul>\n<li><strong>keys</strong> : list (default none) - list of information to return (reduct dict), all if None</li>\n</ul>\n\n<p><em>Returns</em> : array</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">keys</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "observation.ilist_structure.IlistStructure.indicator", "modulename": "observation.ilist_structure", "qualname": "IlistStructure.indicator", "type": "function", "doc": "<p>generate size indicators: ol (object lightness), ul (unicity level), gain (sizegain)</p>\n\n<p><em>Parameters</em></p>\n\n<ul>\n<li><strong>fullsize</strong> : int (default none) - size with full codec</li>\n<li><strong>size</strong> : int (default none) - size with existing codec</li>\n<li><strong>indexinfos</strong> : list (default None) - indexinfos data</li>\n</ul>\n\n<p><em>Returns</em> : dict</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">fullsize</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">size</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "observation.ilist_structure.IlistStructure.keytoval", "modulename": "observation.ilist_structure", "qualname": "IlistStructure.keytoval", "type": "function", "doc": "<p>convert a keys list (key for each idx) to a values list (value for each idx).</p>\n\n<p><em>Parameters</em></p>\n\n<ul>\n<li><strong>listkey</strong> : key for each idx</li>\n<li><strong>extern</strong> : boolean (default True) - if True, compare rec to val else to values</li>\n</ul>\n\n<p><em>Returns</em></p>\n\n<ul>\n<li><strong>list</strong> : value for each index</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">listkey</span>, </span><span class=\"param\"><span class=\"n\">extern</span><span class=\"o\">=</span><span class=\"kc\">True</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "observation.ilist_structure.IlistStructure.loc", "modulename": "observation.ilist_structure", "qualname": "IlistStructure.loc", "type": "function", "doc": "<p>Return variable value or row corresponding to a list of idx values.</p>\n\n<p><em>Parameters</em></p>\n\n<ul>\n<li><strong>rec</strong> : list - value for each idx</li>\n<li><strong>extern</strong> : boolean (default True) - if True, compare rec to val,\nelse to values</li>\n<li><strong>row</strong> : Boolean (default False) - if True, return list of row,\nelse list of variable values</li>\n</ul>\n\n<p><em>Returns</em></p>\n\n<ul>\n<li><strong>object</strong> : variable value or None if not found</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">rec</span>, </span><span class=\"param\"><span class=\"n\">extern</span><span class=\"o\">=</span><span class=\"kc\">True</span>, </span><span class=\"param\"><span class=\"n\">row</span><span class=\"o\">=</span><span class=\"kc\">False</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "observation.ilist_structure.IlistStructure.merge", "modulename": "observation.ilist_structure", "qualname": "IlistStructure.merge", "type": "function", "doc": "<p>Merge method replaces Ilist objects included in variable data into its constituents.</p>\n\n<p><em>Parameters</em></p>\n\n<ul>\n<li><strong>name</strong> : str (default None) - name of the new Ilist object</li>\n<li><strong>fillvalue</strong> : object (default nan) - value used for the additional data</li>\n<li><strong>mergeidx</strong> : create a new index if mergeidx is False</li>\n<li><strong>updateidx</strong> : if True (and mergeidx is True), update actual values\nif index name is present</li>\n</ul>\n\n<p><em>Returns</em>: merged Ilist</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">name</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">fillvalue</span><span class=\"o\">=</span><span class=\"n\">nan</span>, </span><span class=\"param\"><span class=\"n\">mergeidx</span><span class=\"o\">=</span><span class=\"kc\">False</span>, </span><span class=\"param\"><span class=\"n\">updateidx</span><span class=\"o\">=</span><span class=\"kc\">False</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "observation.ilist_structure.IlistStructure.mix", "modulename": "observation.ilist_structure", "qualname": "IlistStructure.mix", "type": "function", "doc": "<p>add other Iindex not included in self and add other's values</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">other</span>, </span><span class=\"param\"><span class=\"n\">fillvalue</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "observation.ilist_structure.IlistStructure.merging", "modulename": "observation.ilist_structure", "qualname": "IlistStructure.merging", "type": "function", "doc": "<p>add a new Iindex build with Iindex define in listname.\nValues of the new Iindex are set of values in listname Iindex</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">listname</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "observation.ilist_structure.IlistStructure.nindex", "modulename": "observation.ilist_structure", "qualname": "IlistStructure.nindex", "type": "function", "doc": "<p>index with name equal to attribute name</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">name</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "observation.ilist_structure.IlistStructure.orindex", "modulename": "observation.ilist_structure", "qualname": "IlistStructure.orindex", "type": "function", "doc": "<p>Add other's index to self's index</p>\n\n<p><em>Parameters</em></p>\n\n<ul>\n<li><strong>other</strong> : self class - object to add</li>\n<li><strong>first</strong> : Boolean (default False) - If True insert indexes\nat the first row, else at the end</li>\n<li><strong>merge</strong> : Boolean (default False) - create a new index \nif merge is False</li>\n<li><strong>update</strong> : Boolean (default False) - if True, update actual \nvalues if index name is present (and merge is True)</li>\n</ul>\n\n<p><em>Returns</em> : none</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">other</span>, </span><span class=\"param\"><span class=\"n\">first</span><span class=\"o\">=</span><span class=\"kc\">False</span>, </span><span class=\"param\"><span class=\"n\">merge</span><span class=\"o\">=</span><span class=\"kc\">False</span>, </span><span class=\"param\"><span class=\"n\">update</span><span class=\"o\">=</span><span class=\"kc\">False</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "observation.ilist_structure.IlistStructure.record", "modulename": "observation.ilist_structure", "qualname": "IlistStructure.record", "type": "function", "doc": "<p>return the record at the row</p>\n\n<p><em>Parameters</em></p>\n\n<ul>\n<li><strong>row</strong> : int - row of the record</li>\n<li><strong>extern</strong> : boolean (default True) - if True, return val record else value record</li>\n</ul>\n\n<p><em>Returns</em></p>\n\n<ul>\n<li><strong>list</strong> : val record or value record</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">row</span>, </span><span class=\"param\"><span class=\"n\">extern</span><span class=\"o\">=</span><span class=\"kc\">True</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "observation.ilist_structure.IlistStructure.recidx", "modulename": "observation.ilist_structure", "qualname": "IlistStructure.recidx", "type": "function", "doc": "<p>return the list of idx val or values at the row</p>\n\n<p><em>Parameters</em></p>\n\n<ul>\n<li><strong>row</strong> : int - row of the record</li>\n<li><strong>extern</strong> : boolean (default True) - if True, return val rec else value rec</li>\n</ul>\n\n<p><em>Returns</em></p>\n\n<ul>\n<li><strong>list</strong> : val or value for idx</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">row</span>, </span><span class=\"param\"><span class=\"n\">extern</span><span class=\"o\">=</span><span class=\"kc\">True</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "observation.ilist_structure.IlistStructure.recvar", "modulename": "observation.ilist_structure", "qualname": "IlistStructure.recvar", "type": "function", "doc": "<p>return the list of var val or values at the row</p>\n\n<p><em>Parameters</em></p>\n\n<ul>\n<li><strong>row</strong> : int - row of the record</li>\n<li><strong>extern</strong> : boolean (default True) - if True, return val rec else value rec</li>\n</ul>\n\n<p><em>Returns</em></p>\n\n<ul>\n<li><strong>list</strong> : val or value for var</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">row</span>, </span><span class=\"param\"><span class=\"n\">extern</span><span class=\"o\">=</span><span class=\"kc\">True</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "observation.ilist_structure.IlistStructure.reindex", "modulename": "observation.ilist_structure", "qualname": "IlistStructure.reindex", "type": "function", "doc": "<p>Calculate a new default codec for each index (Return self)</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "observation.ilist_structure.IlistStructure.renameindex", "modulename": "observation.ilist_structure", "qualname": "IlistStructure.renameindex", "type": "function", "doc": "<p>replace an index name 'oldname' by a new one 'newname'.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">oldname</span>, </span><span class=\"param\"><span class=\"n\">newname</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "observation.ilist_structure.IlistStructure.reorder", "modulename": "observation.ilist_structure", "qualname": "IlistStructure.reorder", "type": "function", "doc": "<p>Reorder records in the order define by 'recorder'</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">recorder</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "observation.ilist_structure.IlistStructure.setcanonorder", "modulename": "observation.ilist_structure", "qualname": "IlistStructure.setcanonorder", "type": "function", "doc": "<p>Set the canonical index order : primary - secondary/unique - variable.\nSet the canonical keys order : ordered keys in the first columns.\nReturn self</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "observation.ilist_structure.IlistStructure.setfilter", "modulename": "observation.ilist_structure", "qualname": "IlistStructure.setfilter", "type": "function", "doc": "<p>Add a filter index with boolean values</p>\n\n<ul>\n<li><strong>filt</strong> : list of boolean - values of the filter idx to add</li>\n<li><strong>first</strong> : boolean (default False) - If True insert index at the first row,\nelse at the end</li>\n<li><strong>filtname</strong> : string (default ES.filter) - Name of the filter Iindex added</li>\n</ul>\n\n<p><em>Returns</em> : self</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">filt</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">first</span><span class=\"o\">=</span><span class=\"kc\">False</span>, </span><span class=\"param\"><span class=\"n\">filtname</span><span class=\"o\">=</span><span class=\"s1\">&#39;$filter&#39;</span>, </span><span class=\"param\"><span class=\"n\">unique</span><span class=\"o\">=</span><span class=\"kc\">False</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "observation.ilist_structure.IlistStructure.setname", "modulename": "observation.ilist_structure", "qualname": "IlistStructure.setname", "type": "function", "doc": "<p>Update Iindex name by the name in listname</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">listname</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "observation.ilist_structure.IlistStructure.setvar", "modulename": "observation.ilist_structure", "qualname": "IlistStructure.setvar", "type": "function", "doc": "<p>Define a var index by the name or the index row</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">var</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "observation.ilist_structure.IlistStructure.sort", "modulename": "observation.ilist_structure", "qualname": "IlistStructure.sort", "type": "function", "doc": "<p>Sort data following the index order and apply the ascending or descending\nsort function to values.</p>\n\n<p><em>Parameters</em></p>\n\n<ul>\n<li><strong>order</strong> : list (default None)- new order of index to apply. If None or [],\nthe sort function is applied to the existing order of indexes.</li>\n<li><strong>reverse</strong> : boolean (default False)- ascending if True, descending if False</li>\n<li><strong>func</strong>    : function (default str) - parameter key used in the sorted function</li>\n</ul>\n\n<p><em>Returns</em> : self</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">order</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">reverse</span><span class=\"o\">=</span><span class=\"kc\">False</span>, </span><span class=\"param\">func=&lt;class &#x27;str&#x27;&gt;</span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "observation.ilist_structure.IlistStructure.swapindex", "modulename": "observation.ilist_structure", "qualname": "IlistStructure.swapindex", "type": "function", "doc": "<p>Change the order of the index .</p>\n\n<p><em>Parameters</em></p>\n\n<ul>\n<li><strong>order</strong> : list of int - new order of index to apply.</li>\n</ul>\n\n<p><em>Returns</em> : self</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">order</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "observation.ilist_structure.IlistStructure.tostdcodec", "modulename": "observation.ilist_structure", "qualname": "IlistStructure.tostdcodec", "type": "function", "doc": "<p>Transform all codec in full or default codec.</p>\n\n<p><em>Parameters</em></p>\n\n<ul>\n<li><strong>inplace</strong> : boolean  (default False) - if True apply transformation\nto self, else to a new Ilist</li>\n<li><strong>full</strong> : boolean (default True)- full codec if True, default if False</li>\n</ul>\n\n<p><em>Return Ilist</em> : self or new Ilist</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">inplace</span><span class=\"o\">=</span><span class=\"kc\">False</span>, </span><span class=\"param\"><span class=\"n\">full</span><span class=\"o\">=</span><span class=\"kc\">True</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "observation.ilist_structure.IlistStructure.updateindex", "modulename": "observation.ilist_structure", "qualname": "IlistStructure.updateindex", "type": "function", "doc": "<p>update values of an index.</p>\n\n<p><em>Parameters</em></p>\n\n<ul>\n<li><strong>listvalue</strong> : list - index values to replace</li>\n<li><strong>index</strong> : integer - index row to update</li>\n<li><strong>typevalue</strong> : str (default None) - class to apply to the new value</li>\n<li><strong>extern</strong> : if True, the listvalue has external representation, else internal</li>\n</ul>\n\n<p><em>Returns</em> : none</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">listvalue</span>, </span><span class=\"param\"><span class=\"n\">index</span>, </span><span class=\"param\"><span class=\"n\">extern</span><span class=\"o\">=</span><span class=\"kc\">True</span>, </span><span class=\"param\"><span class=\"n\">typevalue</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "observation.ilist_structure.IlistStructure.valtokey", "modulename": "observation.ilist_structure", "qualname": "IlistStructure.valtokey", "type": "function", "doc": "<p>convert a rec list (value or val for each idx) to a key list (key for each idx).</p>\n\n<p><em>Parameters</em></p>\n\n<ul>\n<li><strong>rec</strong> : list of value or val for each idx</li>\n<li><strong>extern</strong> : if True, the rec value has external representation, else internal</li>\n</ul>\n\n<p><em>Returns</em></p>\n\n<ul>\n<li><strong>list of int</strong> : rec key for each idx</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">rec</span>, </span><span class=\"param\"><span class=\"n\">extern</span><span class=\"o\">=</span><span class=\"kc\">True</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "observation.timeslot", "modulename": "observation.timeslot", "type": "module", "doc": "<p>Created on Sun Jan  2 18:30:14 2022</p>\n\n<p>@author: Philippe@loco-labs.io</p>\n\n<p>The <code>observation.timeslot</code> module contains the <code>TimeSlot</code> and the <code>TimeInterval</code> classes.</p>\n\n<h1 id=\"what-is-the-timeslot-object\">What is the TimeSlot Object ?</h1>\n\n<p>The TimeSlot Object is a representation of time intervals data and properties. For example,\n I can represent the working day of 2022-march-15 by a TimeSlot which includes the following intervals:</p>\n\n<ul>\n<li>from 9 a.m. to 12 p.m.</li>\n<li>from 2 p.m. to 4:30 p.m.</li>\n<li>from 5 p.m. to 7:30 p.m.\ni.e. a duration of 8 hours centered around 3 p.m. with bounds at 9 a.m. and 7:30 p.m.</li>\n</ul>\n\n<h1 id=\"main-principles\">Main principles</h1>\n\n<p>The main principles are as follows :</p>\n\n<p><img src=\"./timeslot_data_structure.png\" width=\"800\"></p>\n\n<h2 id=\"data-structure\">Data structure</h2>\n\n<p>A <code>TimeSlot</code> is a list of <code>TimeInterval</code>.</p>\n\n<p>A <code>TimeInterval</code> is defined by two <code>datetime</code> objects (start and end)</p>\n\n<p>Multiple properties are associated with the data :</p>\n\n<ul>\n<li>duration : sum of the lenght of each TimeInterval</li>\n<li>centro\u00efd : instant assicited to the middle of the duration</li>\n<li>bounds : minimum, maximum and middle</li>\n<li>type : instant, interval or slot</li>\n</ul>\n\n<h2 id=\"relationships-and-assembly\">Relationships and assembly</h2>\n\n<p>Two <code>TimeSlot</code> can be compared with five statuses (equals, contains, within, disjoint, intersects).</p>\n\n<p>Multiple operations between two objects can be performed :</p>\n\n<ul>\n<li>union between two <code>TimeSlot</code></li>\n<li>intersection between two <code>TimeSlot</code></li>\n<li>complementing a <code>TimeSlot</code> in an interval</li>\n</ul>\n"}, {"fullname": "observation.timeslot.TimeSlotEncoder", "modulename": "observation.timeslot", "qualname": "TimeSlotEncoder", "type": "class", "doc": "<p>add a new json encoder for TimeSlot</p>\n", "bases": "json.encoder.JSONEncoder"}, {"fullname": "observation.timeslot.TimeSlotEncoder.default", "modulename": "observation.timeslot", "qualname": "TimeSlotEncoder.default", "type": "function", "doc": "<p>Implement this method in a subclass such that it returns\na serializable object for <code>o</code>, or calls the base implementation\n(to raise a <code>TypeError</code>).</p>\n\n<p>For example, to support arbitrary iterators, you could\nimplement default like this::</p>\n\n<pre><code>def default(self, o):\n    try:\n        iterable = iter(o)\n    except TypeError:\n        pass\n    else:\n        return list(iterable)\n    # Let the base class default method raise the TypeError\n    return JSONEncoder.default(self, o)\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">o</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "observation.timeslot.TimeSlot", "modulename": "observation.timeslot", "qualname": "TimeSlot", "type": "class", "doc": "<p><em>Attributes (for @property see methods)</em> :</p>\n\n<ul>\n<li><strong>slot</strong> : list of <code>TimeInterval</code></li>\n</ul>\n\n<p>The methods defined in this class are : </p>\n\n<p><em>dynamic value property (getters)</em></p>\n\n<ul>\n<li><code>TimeSlot.Bounds</code></li>\n<li><code>TimeSlot.bounds</code></li>\n<li><code>TimeSlot.Centroid</code></li>\n<li><code>TimeSlot.duration</code></li>\n<li><code>TimeSlot.instant</code></li>\n<li><code>TimeSlot.middle</code></li>\n<li><code>TimeSlot.interval</code></li>\n<li><code>TimeSlot.stype</code></li>\n</ul>\n\n<p><em>instance methods</em></p>\n\n<ul>\n<li><code>TimeSlot.json</code></li>\n<li><code>TimeSlot.link</code></li>\n<li><code>TimeSlot.timetuple</code></li>\n<li><code>TimeSlot.union</code></li>\n</ul>\n"}, {"fullname": "observation.timeslot.TimeSlot.__init__", "modulename": "observation.timeslot", "qualname": "TimeSlot.__init__", "type": "function", "doc": "<p>TimeSlot constructor.</p>\n\n<p><em>Parameters</em></p>\n\n<ul>\n<li><strong>val</strong> : date, interval, list of interval (default None) - with several formats \n(tuple, list, string, datetime, TimeSlot, TimeInterval, numpy datetime64, pandas timestamp)</li>\n</ul>\n\n<p><em>Returns</em> : None</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">val</span><span class=\"o\">=</span><span class=\"kc\">None</span></span>)</span>"}, {"fullname": "observation.timeslot.TimeSlot.Bounds", "modulename": "observation.timeslot", "qualname": "TimeSlot.Bounds", "type": "variable", "doc": "<p>return an interval TimeSlot with the bounds of the TimeSlot object</p>\n"}, {"fullname": "observation.timeslot.TimeSlot.bounds", "modulename": "observation.timeslot", "qualname": "TimeSlot.bounds", "type": "variable", "doc": "<p>return a tuple with the start and end dates with isoformat string</p>\n"}, {"fullname": "observation.timeslot.TimeSlot.cast", "modulename": "observation.timeslot", "qualname": "TimeSlot.cast", "type": "function", "doc": "<p>tranform a value (unique or list) in a list of <code>TimeSlot</code></p>\n\n<p><em>Parameters</em></p>\n\n<ul>\n<li><strong>value</strong> : value to transform</li>\n</ul>\n\n<p><em>Returns</em></p>\n\n<ul>\n<li><strong>list</strong> : list of <code>TimeSlot</code></li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">cls</span>, </span><span class=\"param\"><span class=\"n\">value</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "observation.timeslot.TimeSlot.Centroid", "modulename": "observation.timeslot", "qualname": "TimeSlot.Centroid", "type": "variable", "doc": "<p>return a TimeSlot with the date corresponding to the middle of the duration</p>\n"}, {"fullname": "observation.timeslot.TimeSlot.duration", "modulename": "observation.timeslot", "qualname": "TimeSlot.duration", "type": "variable", "doc": "<p>cumulative duration of each interval (timedelta format)</p>\n"}, {"fullname": "observation.timeslot.TimeSlot.form", "modulename": "observation.timeslot", "qualname": "TimeSlot.form", "type": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">dtime</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "observation.timeslot.TimeSlot.instant", "modulename": "observation.timeslot", "qualname": "TimeSlot.instant", "type": "variable", "doc": "<p>return the date corresponding to the middle of the duration (datetime format)</p>\n"}, {"fullname": "observation.timeslot.TimeSlot.middle", "modulename": "observation.timeslot", "qualname": "TimeSlot.middle", "type": "variable", "doc": "<p>return the date corresponding to the middle of the bounds (datetime format)</p>\n"}, {"fullname": "observation.timeslot.TimeSlot.name", "modulename": "observation.timeslot", "qualname": "TimeSlot.name", "type": "variable", "doc": "<p>class name</p>\n"}, {"fullname": "observation.timeslot.TimeSlot.interval", "modulename": "observation.timeslot", "qualname": "TimeSlot.interval", "type": "variable", "doc": "<p>return a list with the start and end dates (datetime format)</p>\n"}, {"fullname": "observation.timeslot.TimeSlot.stype", "modulename": "observation.timeslot", "qualname": "TimeSlot.stype", "type": "variable", "doc": "<p>return a string with the type of TimeSlot (instant, interval, slot)</p>\n"}, {"fullname": "observation.timeslot.TimeSlot.json", "modulename": "observation.timeslot", "qualname": "TimeSlot.json", "type": "function", "doc": "<p>Return json/bson structure with the list of TimeInterval.</p>\n\n<p><em>Parameters</em></p>\n\n<ul>\n<li><strong>encoded</strong> : defaut False - if False return dict, else return json string/bson bytes</li>\n<li><strong>encode_format</strong> : defaut 'json' - return json, bson or cbor format</li>\n</ul>\n\n<p><em>Returns</em> : string or dict</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "observation.timeslot.TimeSlot.link", "modulename": "observation.timeslot", "qualname": "TimeSlot.link", "type": "function", "doc": "<p>Return the status (string) of the link between two TimeSlot (self and other).</p>\n\n<ul>\n<li>equals     : if self and other are the same</li>\n<li>disjoint   : if self's intervals and other's intervals are all disjoint</li>\n<li>within     : if all self's intervals are included in other's intervals</li>\n<li>contains   : if all other's intervals are included in self's intervals</li>\n<li>intersects : in the others cases</li>\n</ul>\n\n<p><em>Parameters</em></p>\n\n<ul>\n<li><strong>other</strong> : TimeSlot to be compared</li>\n</ul>\n\n<p><em>Returns</em> </p>\n\n<ul>\n<li><strong>tuple</strong> : (string(status), boolean(full or not))</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">other</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "observation.timeslot.TimeSlot.timetuple", "modulename": "observation.timeslot", "qualname": "TimeSlot.timetuple", "type": "function", "doc": "<p>Return json structure with the list of TimeInterval (timetuple filter).</p>\n\n<p><em>Parameters</em></p>\n\n<ul>\n<li><strong>index</strong> : integer, defaut 0 - timetuple format to apply :\n<ul>\n<li>0 : year</li>\n<li>1 : month</li>\n<li>2 : day</li>\n<li>3 : hour</li>\n<li>4 : minute</li>\n<li>5 : seconds</li>\n<li>6 : weekday</li>\n<li>7 : yearday</li>\n<li>8 : isdst (1 when daylight savings time is in effect, 0 when is not)</li>\n</ul></li>\n<li><strong>encoded</strong> : defaut False - if True return string, else return dict</li>\n</ul>\n\n<p><em>Returns</em> : string or dict</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">index</span><span class=\"o\">=</span><span class=\"mi\">0</span>, </span><span class=\"param\"><span class=\"n\">encoded</span><span class=\"o\">=</span><span class=\"kc\">False</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "observation.timeslot.TimeSlot.union", "modulename": "observation.timeslot", "qualname": "TimeSlot.union", "type": "function", "doc": "<p>Add other's values to self's values in a new TimeSlot (same as __add__)</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">other</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "observation.timeslot.TimeInterval", "modulename": "observation.timeslot", "qualname": "TimeInterval", "type": "class", "doc": "<p><em>Attributes (for @property see methods)</em> :</p>\n\n<ul>\n<li><strong>start</strong> : datetime Object - start of <code>TimeInterval</code></li>\n<li><strong>end</strong>   : datetime Object - end of <code>TimeInterval</code></li>\n</ul>\n\n<p>The methods defined in this class are : </p>\n\n<p><em>dynamic value property (getters)</em></p>\n\n<ul>\n<li><code>TimeInterval.Bounds</code></li>\n<li><code>TimeInterval.bounds</code></li>\n<li><code>TimeInterval.Centroid</code></li>\n<li><code>TimeInterval.duration</code></li>\n<li><code>TimeInterval.instant</code></li>\n<li><code>TimeInterval.stype</code></li>\n</ul>\n\n<p><em>instance methods</em></p>\n\n<ul>\n<li><code>TimeInterval.json</code></li>\n<li><code>TimeInterval.link</code></li>\n<li><code>TimeInterval.timetuple</code></li>\n<li><code>TimeInterval.union</code></li>\n</ul>\n"}, {"fullname": "observation.timeslot.TimeInterval.__init__", "modulename": "observation.timeslot", "qualname": "TimeInterval.__init__", "type": "function", "doc": "<p>TimeInterval constructor.</p>\n\n<p><em>Parameters</em></p>\n\n<ul>\n<li><strong>val</strong> : date, interval (default ES.nullDate) - with several formats \n(list, string, datetime, TimeInterval, numpy datetime64, pandas timestamp)</li>\n</ul>\n\n<p><em>Returns</em> : None</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">val</span><span class=\"o\">=</span><span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">datetime</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">tzinfo</span><span class=\"o\">=</span><span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">timezone</span><span class=\"o\">.</span><span class=\"n\">utc</span><span class=\"p\">)</span></span>)</span>"}, {"fullname": "observation.timeslot.TimeInterval.bounds", "modulename": "observation.timeslot", "qualname": "TimeInterval.bounds", "type": "variable", "doc": "<p>return a tuple with the start and end dates with isoformat string</p>\n"}, {"fullname": "observation.timeslot.TimeInterval.Centroid", "modulename": "observation.timeslot", "qualname": "TimeInterval.Centroid", "type": "variable", "doc": "<p>return a TimeInterval with the date corresponding to the middle of the interval</p>\n"}, {"fullname": "observation.timeslot.TimeInterval.duration", "modulename": "observation.timeslot", "qualname": "TimeInterval.duration", "type": "variable", "doc": "<p>duration between 'end' and 'start' date (timedelta format)</p>\n"}, {"fullname": "observation.timeslot.TimeInterval.instant", "modulename": "observation.timeslot", "qualname": "TimeInterval.instant", "type": "variable", "doc": "<p>return the date corresponding to the middle of the duration (datetime format)</p>\n"}, {"fullname": "observation.timeslot.TimeInterval.stype", "modulename": "observation.timeslot", "qualname": "TimeInterval.stype", "type": "variable", "doc": "<p>return a string with the type of TimeInterval (instant, interval)</p>\n"}, {"fullname": "observation.timeslot.TimeInterval.json", "modulename": "observation.timeslot", "qualname": "TimeInterval.json", "type": "function", "doc": "<p>Return json/bson structure (date if 'instant' or [start, end] if 'interval') \nwith datetime or datetime.isoformat for dates.</p>\n\n<p><em>Parameters</em></p>\n\n<ul>\n<li><strong>encoded</strong> : defaut False - if True return dict, else return json string/bson bytes</li>\n<li><strong>encode_format</strong>   : defaut 'json' - return json, bson or cbor format</li>\n</ul>\n\n<p><em>Returns</em> : string or dict</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">encoded</span><span class=\"o\">=</span><span class=\"kc\">False</span>, </span><span class=\"param\"><span class=\"n\">encode_format</span><span class=\"o\">=</span><span class=\"s1\">&#39;json&#39;</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "observation.timeslot.TimeInterval.link", "modulename": "observation.timeslot", "qualname": "TimeInterval.link", "type": "function", "doc": "<p>Return the status (string) of the link between two TimeIntervals (self and other).</p>\n\n<ul>\n<li>equals     : if self and other are the same</li>\n<li>disjoint   : if self's interval and other's interval are disjoint</li>\n<li>within     : if other's interval is included in self's interval</li>\n<li>contains   : if self's interval is included in other's interval</li>\n<li>intersects : in the others cases</li>\n</ul>\n\n<p><em>Parameters</em></p>\n\n<ul>\n<li><strong>other</strong> : TimeInterval to be compared</li>\n</ul>\n\n<p><em>Returns</em> : string</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">other</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "observation.timeslot.TimeInterval.timetuple", "modulename": "observation.timeslot", "qualname": "TimeInterval.timetuple", "type": "function", "doc": "<p>Return json structure (timetuple filter).</p>\n\n<p><em>Parameters</em></p>\n\n<ul>\n<li><strong>index</strong> : integer, defaut 0 - timetuple format to apply :\n<ul>\n<li>0 : year</li>\n<li>1 : month</li>\n<li>2 : day</li>\n<li>3 : hour</li>\n<li>4 : minute</li>\n<li>5 : seconds</li>\n<li>6 : weekday</li>\n<li>7 : yearday</li>\n<li>8 : isdst (1 when daylight savings time is in effect, 0 when is not)</li>\n</ul></li>\n<li><strong>encoded</strong> : defaut False - if True return string, else return dict</li>\n</ul>\n\n<p><em>Returns</em> : string or dict</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">index</span><span class=\"o\">=</span><span class=\"mi\">0</span>, </span><span class=\"param\"><span class=\"n\">encoded</span><span class=\"o\">=</span><span class=\"kc\">False</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "observation.timeslot.TimeInterval.union", "modulename": "observation.timeslot", "qualname": "TimeInterval.union", "type": "function", "doc": "<p>Add other's values to self's values in a new TimeInterval \nif self and other are not disjoint</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">other</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "observation.timeslot.TimeSlotError", "modulename": "observation.timeslot", "qualname": "TimeSlotError", "type": "class", "doc": "<p>Common base class for all non-exit exceptions.</p>\n", "bases": "builtins.Exception"}, {"fullname": "observation.util", "modulename": "observation.util", "type": "module", "doc": "<p>Created on Fri Jul 29 12:48:16 2022</p>\n\n<p>@author: philippe@loco-labs.io</p>\n"}, {"fullname": "observation.util.identity", "modulename": "observation.util", "qualname": "identity", "type": "function", "doc": "<p>return the same value as args or kwargs</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"o\">*</span><span class=\"n\">args</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "observation.util.util", "modulename": "observation.util", "qualname": "util", "type": "class", "doc": "<p>common functions for Iindex and Ilist class</p>\n"}, {"fullname": "observation.util.util.__init__", "modulename": "observation.util", "qualname": "util.__init__", "type": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">()</span>"}, {"fullname": "observation.util.util.canonorder", "modulename": "observation.util", "qualname": "util.canonorder", "type": "function", "doc": "<p>return a list of crossed keys from a list of number of values</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">lenidx</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "observation.util.util.cast", "modulename": "observation.util", "qualname": "util.cast", "type": "function", "doc": "<p>convert val in the type defined by the string dtype</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">val</span>, </span><span class=\"param\"><span class=\"n\">dtype</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">string</span><span class=\"o\">=</span><span class=\"kc\">True</span>, </span><span class=\"param\"><span class=\"n\">default</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">maxlen</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "observation.util.util.castobj", "modulename": "observation.util", "qualname": "util.castobj", "type": "function", "doc": "<p>convert a list of values in the ESValue defined by the string classvalue</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">lis</span>, </span><span class=\"param\"><span class=\"n\">classvalue</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "observation.util.util.castval", "modulename": "observation.util", "qualname": "util.castval", "type": "function", "doc": "<p>convert a value in the ESValue defined by the string classvalue</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">val</span>, </span><span class=\"param\"><span class=\"n\">classvalue</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "observation.util.util.couplinginfos", "modulename": "observation.util", "qualname": "util.couplinginfos", "type": "function", "doc": "<p>return a dict with the coupling info between two list</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">l1</span>, </span><span class=\"param\"><span class=\"n\">l2</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "observation.util.util.filter", "modulename": "observation.util", "qualname": "util.filter", "type": "function", "doc": "<p>apply \"func\" to each value of \"lis\" and tests if equals \"res\".\nReturn the list of index with True result.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">func</span>, </span><span class=\"param\"><span class=\"n\">lis</span>, </span><span class=\"param\"><span class=\"n\">res</span>, </span><span class=\"param\"><span class=\"o\">*</span><span class=\"n\">args</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "observation.util.util.funclist", "modulename": "observation.util", "qualname": "util.funclist", "type": "function", "doc": "<p>return the function func applied to the object value with parameters args and kwargs</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">value</span>, </span><span class=\"param\"><span class=\"n\">func</span>, </span><span class=\"param\"><span class=\"o\">*</span><span class=\"n\">args</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "observation.util.util.hash", "modulename": "observation.util", "qualname": "util.hash", "type": "function", "doc": "<p>return sum of hash values in the list</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">listval</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "observation.util.util.idxfull", "modulename": "observation.util", "qualname": "util.idxfull", "type": "function", "doc": "<p>return additional keys for each index in the setidx list to have crossed setidx</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">setidx</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "observation.util.util.isEqual", "modulename": "observation.util", "qualname": "util.isEqual", "type": "function", "doc": "<p>return True if value and tovalue are equal</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">value</span>, </span><span class=\"param\"><span class=\"n\">tovalue</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "observation.util.util.isNotEqual", "modulename": "observation.util", "qualname": "util.isNotEqual", "type": "function", "doc": "<p>return True if value and tovalue are not equal</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">value</span>, </span><span class=\"param\"><span class=\"n\">tovalue</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "observation.util.util.isNotNull", "modulename": "observation.util", "qualname": "util.isNotNull", "type": "function", "doc": "<p>return boolean. True if value' is not a NullValue</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">value</span>, </span><span class=\"param\"><span class=\"n\">nullvalue</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "observation.util.util.idxlink", "modulename": "observation.util", "qualname": "util.idxlink", "type": "function", "doc": "<p>return a dict for each different tuple (ref value, l2 value)</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">ref</span>, </span><span class=\"param\"><span class=\"n\">l2</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "observation.util.util.json", "modulename": "observation.util", "qualname": "util.json", "type": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">val</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">option</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "observation.util.util.list", "modulename": "observation.util", "qualname": "util.list", "type": "function", "doc": "<p>transform a list of tuples in a list of lists</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">tuplelists</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "observation.util.util.listed", "modulename": "observation.util", "qualname": "util.listed", "type": "function", "doc": "<p>transform a tuple of tuple in a list of list</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">idx</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "observation.util.util.mul", "modulename": "observation.util", "qualname": "util.mul", "type": "function", "doc": "<p>return the product of values in a list or tuple</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">values</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "observation.util.util.pparent", "modulename": "observation.util", "qualname": "util.pparent", "type": "function", "doc": "<p>return field 'pparent'</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">row</span>, </span><span class=\"param\"><span class=\"n\">infos</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "observation.util.util.reindex", "modulename": "observation.util", "qualname": "util.reindex", "type": "function", "doc": "<p>new keys with new order of codec</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">oldkeys</span>, </span><span class=\"param\"><span class=\"n\">oldcodec</span>, </span><span class=\"param\"><span class=\"n\">newcodec</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "observation.util.util.reorder", "modulename": "observation.util", "qualname": "util.reorder", "type": "function", "doc": "<p>return a new values list following the order define by sort</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">values</span>, </span><span class=\"param\"><span class=\"n\">sort</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "observation.util.util.resetidx", "modulename": "observation.util", "qualname": "util.resetidx", "type": "function", "doc": "<p>return codec and keys from a list of values</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">values</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "observation.util.util.str", "modulename": "observation.util", "qualname": "util.str", "type": "function", "doc": "<p>return a list with values in the str format</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">listvalues</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "observation.util.util.tokeys", "modulename": "observation.util", "qualname": "util.tokeys", "type": "function", "doc": "<p>return a list of keys from a list of values</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">values</span>, </span><span class=\"param\"><span class=\"n\">codec</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "observation.util.util.tovalues", "modulename": "observation.util", "qualname": "util.tovalues", "type": "function", "doc": "<p>return a list of values from a list of keys and a list of codec values</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">keys</span>, </span><span class=\"param\"><span class=\"n\">codec</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "observation.util.util.tonumpy", "modulename": "observation.util", "qualname": "util.tonumpy", "type": "function", "doc": "<p>return a Numpy Array from a list of values converted by func</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">valuelist</span>, </span><span class=\"param\"><span class=\"n\">func</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "observation.util.util.tocodec", "modulename": "observation.util", "qualname": "util.tocodec", "type": "function", "doc": "<p>extract a list of unique values</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">values</span>, </span><span class=\"param\"><span class=\"n\">keys</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "observation.util.util.transpose", "modulename": "observation.util", "qualname": "util.transpose", "type": "function", "doc": "<p>exchange row/column in a list of list</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">idxlist</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "observation.util.util.tuple", "modulename": "observation.util", "qualname": "util.tuple", "type": "function", "doc": "<p>transform a list of list in a list of tuple</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">idx</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "observation.util.util.tupled", "modulename": "observation.util", "qualname": "util.tupled", "type": "function", "doc": "<p>transform a list of list in a tuple of tuple</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">idx</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "observation.util.util.typename", "modulename": "observation.util", "qualname": "util.typename", "type": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">name</span>, </span><span class=\"param\"><span class=\"n\">typevalue</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "observation.util.utilError", "modulename": "observation.util", "qualname": "utilError", "type": "class", "doc": "<p>util Exception</p>\n", "bases": "builtins.Exception"}];

    // mirrored in build-search-index.js (part 1)
    // Also split on html tags. this is a cheap heuristic, but good enough.
    elasticlunr.tokenizer.setSeperator(/[\s\-.;&_'"=,()]+|<[^>]*>/);

    let searchIndex;
    if (docs._isPrebuiltIndex) {
        console.info("using precompiled search index");
        searchIndex = elasticlunr.Index.load(docs);
    } else {
        console.time("building search index");
        // mirrored in build-search-index.js (part 2)
        searchIndex = elasticlunr(function () {
            this.pipeline.remove(elasticlunr.stemmer);
            this.pipeline.remove(elasticlunr.stopWordFilter);
            this.addField("qualname");
            this.addField("fullname");
            this.addField("annotation");
            this.addField("default_value");
            this.addField("signature");
            this.addField("bases");
            this.addField("doc");
            this.setRef("fullname");
        });
        for (let doc of docs) {
            searchIndex.addDoc(doc);
        }
        console.timeEnd("building search index");
    }

    return (term) => searchIndex.search(term, {
        fields: {
            qualname: {boost: 4},
            fullname: {boost: 2},
            annotation: {boost: 2},
            default_value: {boost: 2},
            signature: {boost: 2},
            bases: {boost: 2},
            doc: {boost: 1},
        },
        expand: true
    });
})();