window.pdocSearch = (function(){
/** elasticlunr - http://weixsong.github.io * Copyright (C) 2017 Oliver Nightingale * Copyright (C) 2017 Wei Song * MIT Licensed */!function(){function e(e){if(null===e||"object"!=typeof e)return e;var t=e.constructor();for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n]);return t}var t=function(e){var n=new t.Index;return n.pipeline.add(t.trimmer,t.stopWordFilter,t.stemmer),e&&e.call(n,n),n};t.version="0.9.5",lunr=t,t.utils={},t.utils.warn=function(e){return function(t){e.console&&console.warn&&console.warn(t)}}(this),t.utils.toString=function(e){return void 0===e||null===e?"":e.toString()},t.EventEmitter=function(){this.events={}},t.EventEmitter.prototype.addListener=function(){var e=Array.prototype.slice.call(arguments),t=e.pop(),n=e;if("function"!=typeof t)throw new TypeError("last argument must be a function");n.forEach(function(e){this.hasHandler(e)||(this.events[e]=[]),this.events[e].push(t)},this)},t.EventEmitter.prototype.removeListener=function(e,t){if(this.hasHandler(e)){var n=this.events[e].indexOf(t);-1!==n&&(this.events[e].splice(n,1),0==this.events[e].length&&delete this.events[e])}},t.EventEmitter.prototype.emit=function(e){if(this.hasHandler(e)){var t=Array.prototype.slice.call(arguments,1);this.events[e].forEach(function(e){e.apply(void 0,t)},this)}},t.EventEmitter.prototype.hasHandler=function(e){return e in this.events},t.tokenizer=function(e){if(!arguments.length||null===e||void 0===e)return[];if(Array.isArray(e)){var n=e.filter(function(e){return null===e||void 0===e?!1:!0});n=n.map(function(e){return t.utils.toString(e).toLowerCase()});var i=[];return n.forEach(function(e){var n=e.split(t.tokenizer.seperator);i=i.concat(n)},this),i}return e.toString().trim().toLowerCase().split(t.tokenizer.seperator)},t.tokenizer.defaultSeperator=/[\s\-]+/,t.tokenizer.seperator=t.tokenizer.defaultSeperator,t.tokenizer.setSeperator=function(e){null!==e&&void 0!==e&&"object"==typeof e&&(t.tokenizer.seperator=e)},t.tokenizer.resetSeperator=function(){t.tokenizer.seperator=t.tokenizer.defaultSeperator},t.tokenizer.getSeperator=function(){return t.tokenizer.seperator},t.Pipeline=function(){this._queue=[]},t.Pipeline.registeredFunctions={},t.Pipeline.registerFunction=function(e,n){n in t.Pipeline.registeredFunctions&&t.utils.warn("Overwriting existing registered function: "+n),e.label=n,t.Pipeline.registeredFunctions[n]=e},t.Pipeline.getRegisteredFunction=function(e){return e in t.Pipeline.registeredFunctions!=!0?null:t.Pipeline.registeredFunctions[e]},t.Pipeline.warnIfFunctionNotRegistered=function(e){var n=e.label&&e.label in this.registeredFunctions;n||t.utils.warn("Function is not registered with pipeline. This may cause problems when serialising the index.\n",e)},t.Pipeline.load=function(e){var n=new t.Pipeline;return e.forEach(function(e){var i=t.Pipeline.getRegisteredFunction(e);if(!i)throw new Error("Cannot load un-registered function: "+e);n.add(i)}),n},t.Pipeline.prototype.add=function(){var e=Array.prototype.slice.call(arguments);e.forEach(function(e){t.Pipeline.warnIfFunctionNotRegistered(e),this._queue.push(e)},this)},t.Pipeline.prototype.after=function(e,n){t.Pipeline.warnIfFunctionNotRegistered(n);var i=this._queue.indexOf(e);if(-1===i)throw new Error("Cannot find existingFn");this._queue.splice(i+1,0,n)},t.Pipeline.prototype.before=function(e,n){t.Pipeline.warnIfFunctionNotRegistered(n);var i=this._queue.indexOf(e);if(-1===i)throw new Error("Cannot find existingFn");this._queue.splice(i,0,n)},t.Pipeline.prototype.remove=function(e){var t=this._queue.indexOf(e);-1!==t&&this._queue.splice(t,1)},t.Pipeline.prototype.run=function(e){for(var t=[],n=e.length,i=this._queue.length,o=0;n>o;o++){for(var r=e[o],s=0;i>s&&(r=this._queue[s](r,o,e),void 0!==r&&null!==r);s++);void 0!==r&&null!==r&&t.push(r)}return t},t.Pipeline.prototype.reset=function(){this._queue=[]},t.Pipeline.prototype.get=function(){return this._queue},t.Pipeline.prototype.toJSON=function(){return this._queue.map(function(e){return t.Pipeline.warnIfFunctionNotRegistered(e),e.label})},t.Index=function(){this._fields=[],this._ref="id",this.pipeline=new t.Pipeline,this.documentStore=new t.DocumentStore,this.index={},this.eventEmitter=new t.EventEmitter,this._idfCache={},this.on("add","remove","update",function(){this._idfCache={}}.bind(this))},t.Index.prototype.on=function(){var e=Array.prototype.slice.call(arguments);return this.eventEmitter.addListener.apply(this.eventEmitter,e)},t.Index.prototype.off=function(e,t){return this.eventEmitter.removeListener(e,t)},t.Index.load=function(e){e.version!==t.version&&t.utils.warn("version mismatch: current "+t.version+" importing "+e.version);var n=new this;n._fields=e.fields,n._ref=e.ref,n.documentStore=t.DocumentStore.load(e.documentStore),n.pipeline=t.Pipeline.load(e.pipeline),n.index={};for(var i in e.index)n.index[i]=t.InvertedIndex.load(e.index[i]);return n},t.Index.prototype.addField=function(e){return this._fields.push(e),this.index[e]=new t.InvertedIndex,this},t.Index.prototype.setRef=function(e){return this._ref=e,this},t.Index.prototype.saveDocument=function(e){return this.documentStore=new t.DocumentStore(e),this},t.Index.prototype.addDoc=function(e,n){if(e){var n=void 0===n?!0:n,i=e[this._ref];this.documentStore.addDoc(i,e),this._fields.forEach(function(n){var o=this.pipeline.run(t.tokenizer(e[n]));this.documentStore.addFieldLength(i,n,o.length);var r={};o.forEach(function(e){e in r?r[e]+=1:r[e]=1},this);for(var s in r){var u=r[s];u=Math.sqrt(u),this.index[n].addToken(s,{ref:i,tf:u})}},this),n&&this.eventEmitter.emit("add",e,this)}},t.Index.prototype.removeDocByRef=function(e){if(e&&this.documentStore.isDocStored()!==!1&&this.documentStore.hasDoc(e)){var t=this.documentStore.getDoc(e);this.removeDoc(t,!1)}},t.Index.prototype.removeDoc=function(e,n){if(e){var n=void 0===n?!0:n,i=e[this._ref];this.documentStore.hasDoc(i)&&(this.documentStore.removeDoc(i),this._fields.forEach(function(n){var o=this.pipeline.run(t.tokenizer(e[n]));o.forEach(function(e){this.index[n].removeToken(e,i)},this)},this),n&&this.eventEmitter.emit("remove",e,this))}},t.Index.prototype.updateDoc=function(e,t){var t=void 0===t?!0:t;this.removeDocByRef(e[this._ref],!1),this.addDoc(e,!1),t&&this.eventEmitter.emit("update",e,this)},t.Index.prototype.idf=function(e,t){var n="@"+t+"/"+e;if(Object.prototype.hasOwnProperty.call(this._idfCache,n))return this._idfCache[n];var i=this.index[t].getDocFreq(e),o=1+Math.log(this.documentStore.length/(i+1));return this._idfCache[n]=o,o},t.Index.prototype.getFields=function(){return this._fields.slice()},t.Index.prototype.search=function(e,n){if(!e)return[];e="string"==typeof e?{any:e}:JSON.parse(JSON.stringify(e));var i=null;null!=n&&(i=JSON.stringify(n));for(var o=new t.Configuration(i,this.getFields()).get(),r={},s=Object.keys(e),u=0;u<s.length;u++){var a=s[u];r[a]=this.pipeline.run(t.tokenizer(e[a]))}var l={};for(var c in o){var d=r[c]||r.any;if(d){var f=this.fieldSearch(d,c,o),h=o[c].boost;for(var p in f)f[p]=f[p]*h;for(var p in f)p in l?l[p]+=f[p]:l[p]=f[p]}}var v,g=[];for(var p in l)v={ref:p,score:l[p]},this.documentStore.hasDoc(p)&&(v.doc=this.documentStore.getDoc(p)),g.push(v);return g.sort(function(e,t){return t.score-e.score}),g},t.Index.prototype.fieldSearch=function(e,t,n){var i=n[t].bool,o=n[t].expand,r=n[t].boost,s=null,u={};return 0!==r?(e.forEach(function(e){var n=[e];1==o&&(n=this.index[t].expandToken(e));var r={};n.forEach(function(n){var o=this.index[t].getDocs(n),a=this.idf(n,t);if(s&&"AND"==i){var l={};for(var c in s)c in o&&(l[c]=o[c]);o=l}n==e&&this.fieldSearchStats(u,n,o);for(var c in o){var d=this.index[t].getTermFrequency(n,c),f=this.documentStore.getFieldLength(c,t),h=1;0!=f&&(h=1/Math.sqrt(f));var p=1;n!=e&&(p=.15*(1-(n.length-e.length)/n.length));var v=d*a*h*p;c in r?r[c]+=v:r[c]=v}},this),s=this.mergeScores(s,r,i)},this),s=this.coordNorm(s,u,e.length)):void 0},t.Index.prototype.mergeScores=function(e,t,n){if(!e)return t;if("AND"==n){var i={};for(var o in t)o in e&&(i[o]=e[o]+t[o]);return i}for(var o in t)o in e?e[o]+=t[o]:e[o]=t[o];return e},t.Index.prototype.fieldSearchStats=function(e,t,n){for(var i in n)i in e?e[i].push(t):e[i]=[t]},t.Index.prototype.coordNorm=function(e,t,n){for(var i in e)if(i in t){var o=t[i].length;e[i]=e[i]*o/n}return e},t.Index.prototype.toJSON=function(){var e={};return this._fields.forEach(function(t){e[t]=this.index[t].toJSON()},this),{version:t.version,fields:this._fields,ref:this._ref,documentStore:this.documentStore.toJSON(),index:e,pipeline:this.pipeline.toJSON()}},t.Index.prototype.use=function(e){var t=Array.prototype.slice.call(arguments,1);t.unshift(this),e.apply(this,t)},t.DocumentStore=function(e){this._save=null===e||void 0===e?!0:e,this.docs={},this.docInfo={},this.length=0},t.DocumentStore.load=function(e){var t=new this;return t.length=e.length,t.docs=e.docs,t.docInfo=e.docInfo,t._save=e.save,t},t.DocumentStore.prototype.isDocStored=function(){return this._save},t.DocumentStore.prototype.addDoc=function(t,n){this.hasDoc(t)||this.length++,this.docs[t]=this._save===!0?e(n):null},t.DocumentStore.prototype.getDoc=function(e){return this.hasDoc(e)===!1?null:this.docs[e]},t.DocumentStore.prototype.hasDoc=function(e){return e in this.docs},t.DocumentStore.prototype.removeDoc=function(e){this.hasDoc(e)&&(delete this.docs[e],delete this.docInfo[e],this.length--)},t.DocumentStore.prototype.addFieldLength=function(e,t,n){null!==e&&void 0!==e&&0!=this.hasDoc(e)&&(this.docInfo[e]||(this.docInfo[e]={}),this.docInfo[e][t]=n)},t.DocumentStore.prototype.updateFieldLength=function(e,t,n){null!==e&&void 0!==e&&0!=this.hasDoc(e)&&this.addFieldLength(e,t,n)},t.DocumentStore.prototype.getFieldLength=function(e,t){return null===e||void 0===e?0:e in this.docs&&t in this.docInfo[e]?this.docInfo[e][t]:0},t.DocumentStore.prototype.toJSON=function(){return{docs:this.docs,docInfo:this.docInfo,length:this.length,save:this._save}},t.stemmer=function(){var e={ational:"ate",tional:"tion",enci:"ence",anci:"ance",izer:"ize",bli:"ble",alli:"al",entli:"ent",eli:"e",ousli:"ous",ization:"ize",ation:"ate",ator:"ate",alism:"al",iveness:"ive",fulness:"ful",ousness:"ous",aliti:"al",iviti:"ive",biliti:"ble",logi:"log"},t={icate:"ic",ative:"",alize:"al",iciti:"ic",ical:"ic",ful:"",ness:""},n="[^aeiou]",i="[aeiouy]",o=n+"[^aeiouy]*",r=i+"[aeiou]*",s="^("+o+")?"+r+o,u="^("+o+")?"+r+o+"("+r+")?$",a="^("+o+")?"+r+o+r+o,l="^("+o+")?"+i,c=new RegExp(s),d=new RegExp(a),f=new RegExp(u),h=new RegExp(l),p=/^(.+?)(ss|i)es$/,v=/^(.+?)([^s])s$/,g=/^(.+?)eed$/,m=/^(.+?)(ed|ing)$/,y=/.$/,S=/(at|bl|iz)$/,x=new RegExp("([^aeiouylsz])\\1$"),w=new RegExp("^"+o+i+"[^aeiouwxy]$"),I=/^(.+?[^aeiou])y$/,b=/^(.+?)(ational|tional|enci|anci|izer|bli|alli|entli|eli|ousli|ization|ation|ator|alism|iveness|fulness|ousness|aliti|iviti|biliti|logi)$/,E=/^(.+?)(icate|ative|alize|iciti|ical|ful|ness)$/,D=/^(.+?)(al|ance|ence|er|ic|able|ible|ant|ement|ment|ent|ou|ism|ate|iti|ous|ive|ize)$/,F=/^(.+?)(s|t)(ion)$/,_=/^(.+?)e$/,P=/ll$/,k=new RegExp("^"+o+i+"[^aeiouwxy]$"),z=function(n){var i,o,r,s,u,a,l;if(n.length<3)return n;if(r=n.substr(0,1),"y"==r&&(n=r.toUpperCase()+n.substr(1)),s=p,u=v,s.test(n)?n=n.replace(s,"$1$2"):u.test(n)&&(n=n.replace(u,"$1$2")),s=g,u=m,s.test(n)){var z=s.exec(n);s=c,s.test(z[1])&&(s=y,n=n.replace(s,""))}else if(u.test(n)){var z=u.exec(n);i=z[1],u=h,u.test(i)&&(n=i,u=S,a=x,l=w,u.test(n)?n+="e":a.test(n)?(s=y,n=n.replace(s,"")):l.test(n)&&(n+="e"))}if(s=I,s.test(n)){var z=s.exec(n);i=z[1],n=i+"i"}if(s=b,s.test(n)){var z=s.exec(n);i=z[1],o=z[2],s=c,s.test(i)&&(n=i+e[o])}if(s=E,s.test(n)){var z=s.exec(n);i=z[1],o=z[2],s=c,s.test(i)&&(n=i+t[o])}if(s=D,u=F,s.test(n)){var z=s.exec(n);i=z[1],s=d,s.test(i)&&(n=i)}else if(u.test(n)){var z=u.exec(n);i=z[1]+z[2],u=d,u.test(i)&&(n=i)}if(s=_,s.test(n)){var z=s.exec(n);i=z[1],s=d,u=f,a=k,(s.test(i)||u.test(i)&&!a.test(i))&&(n=i)}return s=P,u=d,s.test(n)&&u.test(n)&&(s=y,n=n.replace(s,"")),"y"==r&&(n=r.toLowerCase()+n.substr(1)),n};return z}(),t.Pipeline.registerFunction(t.stemmer,"stemmer"),t.stopWordFilter=function(e){return e&&t.stopWordFilter.stopWords[e]!==!0?e:void 0},t.clearStopWords=function(){t.stopWordFilter.stopWords={}},t.addStopWords=function(e){null!=e&&Array.isArray(e)!==!1&&e.forEach(function(e){t.stopWordFilter.stopWords[e]=!0},this)},t.resetStopWords=function(){t.stopWordFilter.stopWords=t.defaultStopWords},t.defaultStopWords={"":!0,a:!0,able:!0,about:!0,across:!0,after:!0,all:!0,almost:!0,also:!0,am:!0,among:!0,an:!0,and:!0,any:!0,are:!0,as:!0,at:!0,be:!0,because:!0,been:!0,but:!0,by:!0,can:!0,cannot:!0,could:!0,dear:!0,did:!0,"do":!0,does:!0,either:!0,"else":!0,ever:!0,every:!0,"for":!0,from:!0,get:!0,got:!0,had:!0,has:!0,have:!0,he:!0,her:!0,hers:!0,him:!0,his:!0,how:!0,however:!0,i:!0,"if":!0,"in":!0,into:!0,is:!0,it:!0,its:!0,just:!0,least:!0,let:!0,like:!0,likely:!0,may:!0,me:!0,might:!0,most:!0,must:!0,my:!0,neither:!0,no:!0,nor:!0,not:!0,of:!0,off:!0,often:!0,on:!0,only:!0,or:!0,other:!0,our:!0,own:!0,rather:!0,said:!0,say:!0,says:!0,she:!0,should:!0,since:!0,so:!0,some:!0,than:!0,that:!0,the:!0,their:!0,them:!0,then:!0,there:!0,these:!0,they:!0,"this":!0,tis:!0,to:!0,too:!0,twas:!0,us:!0,wants:!0,was:!0,we:!0,were:!0,what:!0,when:!0,where:!0,which:!0,"while":!0,who:!0,whom:!0,why:!0,will:!0,"with":!0,would:!0,yet:!0,you:!0,your:!0},t.stopWordFilter.stopWords=t.defaultStopWords,t.Pipeline.registerFunction(t.stopWordFilter,"stopWordFilter"),t.trimmer=function(e){if(null===e||void 0===e)throw new Error("token should not be undefined");return e.replace(/^\W+/,"").replace(/\W+$/,"")},t.Pipeline.registerFunction(t.trimmer,"trimmer"),t.InvertedIndex=function(){this.root={docs:{},df:0}},t.InvertedIndex.load=function(e){var t=new this;return t.root=e.root,t},t.InvertedIndex.prototype.addToken=function(e,t,n){for(var n=n||this.root,i=0;i<=e.length-1;){var o=e[i];o in n||(n[o]={docs:{},df:0}),i+=1,n=n[o]}var r=t.ref;n.docs[r]?n.docs[r]={tf:t.tf}:(n.docs[r]={tf:t.tf},n.df+=1)},t.InvertedIndex.prototype.hasToken=function(e){if(!e)return!1;for(var t=this.root,n=0;n<e.length;n++){if(!t[e[n]])return!1;t=t[e[n]]}return!0},t.InvertedIndex.prototype.getNode=function(e){if(!e)return null;for(var t=this.root,n=0;n<e.length;n++){if(!t[e[n]])return null;t=t[e[n]]}return t},t.InvertedIndex.prototype.getDocs=function(e){var t=this.getNode(e);return null==t?{}:t.docs},t.InvertedIndex.prototype.getTermFrequency=function(e,t){var n=this.getNode(e);return null==n?0:t in n.docs?n.docs[t].tf:0},t.InvertedIndex.prototype.getDocFreq=function(e){var t=this.getNode(e);return null==t?0:t.df},t.InvertedIndex.prototype.removeToken=function(e,t){if(e){var n=this.getNode(e);null!=n&&t in n.docs&&(delete n.docs[t],n.df-=1)}},t.InvertedIndex.prototype.expandToken=function(e,t,n){if(null==e||""==e)return[];var t=t||[];if(void 0==n&&(n=this.getNode(e),null==n))return t;n.df>0&&t.push(e);for(var i in n)"docs"!==i&&"df"!==i&&this.expandToken(e+i,t,n[i]);return t},t.InvertedIndex.prototype.toJSON=function(){return{root:this.root}},t.Configuration=function(e,n){var e=e||"";if(void 0==n||null==n)throw new Error("fields should not be null");this.config={};var i;try{i=JSON.parse(e),this.buildUserConfig(i,n)}catch(o){t.utils.warn("user configuration parse failed, will use default configuration"),this.buildDefaultConfig(n)}},t.Configuration.prototype.buildDefaultConfig=function(e){this.reset(),e.forEach(function(e){this.config[e]={boost:1,bool:"OR",expand:!1}},this)},t.Configuration.prototype.buildUserConfig=function(e,n){var i="OR",o=!1;if(this.reset(),"bool"in e&&(i=e.bool||i),"expand"in e&&(o=e.expand||o),"fields"in e)for(var r in e.fields)if(n.indexOf(r)>-1){var s=e.fields[r],u=o;void 0!=s.expand&&(u=s.expand),this.config[r]={boost:s.boost||0===s.boost?s.boost:1,bool:s.bool||i,expand:u}}else t.utils.warn("field name in user configuration not found in index instance fields");else this.addAllFields2UserConfig(i,o,n)},t.Configuration.prototype.addAllFields2UserConfig=function(e,t,n){n.forEach(function(n){this.config[n]={boost:1,bool:e,expand:t}},this)},t.Configuration.prototype.get=function(){return this.config},t.Configuration.prototype.reset=function(){this.config={}},lunr.SortedSet=function(){this.length=0,this.elements=[]},lunr.SortedSet.load=function(e){var t=new this;return t.elements=e,t.length=e.length,t},lunr.SortedSet.prototype.add=function(){var e,t;for(e=0;e<arguments.length;e++)t=arguments[e],~this.indexOf(t)||this.elements.splice(this.locationFor(t),0,t);this.length=this.elements.length},lunr.SortedSet.prototype.toArray=function(){return this.elements.slice()},lunr.SortedSet.prototype.map=function(e,t){return this.elements.map(e,t)},lunr.SortedSet.prototype.forEach=function(e,t){return this.elements.forEach(e,t)},lunr.SortedSet.prototype.indexOf=function(e){for(var t=0,n=this.elements.length,i=n-t,o=t+Math.floor(i/2),r=this.elements[o];i>1;){if(r===e)return o;e>r&&(t=o),r>e&&(n=o),i=n-t,o=t+Math.floor(i/2),r=this.elements[o]}return r===e?o:-1},lunr.SortedSet.prototype.locationFor=function(e){for(var t=0,n=this.elements.length,i=n-t,o=t+Math.floor(i/2),r=this.elements[o];i>1;)e>r&&(t=o),r>e&&(n=o),i=n-t,o=t+Math.floor(i/2),r=this.elements[o];return r>e?o:e>r?o+1:void 0},lunr.SortedSet.prototype.intersect=function(e){for(var t=new lunr.SortedSet,n=0,i=0,o=this.length,r=e.length,s=this.elements,u=e.elements;;){if(n>o-1||i>r-1)break;s[n]!==u[i]?s[n]<u[i]?n++:s[n]>u[i]&&i++:(t.add(s[n]),n++,i++)}return t},lunr.SortedSet.prototype.clone=function(){var e=new lunr.SortedSet;return e.elements=this.toArray(),e.length=e.elements.length,e},lunr.SortedSet.prototype.union=function(e){var t,n,i;this.length>=e.length?(t=this,n=e):(t=e,n=this),i=t.clone();for(var o=0,r=n.toArray();o<r.length;o++)i.add(r[o]);return i},lunr.SortedSet.prototype.toJSON=function(){return this.toArray()},function(e,t){"function"==typeof define&&define.amd?define(t):"object"==typeof exports?module.exports=t():e.elasticlunr=t()}(this,function(){return t})}();
    /** pdoc search index */const docs = [{"fullname": "ES", "modulename": "ES", "qualname": "", "type": "module", "doc": "<h2 id=\"environmental-sensing-package\"><strong><em>Environmental Sensing Package</em></strong></h2>\n\n<p>Created on Fri Dec 24 15:21:14 2021</p>\n\n<p>@author: philippe@loco-labs.io</p>\n\n<h1 id=\"why-a-project-for-environmental-data\">Why a project for Environmental Data ?</h1>\n\n<p>The project was born from the following observations:</p>\n\n<ul>\n<li>there is no standard format (apart from the Environmental Sensing Service Bluetooth) \nused by the sensors to transmit the information (binary and textual),</li>\n<li>there is no data exchange format presenting at the same time a temporal, \nspatial and physical component (apart from file formats),</li>\n<li>we spend a lot of energy converting this type of data to make it usable.</li>\n</ul>\n\n<h1 id=\"the-environmental-sensing-project\">The Environmental Sensing project</h1>\n\n<p>The ES project is made of :</p>\n\n<ul>\n<li>A data model that makes it possible to represent elementary observations \n(a simple one-off measurement), complex observations (multi-dimensions), \ndetailed levels of representation (for example, the evolution of a plume of smoke).</li>\n<li>Data formats adapted to interfaces (binary payload for networks, json for requests \nor for NoSQL API, files)</li>\n<li>A library of connectors for different uses (sensors, database, storage, networks, etc.) \nin diff\u00e9rents languages (python, C++)</li>\n<li>Bidirectional interfaces to data processing tools (eg Numpy, Xarray, GIS).</li>\n</ul>\n\n<p>It allows to :</p>\n\n<ul>\n<li>Facilitate the use and sharing of environmental data</li>\n<li>Standardize both data acquisition equipment (sensors) and processing applications,</li>\n<li>Implement a software architecture replacing all coding / decoding operations \n(interfaces) by the use of standard connectors,</li>\n<li>Respect and rely on the main existing standards</li>\n<li>Collectively share and develop a set of open-source connectors responding to \nall situations (platform)</li>\n</ul>\n\n<h1 id=\"main-principles\">Main principles</h1>\n\n<h2 id=\"standards\">Standards</h2>\n\n<p>The main standard about Environmental Data is the ISO-19156 \"observation and \nmeasurement\" standard :    </p>\n\n<p><em>\"This International Standard defines a conceptual schema for observations, and \nfor features involved in sampling when making observations. These provide models \nfor the exchange of information describing observation acts and their results, \nboth within and between different scientific and technical communities.\"</em> </p>\n\n<p>But this standard specifies that: </p>\n\n<p><em>\"ISO 19156 concerns only interfaces visible from the outside and\n does not impose any restrictions on the underlying implementations\"</em></p>\n\n<p>The other standards concern more restricted areas and are sometimes incompatible. \nThey often remain at a syntactic and non-semantic level.\nThe proposed data structure is based on existing standards that it complements \nby ensuring convergence:    </p>\n\n<p><img src=\"./ES/standard.png\" width=\"800\"></p>\n\n<h2 id=\"data-structure\">Data structure</h2>\n\n<p>In the ISO-19156 standard, an Observation is characterized by:</p>\n\n<ul>\n<li>\"observed property\": the observed property,</li>\n<li>\"feature of interest\": the object (most often a location) of the observation,</li>\n<li>\"procedure\": the information acquisition mode (sensor, model, etc.)</li>\n<li>\"result\": result of the observation or the measurement</li>\n</ul>\n\n<p>The result is a set of values or objects \u200b\u200breferenced according to the 3 dimensions:</p>\n\n<ul>\n<li>temporal,</li>\n<li>spatial,</li>\n<li>physical (observed property)</li>\n</ul>\n\n<p>In the ES project, the three dimensions are respected. An Observation object consists\nof five components : a Datation Object, a Location Object, a Property Object, a Result Object\nand a Parameter object.\nIt can be converted into a 3-dimensional matrix, each result being indexed by \ntemporal, spatial and physical values.</p>\n\n<p><img src=\"./ES/structure.png\" width=\"800\"></p>\n\n<p>Common properties (indicators) are associated with each Observation. \nThey allow processing to be performed on Observations without having to know \ntheir composition (e.g. bounding boxes, type of observation, volume, etc.).   </p>\n\n<h2 id=\"index\">Index</h2>\n\n<p><img src=\"./ES/index.png\" width=\"800\"></p>\n\n<p>In a Observation, the Result is associated with a Datation, a Location and a Property.\nIn the usual tabular representations (like Excel or csv) there is one row for each Result\nand a lot of columns for Datation, Location and Property.\nThis representation is simple and readable, but it duplicates the information and\n is not suitable for updates. </p>\n\n<p>In the ES project, we choose the indexed representation suitable for computer \nprocessing. Thus, the Result object is made up of its own attributes as well as\n an index to the Datation, Location and Property objects. </p>\n\n<h2 id=\"dimension\">Dimension</h2>\n\n<p><img src=\"./ES/dimension.png\" width=\"800\"></p>\n\n<p>A result is associated with a property, a location and a date. The Result Object \nis therefore indexed with three axes (dimension = 3). But there are two cases \nwhere the dimension is reduced:</p>\n\n<ul>\n<li>if an axis has only one value</li>\n<li>if two axes are coupled</li>\n</ul>\n\n<p>For example, if on a path we measure a property, the dimension is 1 (Location \nand Datation are coupled, Property has one value).</p>\n\n<p>This notion is important because it conditions the modes of representation\n (e.g., plot).</p>\n\n<h2 id=\"configuration-and-customization\">Configuration and customization</h2>\n\n<p>Parameters and additional information may be added at different levels:</p>\n\n<ul>\n<li>global : At the Observation level, we may add specific informations with specific \nkey / value e.g.:\n<ul>\n<li><em>{ 'type' : 'observation' ,<strong>'test campaign' : 'first'</strong>, \n'datation' : 'morning' , 'location' : 'paris' , 'property' : ' Temp' , \n'result' : 'high' }</em></li>\n</ul></li>\n<li>local : We may customize the 'name' attribute e.g.:\n<ul>\n<li><em>'datation' : [ { <strong>'first campaign'</strong> : '2021-01-01' } , { <strong>'second campaign'</strong> : ''2021-03-01' } ]</li>\n<li>'property' : [ { <strong>'inside'</strong> : 'Temp' } , { <strong>'outside'</strong> : 'Temp' } ]</em></li>\n</ul></li>\n<li>individual : Each ResultValue may be annotate e.g.:\n<ul>\n<li><em>'result' : { <strong>'first result'</strong> : 'high' }</li>\n<li>'result' : {<strong>'https://loco-philippe.github.io/ES.html'</strong> : 'high' }</em></li>\n</ul></li>\n</ul>\n\n<p>The PropertyValues are defined in a catalogue which may be specific. </p>\n\n<h2 id=\"observation-management\">Observation management</h2>\n\n<p>Some operations are available for Observation objects</p>\n\n<ul>\n<li><p>between two Observation :</p>\n\n<ul>\n<li>Addition function : The ResultValues are added</li>\n<li>Extend function : The axes are added (e.g. template Observation)</li>\n<li>Append function : An Observation is included as a ResultValue (e.g. tree structure)</li>\n</ul></li>\n</ul>\n\n<p><img src=\"./ES/extension.png\" width=\"800\"></p>\n\n<ul>\n<li><p>for one Observation :</p>\n\n<ul>\n<li>Sort function : changing the order of data according to the axes order</li>\n<li>Find function : selecting some data </li>\n<li>Full function : add empty ResultValue to complete an Observation</li>\n</ul></li>\n</ul>\n\n<p><img src=\"./ES/extraction.png\" width=\"800\"></p>\n\n<p>These operations make it possible to cut, group, restructure and classify the \nObservations.</p>\n\n<h2 id=\"json-interface\">Json interface</h2>\n\n<p>The JSON format is used for Observation interchange. The ObsJSON format support\n the Observation data model. This means that an Observation generated from a \n JSON format from another Observation is identical to this one.</p>\n\n<p>This format is defined in the \n<a href=\"https://github.com/loco-philippe/Environnemental-Sensing/blob/main/documentation/ObsJSON%20-%20Standard.pdf\" \ntarget=\"_blank\">ObsJSON document</a>.</p>\n\n<h2 id=\"binary-interface\">Binary interface</h2>\n\n<p>The binary payload is necessary for exchanges with LPWAN networks (e.g. LoRaWAN). \nThe payload should be as compact as possible to minimize the Time-on-Air \nand reduce power consumption (for battery operated) devices. For example, the maximum\nlenght of the payload is between 51 bytes and 222 bytes for LoRaWAN.</p>\n\n<p>To obtain this maximum length, limitations are imposed.</p>\n\n<p><img src=\"./ES/binary.png\" width=\"800\"></p>\n\n<p>The diagram above shows the structure of the payload.</p>\n\n<p><em>Note : The right side of the diagram explains the coding of the values. This coding \nis the same as that used by Bluetooth in the <a href=\n\"https://www.bluetooth.com/specifications/specs/environmental-sensing-service-1-0/\" \ntarget=\"_blank\">Environmental Sensing Service</a>.</em></p>\n\n<p>To obtain low payload, a specific process can be used (see below). It allows data\n to be sent in two stages: first send metadata, second (in operation use) send data.</p>\n\n<p><img src=\"./ES/sensor.png\" width=\"800\"></p>\n\n<h2 id=\"bluetooth-mapping\">Bluetooth mapping</h2>\n\n<p>The Environmental Sensing Service is a Bluetooth protocol for sensors. The data \nexposed in this protocol are compatible and consistent with the Observation data model. \nThus, Bluetooth data is automatically converted into Observation data.</p>\n\n<p>The diagram below shows the mapping of the two structures.</p>\n\n<p><img src=\"./ES/bluetooth.png\" width=\"800\"></p>\n\n<h2 id=\"xarray-mapping\">Xarray mapping</h2>\n\n<p>Xarray is very powerful to analyze and process multi-dimensional data. Xarray \nshare the same principle as Observation: indexed multi-dimensional data. Thus, \nit's natural du use Xarray if you want to analyze Observation data.</p>\n\n<p>The difference between Observation and Xarray is that Xarray uses matrix data and \nObservation uses only indexed data. Therefore, to transfer Observation data to Xarray \nwe must complete data with 'nan' value to obtain a complete matrix with the right \ndimension (1, 2 or 3).</p>\n\n<p>The diagram below shows the mapping of the two structures.</p>\n\n<p><img src=\"./ES/xarray.png\" width=\"800\"></p>\n\n<h1 id=\"getting-started\">Getting Started</h1>\n\n<p>The code used, the results and the explanations are provided through \"Jupyter \nNotebook\" indicated in link in each chapter.\nThe Notebook files are \n<a href=\"https://github.com/loco-philippe/loco-philippe.github.io/tree/main/Example\" target=\"_blank\">\nstored in Github</a> and can be replayed.</p>\n\n<h2 id=\"first-observation\">First Observation</h2>\n\n<p>This chapter explain you \n<a href=\"./Example/first_observation.html\" target=\"_blank\">(see the page here)</a> :</p>\n\n<ul>\n<li>how to create a simple and more complex Observation Object</li>\n<li>the different view of the data</li>\n<li>how the ObsJSON is structured </li>\n</ul>\n\n<h2 id=\"observation-for-sensor\">Observation for sensor</h2>\n\n<p>A sensor sends data to a server with a specific protocol. The server stores and processes the data.\nThe sensor how use TCP/IP sends the data with ObsJSON format (see above).\nThis chapter introduces you to the to binary interface and explain you:\n<a href=\"./Example/sensor_observation.html\" target=\"_blank\">(see the page here)</a> :</p>\n\n<ul>\n<li>how to encode and decode binary data</li>\n<li>the processes to obtain low data as explain in the \"Binary interface\" chapter</li>\n</ul>\n\n<h2 id=\"dimension-concept\">Dimension concept</h2>\n\n<p>The dimension is an important concept to understand (see chapter above). </p>\n\n<p>In this example, we show you Observations with differents dimensions (1 to 3).</p>\n\n<p>We also present how ResultValue without index can be loaded with the 'order' parameter.</p>\n\n<p><a href=\"./Example/dimension.html\" target=\"_blank\">(see the page here)</a> :</p>\n\n<h2 id=\"observation-management-2\">Observation management</h2>\n\n<h1 id=\"quick-overview\">Quick overview</h1>\n\n<h2 id=\"create-an-observation\">Create an Observation</h2>\n\n<h3 id=\"measuring-station\">Measuring station</h3>\n\n<h3 id=\"mobile-sensor\">Mobile sensor</h3>\n\n<h3 id=\"simulation\">Simulation</h3>\n\n<h3 id=\"access-information\">Access information</h3>\n\n<h3 id=\"visualize-an-observation\">Visualize an Observation</h3>\n\n<h2 id=\"generate-an-exchange-format\">Generate an Exchange format</h2>\n\n<h3 id=\"binary-format\">Binary format</h3>\n\n<h3 id=\"json-format\">Json format</h3>\n\n<h3 id=\"no-sql-format\">No SQL format</h3>\n\n<h2 id=\"managing-observations\">Managing Observations</h2>\n\n<h3 id=\"add\">Add</h3>\n\n<h3 id=\"sort\">Sort</h3>\n\n<h3 id=\"aggregation\">Aggregation</h3>\n\n<h2 id=\"interface\">Interface</h2>\n\n<h3 id=\"numpy-export\">Numpy export</h3>\n\n<h3 id=\"xarray-export\">Xarray export</h3>\n\n<h3 id=\"storage\">Storage</h3>\n\n<h1 id=\"developers-documentation\">Developers documentation</h1>\n\n<h2 id=\"data-model\">Data model</h2>\n\n<p>An <code>ESObservation.Observation</code> is an object representing a set of information having\nspatial and temporal characteristics associated with measurable or observable\n properties.\n<img src=\"./ES/ESclasses.png\" width=\"800\"></p>\n\n<h2 id=\"what-are-the-es-classes\">What are the ES classes ?</h2>\n\n<p>The ES functions are divided according to the class hierarchy below:</p>\n\n<p><img src=\"./ES/EShierarchie.png\" width=\"800\"></p>\n\n<p>Modules contain the following classes:</p>\n\n<ul>\n<li>ESObservation : <code>ES.ESObservation.Observation</code></li>\n<li>ESValue : <code>ES.ESValue.DatationValue</code>, <code>ES.ESValue.LocationValue</code>, \n<code>ES.ESValue.PropertyValue</code>, <code>ES.ESValue.ResultValue</code>, <code>ES.ESValue.ESValue</code></li>\n<li>ESconstante : <code>ES.ESconstante.Es</code>.</li>\n</ul>\n"}, {"fullname": "ES.ESObservation", "modulename": "ES.ESObservation", "qualname": "", "type": "module", "doc": "<p>Created on Tue Aug  3 23:40:06 2021</p>\n\n<p>@author: Philippe@loco-labs.io</p>\n\n<p>The <code>ES.ESObservation</code> module contains the main class\nof Environmental Sensing : <code>Observation</code> class.</p>\n"}, {"fullname": "ES.ESObservation.Observation", "modulename": "ES.ESObservation", "qualname": "Observation", "type": "class", "doc": "<p>An <code>Observation</code> is made up of <code>ES.ilist</code> object which describe the axes of this object.</p>\n\n<p><em>Attributes (for @property see methods)</em> :</p>\n\n<ul>\n<li><strong>option</strong> : Dictionnary with options</li>\n<li><strong>ilist</strong> : Ilist object (data and axes)</li>\n<li><strong>name</strong> : textual description</li>\n<li><strong>mAtt</strong> : namedValue dictionnary (internal parameters)</li>\n<li><strong>parameter</strong> : namedValue dictionnary (external data)</li>\n</ul>\n\n<p>The methods defined in this class are : </p>\n\n<p><em>property (getters)</em></p>\n\n<ul>\n<li><code>Observation.axes</code></li>\n<li><code>Observation.bounds</code></li>\n<li><code>Observation.complet</code></li>\n<li><code>Observation.consistent</code></li>\n<li><code>Observation.dimension</code></li>\n<li><code>Observation.json</code></li>\n<li><code>Observation.jsonFeature</code></li>\n<li><code>Observation.nValueObs</code></li>\n<li><code>Observation.rate</code></li>\n<li><code>Observation.score</code></li>\n<li><code>Observation.setDatation</code>    </li>\n<li><code>Observation.setLocation</code></li>\n<li><code>Observation.setProperty</code></li>\n<li><code>Observation.setResult</code></li>\n<li><code>Observation.typeObs</code></li>\n</ul>\n\n<p><em>add value</em></p>\n\n<ul>\n<li><code>Observation.addAttributes</code></li>\n<li><code>Observation.append</code></li>\n<li><code>Observation.appendList</code></li>\n<li><code>Observation.appendObs</code></li>\n</ul>\n\n<p><em>update value</em></p>\n\n<ul>\n<li><code>Observation.majList</code></li>\n<li><code>Observation.majValue</code></li>\n</ul>\n\n<p><em>selecting</em></p>\n\n<ul>\n<li><code>Observation.indexLoc</code></li>\n<li><code>Observation.iLoc</code></li>\n<li><code>Observation.loc</code></li>\n</ul>\n\n<p><em>management</em></p>\n\n<ul>\n<li><code>Observation.extend</code></li>\n<li><code>Observation.full</code></li>\n<li><code>Observation.sort</code></li>\n<li><code>Observation.find</code></li>\n</ul>\n\n<p><em>visualization</em></p>\n\n<ul>\n<li><code>Observation.choropleth</code></li>\n<li><code>Observation.voxel</code></li>\n<li><code>Observation.plot</code></li>\n<li><code>Observation.view</code></li>\n</ul>\n\n<p><em>exports - imports</em></p>\n\n<ul>\n<li><code>Observation.to_csv</code></li>\n<li><code>Observation.to_dataFrame</code></li>\n<li><code>Observation.to_numpy</code></li>\n<li><code>Observation.to_xarray</code></li>\n<li><code>Observation.to_json</code></li>\n<li><code>Observation.from_json</code></li>\n<li><code>Observation.to_bytes</code>              # \u00e0 voir</li>\n<li><code>Observation.from_bytes</code>            # \u00e0 voir</li>\n</ul>\n"}, {"fullname": "ES.ESObservation.Observation.__init__", "modulename": "ES.ESObservation", "qualname": "Observation.__init__", "type": "function", "doc": "<p>Several Observation creation modes :</p>\n\n<ul>\n<li>Observation(dictESValue1, dictESValue2, ...) where dictESValue = {ESValuename : value}</li>\n<li>Observation({ObsDict}) where ObsDict is a dictionnary with the same data as an ObsJSON</li>\n<li>Observation(ObsJSON) where ObsJSON is a string with the ObsJSON format</li>\n<li>Observation([ESSetDatation, ESSetLocation, ESSetProperty, ESSetResult]) where ESSet is a list of ESValue :\n[ESValue1, ESValue2,...] or [ESValue] or ESValue</li>\n<li>Observation(datation=ESSetDatation, location=ESSetLocation,\n          property=ESSetProperty, result=ESSetResult)</li>\n</ul>\n\n<p><em>Note : the parameters 'idxref' and 'order' are used only when an ESSetResult without Index is in arguments. \n'order' indicates the order for the Index creation and 'idxref' the linked index (0 for Datation, 1 for Location, 2 for Property).</em></p>\n", "parameters": ["self", "args", "order", "idxref", "kwargs"], "funcdef": "def"}, {"fullname": "ES.ESObservation.Observation.axes", "modulename": "ES.ESObservation", "qualname": "Observation.axes", "type": "variable", "doc": "<p><strong>list of integer (@property)</strong> : list of independant axes in the Observation\n(0 for Datation, 1 for Location, 2 for Property)</p>\n"}, {"fullname": "ES.ESObservation.Observation.bounds", "modulename": "ES.ESObservation", "qualname": "Observation.bounds", "type": "variable", "doc": "<p><strong>list of <code>ES.ESValue</code> (@property)</strong> : <code>ES.ESValue</code> bounding box for each axis.</p>\n"}, {"fullname": "ES.ESObservation.Observation.complet", "modulename": "ES.ESObservation", "qualname": "Observation.complet", "type": "variable", "doc": "<p><strong>boolean (@property)</strong> : True if self.ilist is complete (if the number of ResultValue is consistent with \nthe number of LocationValue, DatationValue and PropertyValue)</p>\n"}, {"fullname": "ES.ESObservation.Observation.consistent", "modulename": "ES.ESObservation", "qualname": "Observation.consistent", "type": "variable", "doc": "<p><strong>boolean (@property)</strong> : True if Observation is consistent (no duplicate index)</p>\n"}, {"fullname": "ES.ESObservation.Observation.dimension", "modulename": "ES.ESObservation", "qualname": "Observation.dimension", "type": "variable", "doc": "<p><strong>integer (@property)</strong> : number of independant axes in the Observation</p>\n"}, {"fullname": "ES.ESObservation.Observation.json", "modulename": "ES.ESObservation", "qualname": "Observation.json", "type": "variable", "doc": "<p><strong>string (@property)</strong> : JSON Observation (ObsJSON format) whit index \nand whitout informations</p>\n"}, {"fullname": "ES.ESObservation.Observation.jsonFeature", "modulename": "ES.ESObservation", "qualname": "Observation.jsonFeature", "type": "variable", "doc": "<p><strong>string (@property)</strong> : \"FeatureCollection\" with ESSetLocation geometry</p>\n"}, {"fullname": "ES.ESObservation.Observation.nValueObs", "modulename": "ES.ESObservation", "qualname": "Observation.nValueObs", "type": "variable", "doc": "<p><strong>list (@property)</strong> : lenght of axes [datation, location, properety, result].</p>\n"}, {"fullname": "ES.ESObservation.Observation.rate", "modulename": "ES.ESObservation", "qualname": "Observation.rate", "type": "variable", "doc": "<p><strong>float (@property)</strong> : ratio number measure / number measure if complete</p>\n"}, {"fullname": "ES.ESObservation.Observation.score", "modulename": "ES.ESObservation", "qualname": "Observation.score", "type": "variable", "doc": "<p><strong>integer (@property)</strong> : Observation type (calculated from dimension , nValueObs and idxref). \nThe score is a codification of the number of ESValue for each axis. \nE.g., score=122 means one PropertyValue (1), several LocationValue (2), \nseveral DatationValue (2)</p>\n"}, {"fullname": "ES.ESObservation.Observation.setDatation", "modulename": "ES.ESObservation", "qualname": "Observation.setDatation", "type": "variable", "doc": "<p><strong>list (@property)</strong> : list of values in the datation axis</p>\n"}, {"fullname": "ES.ESObservation.Observation.setLocation", "modulename": "ES.ESObservation", "qualname": "Observation.setLocation", "type": "variable", "doc": "<p><strong>list (@property)</strong> : list of values in the location axis</p>\n"}, {"fullname": "ES.ESObservation.Observation.setProperty", "modulename": "ES.ESObservation", "qualname": "Observation.setProperty", "type": "variable", "doc": "<p><strong>list (@property)</strong> : list of values in the property axis</p>\n"}, {"fullname": "ES.ESObservation.Observation.setResult", "modulename": "ES.ESObservation", "qualname": "Observation.setResult", "type": "variable", "doc": "<p><strong>list (@property)</strong> : list of values in the result axis</p>\n"}, {"fullname": "ES.ESObservation.Observation.typeObs", "modulename": "ES.ESObservation", "qualname": "Observation.typeObs", "type": "variable", "doc": "<p><strong>string (@property)</strong> : Observation type (calculated from the score)</p>\n"}, {"fullname": "ES.ESObservation.Observation.addAttributes", "modulename": "ES.ESObservation", "qualname": "Observation.addAttributes", "type": "function", "doc": "<p>Add informations attached to <code>Observation</code></p>\n\n<p><em>Parameters</em></p>\n\n<ul>\n<li><strong>js</strong> : Dict - Keys are Observation keys (dict mAtt) or users keys (dict parameter).</li>\n</ul>\n\n<p><em>Returns</em></p>\n\n<ul>\n<li><strong>None</strong></li>\n</ul>\n", "parameters": ["self", "js"], "funcdef": "def"}, {"fullname": "ES.ESObservation.Observation.append", "modulename": "ES.ESObservation", "qualname": "Observation.append", "type": "function", "doc": "<p>Add a new <code>ES.ESValue.ResultValue</code></p>\n\n<p><em>Parameters</em></p>\n\n<ul>\n<li><p><strong>dat, loc, prp</strong> :</p>\n\n<p>integer for the index of an existant <code>ES.ESValue</code>\nor compatible Value for an existing <code>ES.ESValue</code>\nor compatible Value for a new <code>ES.ESValue</code></p></li>\n<li><p><strong>res</strong> : new <code>ES.ESValue.ResultValue</code></p></li>\n<li><strong>unique</strong> : boolean (default False), if False, duplicate index is allowed</li>\n<li><strong>equal</strong> : string (default 'full'), if 'full', two ESValue are equal if all the attributes are equal,\nif 'name', two ESValue are equal if only the names are equal.</li>\n</ul>\n\n<p><em>Returns</em></p>\n\n<ul>\n<li><strong>int</strong> : last index in the result valueList.</li>\n</ul>\n", "parameters": ["self", "dat", "loc", "prp", "res", "unique", "equal"], "funcdef": "def"}, {"fullname": "ES.ESObservation.Observation.appendList", "modulename": "ES.ESObservation", "qualname": "Observation.appendList", "type": "function", "doc": "<p>Add a list of new <code>ES.ESValue.ResultValue</code> </p>\n\n<p><em>Parameters</em></p>\n\n<ul>\n<li><strong>listVal</strong> : list of ES.ESValue.ResultValue compatible type</li>\n<li><strong>listDat, listLoc, listPrp</strong> : list of index or Value to define a <code>ES.ESValue</code></li>\n<li><strong>unique</strong> : boolean (default False), if False, duplicate index is allowed</li>\n<li><strong>equal</strong> : string (default 'full'), if 'full', two ESValue are equal if all the attributes are equal,\nif 'name', two ESValue are equal if only the names are equal.</li>\n</ul>\n\n<p><em>Returns</em> </p>\n\n<ul>\n<li><strong>None</strong></li>\n</ul>\n", "parameters": ["self", "listDat", "listLoc", "listPrp", "listVal", "unique", "equal"], "funcdef": "def"}, {"fullname": "ES.ESObservation.Observation.appendObs", "modulename": "ES.ESObservation", "qualname": "Observation.appendObs", "type": "function", "doc": "<p>Add an <code>Observation</code> as a new <code>ES.ESValue.ResultValue</code> with bounding box for the other <code>ES.ESValue</code></p>\n\n<p><em>Parameters</em></p>\n\n<ul>\n<li><strong>obs</strong> : Observation</li>\n</ul>\n\n<p><em>Returns</em></p>\n\n<ul>\n<li><strong>int</strong> : last index in the <code>Observation</code></li>\n</ul>\n", "parameters": ["self", "obs", "unique", "equal"], "funcdef": "def"}, {"fullname": "ES.ESObservation.Observation.choropleth", "modulename": "ES.ESObservation", "qualname": "Observation.choropleth", "type": "function", "doc": "<p>Display <code>Observation</code> on a folium.Map (only with dim=1)</p>\n\n<ul>\n<li><strong>name</strong> : String, optionnal (default 'choropleth') - Name of the choropleth</li>\n</ul>\n\n<p><em>Returns</em></p>\n\n<ul>\n<li><strong>folium.Map</strong></li>\n</ul>\n", "parameters": ["self", "name"], "funcdef": "def"}, {"fullname": "ES.ESObservation.Observation.extend", "modulename": "ES.ESObservation", "qualname": "Observation.extend", "type": "function", "doc": "<p>Copy axis from other <code>Observation</code> to self <code>Observation</code> (if it daesn't exist)</p>\n\n<p><em>Parameters</em></p>\n\n<ul>\n<li><strong>other</strong> : object Observation to copy</li>\n</ul>\n\n<p><em>Returns</em></p>\n\n<ul>\n<li><strong>None</strong></li>\n</ul>\n", "parameters": ["self", "classES", "listValue", "index"], "funcdef": "def"}, {"fullname": "ES.ESObservation.Observation.from_json", "modulename": "ES.ESObservation", "qualname": "Observation.from_json", "type": "function", "doc": "<p>Complete an empty <code>Observation</code> with json data. </p>\n\n<p><em>Parameters</em></p>\n\n<ul>\n<li><strong>js</strong> : string - ObsJSON data</li>\n</ul>\n\n<p><em>Returns</em></p>\n\n<ul>\n<li><strong>None</strong></li>\n</ul>\n", "parameters": ["self", "js"], "funcdef": "def"}, {"fullname": "ES.ESObservation.Observation.full", "modulename": "ES.ESObservation", "qualname": "Observation.full", "type": "function", "doc": "<p>Add empty <code>ES.ESValue.ResultValue</code> to have a 'complete' <code>Observation</code></p>\n\n<p><em>Parameters</em></p>\n\n<ul>\n<li><strong>inplace</strong> : boolean (default False) - If True, add values to \nObservation, else return new Observation.</li>\n<li><strong>minind</strong> : boolean (default True) - If True, independent axes are \ncompleted with fillvalue, else all axes are completed</li>\n<li><strong>fillvalue</strong> : value used to complete the Observation</li>\n</ul>\n\n<p><em>Returns</em></p>\n\n<ul>\n<li><strong>Observation</strong> : new observation if not inplace, else None.</li>\n</ul>\n", "parameters": ["self", "minind", "fillvalue", "inplace"], "funcdef": "def"}, {"fullname": "ES.ESObservation.Observation.iLoc", "modulename": "ES.ESObservation", "qualname": "Observation.iLoc", "type": "function", "doc": "<p>Return the <code>ES.ESValue</code> values for an <code>ES.ilist.Ilist</code> index. </p>\n\n<p><em>Parameters</em></p>\n\n<ul>\n<li><strong>idat, iloc, iprp</strong> : <code>ES.ilist.Ilist</code> index value</li>\n<li><strong>json</strong> : Boolean (default True) - Return JSON string if True</li>\n</ul>\n\n<p><em>Returns</em></p>\n\n<ul>\n<li><strong>dict</strong> : dict or JSON of each ES.ESValue (dat, loc, prp, res)</li>\n</ul>\n", "parameters": ["self", "idat", "iloc", "iprp", "json"], "funcdef": "def"}, {"fullname": "ES.ESObservation.Observation.indexLoc", "modulename": "ES.ESObservation", "qualname": "Observation.indexLoc", "type": "function", "doc": "<p>Return the index of a <code>ES.ESValue</code> in a <code>ES.ilist.Ilist</code> index</p>\n\n<p><em>Parameters</em></p>\n\n<ul>\n<li><strong>esValue</strong> : <code>ES.ESValue</code>, </li>\n<li><strong>string</strong> : Boolean (default True) - Return type (JSON if True, dict if False)</li>\n</ul>\n\n<p><em>Returns</em></p>\n\n<ul>\n<li><strong>dict or string</strong> : {'full' : indFull, 'name' : indName, 'value' : indValue }\n<ul>\n<li>indFull : integer for the first index value with name and value equality</li>\n<li>indName : integer for the first index value with name equality</li>\n<li>indFull : integer for the first index value with value equality</li>\n</ul></li>\n</ul>\n", "parameters": ["self", "esValue", "string"], "funcdef": "def"}, {"fullname": "ES.ESObservation.Observation.loc", "modulename": "ES.ESObservation", "qualname": "Observation.loc", "type": "function", "doc": "<p>Return the <code>ES.ESValue</code> values for a DatationValue, LocationValue, PropertyValue. </p>\n\n<p><em>Parameters</em></p>\n\n<ul>\n<li><strong>valdat, valloc, valprp</strong> : DatationValue, LocationValue, PropertyValue</li>\n</ul>\n\n<p><em>Returns</em></p>\n\n<ul>\n<li><strong>dict</strong> : dict or JSON of each ES.ESValue (dat, loc, prp, res)</li>\n</ul>\n", "parameters": ["self", "valDat", "valLoc", "valPrp", "json"], "funcdef": "def"}, {"fullname": "ES.ESObservation.Observation.majList", "modulename": "ES.ESObservation", "qualname": "Observation.majList", "type": "function", "doc": "<p>Modify an attribute (name or value) in an axis list.</p>\n\n<p><em>Parameters</em></p>\n\n<ul>\n<li><strong>ValueClass</strong> : class ES.ESValue </li>\n<li><strong>listVal</strong> : new list of values</li>\n<li><strong>name</strong> : boolean (default True) - True for 'name' and False for 'value'</li>\n</ul>\n\n<p><em>Returns</em></p>\n\n<ul>\n<li><strong>None</strong></li>\n</ul>\n", "parameters": ["self", "ValueClass", "listVal", "name"], "funcdef": "def"}, {"fullname": "ES.ESObservation.Observation.majValue", "modulename": "ES.ESObservation", "qualname": "Observation.majValue", "type": "function", "doc": "<p>Update the value of an existing <code>ES.ESValue</code> by a new <code>ES.ESValue</code></p>\n\n<p><em>Parameters</em></p>\n\n<ul>\n<li><strong>esValue</strong> : ESValue to update</li>\n<li><strong>newEsValue</strong> : new ESValue</li>\n<li><strong>equal</strong> : criteria used to compare ESValue ('full', 'name', 'value')</li>\n</ul>\n\n<p><em>Returns</em></p>\n\n<ul>\n<li><strong>Int</strong> : index in the ESSet valueList.</li>\n</ul>\n", "parameters": ["self", "esValue", "newEsValue", "equal"], "funcdef": "def"}, {"fullname": "ES.ESObservation.Observation.plot", "modulename": "ES.ESObservation", "qualname": "Observation.plot", "type": "function", "doc": "<p>This function visualize an <code>Observation</code> with line or colormesh.</p>\n\n<p><em>Parameters</em></p>\n\n<ul>\n<li><strong>switch</strong> : Boolean (default False) - Switch between x and y axis.        </li>\n<li><strong>line</strong> : Boolean (default True) - Choice line or colormesh.</li>\n<li><strong>sort</strong> : Boolean (defaut True) - Sort along an axis or not.</li>\n<li><strong>size</strong> : Int (default 5) - Size of the figure to plot.</li>\n<li><strong>marker</strong> : Char (default 'o') - Symbol for each point.</li>\n<li><strong>maxname</strong> : String (default 20) - maximum length for string</li>\n</ul>\n\n<p><em>Returns</em></p>\n\n<ul>\n<li><strong>None</strong></li>\n</ul>\n", "parameters": ["self", "switch", "line", "sort", "size", "marker", "maxname"], "funcdef": "def"}, {"fullname": "ES.ESObservation.Observation.sort", "modulename": "ES.ESObservation", "qualname": "Observation.sort", "type": "function", "doc": "<p>Modify the order of <code>ES.ESValue</code>.</p>\n\n<p><em>Parameters</em></p>\n\n<ul>\n<li><strong>order</strong> : list (default []) - Ordered list to follow (0:dat, 1:loc, 2:prp).</li>\n<li><strong>reindex</strong> : boolean (default True) - calculate new index values.</li>\n</ul>\n\n<p><em>Returns</em></p>\n\n<ul>\n<li><strong>None</strong></li>\n</ul>\n", "parameters": ["self", "order", "reindex"], "funcdef": "def"}, {"fullname": "ES.ESObservation.Observation.to_csv", "modulename": "ES.ESObservation", "qualname": "Observation.to_csv", "type": "function", "doc": "<p>Generate csv file to display <code>Observation</code> data.</p>\n\n<p><em>Parameters</em></p>\n\n<ul>\n<li><strong>file</strong> : string - file name (with path)</li>\n<li><strong>json</strong> : boolean (default True) - Display json for <code>ES.ESValue</code></li>\n<li><strong>name</strong> : boolean (default True) - Display name for <code>ES.ESValue</code></li>\n<li><strong>dat</strong>  : boolean (default True) - Display value for <code>ES.ESValue.DatationValue</code></li>\n<li><strong>loc</strong>  : boolean (default True) - Display value for <code>ES.ESValue.LocationValue</code></li>\n<li><strong>prp</strong>  : boolean (default True) - Display value for <code>ES.ESValue.PropertyValue</code></li>\n<li><strong>res</strong>  : boolean (default True) - Display value for <code>ES.ESValue.ResultValue</code></li>\n<li><strong>lenres</strong> : int (default 0) - Number of raws (all if 0)</li>\n</ul>\n\n<p><em>Returns</em></p>\n\n<ul>\n<li><strong>None</strong></li>\n</ul>\n", "parameters": ["self", "file", "json", "name", "dat", "loc", "prp", "res", "lenres"], "funcdef": "def"}, {"fullname": "ES.ESObservation.Observation.to_dataFrame", "modulename": "ES.ESObservation", "qualname": "Observation.to_dataFrame", "type": "function", "doc": "<p>Convert <code>Observation</code> to pandas.DataFrame with the smallest dimension. </p>\n\n<p><em>Parameters</em></p>\n\n<ul>\n<li><strong>info</strong> : Boolean (default False) - Generate a specific Coords with Observation characteristics.</li>\n<li><strong>numeric</strong> : Boolean (default False) - Generate a numeric DataArray.Values. </li>\n<li><strong>ind</strong> : String (default 'axe') - 'axe' only independant axes, 'all' : all the axes.</li>\n<li><strong>fillvalue</strong> : Object (default '?') used to complete result</li>\n<li><strong>func</strong> : String (default function identity) - Name of the function to apply to the result values</li>\n<li><strong>name</strong> : String (default 'Observation') - Name of the Dataframe</li>\n</ul>\n\n<p><em>Returns</em></p>\n\n<ul>\n<li><strong>pandas.DataFrame</strong></li>\n</ul>\n", "parameters": ["self", "info", "numeric", "ind", "fillvalue", "func", "name"], "funcdef": "def"}, {"fullname": "ES.ESObservation.Observation.to_json", "modulename": "ES.ESObservation", "qualname": "Observation.to_json", "type": "function", "doc": "<p>Export in Json format. </p>\n\n<p><em>Parameters (optional)</em></p>\n\n<ul>\n<li><strong>json_string</strong>    : Boolean - return format (string or dict)</li>\n<li><strong>json_res_index</strong> : Boolean - include index for ResultValue</li>\n<li><strong>json_param</strong>     : Boolean - include ESObs Parameter</li>\n<li><strong>json_info</strong>      : Boolean - include ESObs Information with all information</li>\n<li><strong>json_info_type</strong> : Boolean - include in ESObs Information the type of ESObs</li>\n<li><strong>json_info_nval</strong> : Boolean - include in ESObs Information the lenght of ESObs</li>\n<li><strong>json_info_box</strong>  : Boolean - include in ESObs Information the bounding box</li>\n<li><strong>json_info_other</strong>: Boolean - include in ESObs Information the other information</li>\n</ul>\n\n<p><em>Returns</em></p>\n\n<ul>\n<li><strong>string or dict</strong> : Json string or dict</li>\n</ul>\n", "parameters": ["self", "kwargs"], "funcdef": "def"}, {"fullname": "ES.ESObservation.Observation.to_numpy", "modulename": "ES.ESObservation", "qualname": "Observation.to_numpy", "type": "function", "doc": "<p>Convert <code>Observation</code> to Numpy array. </p>\n\n<p><em>Parameters</em></p>\n\n<ul>\n<li><strong>ind</strong> : String (default 'axe') - 'axe' only independant axes, 'all' : all the axes, 'flat' : one dimension</li>\n<li><strong>fillvalue</strong> : Object (default '?') used to complete result</li>\n<li><strong>func</strong> : String (default function identity) - Name of the function to apply to the result values</li>\n</ul>\n\n<p><em>Returns</em></p>\n\n<ul>\n<li><strong>Numpy array</strong></li>\n</ul>\n", "parameters": ["self", "func", "ind", "fillvalue", "kwargs"], "funcdef": "def"}, {"fullname": "ES.ESObservation.Observation.to_xarray", "modulename": "ES.ESObservation", "qualname": "Observation.to_xarray", "type": "function", "doc": "<p>Convert <code>Observation</code> to DataArray. </p>\n\n<p><em>Parameters</em></p>\n\n<ul>\n<li><strong>info</strong> : Boolean (default False) - Generate a specific Coords with Observation characteristics.</li>\n<li><strong>ind</strong> : String (default 'axe') - 'axe' only independant axes, 'all' : all the axes, 'flat' : one dimension</li>\n<li><strong>fillvalue</strong> : Object (default '?') used to complete result</li>\n<li><strong>func</strong> : String (default function identity) - Name of the function applied to each <code>ES.ESValue.ResultValue</code></li>\n<li><strong>numeric</strong> : Boolean (default False) - Generate a numeric DataArray.Values. </li>\n<li><strong>name</strong> : String (default 'Observation') - Name of the xArray</li>\n<li><strong>maxname</strong> : String (default 20) - maximum length for string</li>\n</ul>\n\n<p><em>Returns</em></p>\n\n<ul>\n<li><strong>xarray.DataArray</strong></li>\n</ul>\n", "parameters": ["self", "info", "numeric", "ind", "fillvalue", "name", "maxname", "func", "kwargs"], "funcdef": "def"}, {"fullname": "ES.ESObservation.Observation.view", "modulename": "ES.ESObservation", "qualname": "Observation.view", "type": "function", "doc": "<p>Generate tabular list to display <code>Observation</code> data.</p>\n\n<p><em>Parameters</em></p>\n\n<ul>\n<li><strong>name</strong> : boolean (default True) - Display name for <code>ES.ESValue</code></li>\n<li><strong>dat</strong>  : boolean (default True) - Display value for <code>ES.ESValue.DatationValue</code></li>\n<li><strong>loc</strong>  : boolean (default True) - Display value for <code>ES.ESValue.LocationValue</code></li>\n<li><strong>prp</strong>  : boolean (default True) - Display value for <code>ES.ESValue.PropertyValue</code></li>\n<li><strong>lenres</strong> : Integer (default : 0) - Number of raws (all if 0)</li>\n<li><strong>width</strong> : Integer (default 15) - Number of characters displayed for each attribute.</li>\n<li><strong>sep</strong> : Char (default '_') - Separation between header and raws</li>\n</ul>\n\n<p><em>Returns</em></p>\n\n<ul>\n<li><strong>None</strong></li>\n</ul>\n", "parameters": ["self", "name", "dat", "loc", "prp", "lenres", "width", "sep"], "funcdef": "def"}, {"fullname": "ES.ESObservation.Observation.vList", "modulename": "ES.ESObservation", "qualname": "Observation.vList", "type": "function", "doc": "<p>Generate a list of value for an axis.</p>\n\n<p><em>Parameters</em></p>\n\n<ul>\n<li><strong>idxname</strong> : string - Name of the axis (datation, location, property, result)</li>\n<li><strong>func</strong> : String (default function identity) - Name of the function applied to each <code>ES.ESValue</code></li>\n</ul>\n\n<p><em>Returns</em></p>\n\n<ul>\n<li><strong>list</strong> : list of the values</li>\n</ul>\n", "parameters": ["self", "idxname", "func"], "funcdef": "def"}, {"fullname": "ES.ESObservation.Observation.vListName", "modulename": "ES.ESObservation", "qualname": "Observation.vListName", "type": "function", "doc": "<p>Generate a list of value name for an axis.</p>\n\n<p><em>Parameters</em></p>\n\n<ul>\n<li><strong>idxname</strong> : string - Name of the axis (datation, location, property, result)</li>\n</ul>\n\n<p><em>Returns</em></p>\n\n<ul>\n<li><strong>list</strong> : list of the value name</li>\n</ul>\n", "parameters": ["self", "idxname"], "funcdef": "def"}, {"fullname": "ES.ESObservation.Observation.vListSimple", "modulename": "ES.ESObservation", "qualname": "Observation.vListSimple", "type": "function", "doc": "<p>Generate a list of simple value (see <code>ES.ESValue</code> vSimple method) for an axis.</p>\n\n<p><em>Parameters</em></p>\n\n<ul>\n<li><strong>idxname</strong> : string - Name of the axis (datation, location, property, result)</li>\n</ul>\n\n<p><em>Returns</em></p>\n\n<ul>\n<li><strong>list</strong> : list of the simple value</li>\n</ul>\n", "parameters": ["self", "idxname"], "funcdef": "def"}, {"fullname": "ES.ESObservation.Observation.vListValue", "modulename": "ES.ESObservation", "qualname": "Observation.vListValue", "type": "function", "doc": "<p>Generate a list of value (see <code>ES.ESValue</code> getValue method) for an axis.</p>\n\n<p><em>Parameters</em></p>\n\n<ul>\n<li><strong>idxname</strong> : string - Name of the axis (datation, location, property, result)</li>\n</ul>\n\n<p><em>Returns</em></p>\n\n<ul>\n<li><strong>list</strong> : list of the values</li>\n</ul>\n", "parameters": ["self", "idxname"], "funcdef": "def"}, {"fullname": "ES.ESObservation.Observation.voxel", "modulename": "ES.ESObservation", "qualname": "Observation.voxel", "type": "function", "doc": "<p>Visualize <code>ES.ESValue.ResultValue</code> in a cube with voxels.</p>\n\n<p><em>Parameters</em></p>\n\n<ul>\n<li><strong>sort</strong> : Boolean (default False) - Sort along axis.</li>\n</ul>\n\n<p><em>Returns</em></p>\n\n<ul>\n<li><strong>None</strong></li>\n</ul>\n", "parameters": ["self", "sort"], "funcdef": "def"}, {"fullname": "ES.ESObservation.ObservationError", "modulename": "ES.ESObservation", "qualname": "ObservationError", "type": "class", "doc": "<p>Common base class for all non-exit exceptions.</p>\n"}, {"fullname": "ES.ESSlot", "modulename": "ES.ESSlot", "qualname": "", "type": "module", "doc": "<p>Created on Sun Jan  2 18:30:14 2022</p>\n\n<p>@author: a179227</p>\n"}, {"fullname": "ES.ESSlot.TimeSlot", "modulename": "ES.ESSlot", "qualname": "TimeSlot", "type": "class", "doc": "<p></p>\n"}, {"fullname": "ES.ESSlot.TimeSlot.__init__", "modulename": "ES.ESSlot", "qualname": "TimeSlot.__init__", "type": "function", "doc": "<p></p>\n", "parameters": ["self", "val"], "funcdef": "def"}, {"fullname": "ES.ESSlot.TimeSlot.json", "modulename": "ES.ESSlot", "qualname": "TimeSlot.json", "type": "function", "doc": "<p></p>\n", "parameters": ["self", "string"], "funcdef": "def"}, {"fullname": "ES.ESSlot.TimeSlot.bounds", "modulename": "ES.ESSlot", "qualname": "TimeSlot.bounds", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "ES.ESSlot.TimeSlot.instant", "modulename": "ES.ESSlot", "qualname": "TimeSlot.instant", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "ES.ESSlot.TimeSlot.interval", "modulename": "ES.ESSlot", "qualname": "TimeSlot.interval", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "ES.ESSlot.TimeSlot.union", "modulename": "ES.ESSlot", "qualname": "TimeSlot.union", "type": "function", "doc": "<p></p>\n", "parameters": ["self", "other"], "funcdef": "def"}, {"fullname": "ES.ESValue", "modulename": "ES.ESValue", "qualname": "", "type": "module", "doc": "<p>Created on Mon Aug  2 14:51:23 2021</p>\n\n<p>@author: philippe@loco-labs.io</p>\n\n<p>This module groups the classes of the objects used in the <code>ES.ESObs</code> module :</p>\n\n<ul>\n<li><code>DatationValue</code>,</li>\n<li><code>LocationValue</code>,</li>\n<li><code>PropertyValue</code>,</li>\n<li><code>ResultValue</code></li>\n</ul>\n\n<p>and the parent class :</p>\n\n<ul>\n<li><code>ESValue</code></li>\n</ul>\n"}, {"fullname": "ES.ESValue.ESValueEncoder", "modulename": "ES.ESValue", "qualname": "ESValueEncoder", "type": "class", "doc": "<p>Extensible JSON <a href=\"http://json.org\">http://json.org</a> encoder for Python data structures.</p>\n\n<p>Supports the following objects and types by default:</p>\n\n<p>+-------------------+---------------+\n| Python            | JSON          |\n+===================+===============+\n| dict              | object        |\n+-------------------+---------------+\n| list, tuple       | array         |\n+-------------------+---------------+\n| str               | string        |\n+-------------------+---------------+\n| int, float        | number        |\n+-------------------+---------------+\n| True              | true          |\n+-------------------+---------------+\n| False             | false         |\n+-------------------+---------------+\n| None              | null          |\n+-------------------+---------------+</p>\n\n<p>To extend this to recognize other objects, subclass and implement a\n<code>.default()</code> method with another method that returns a serializable\nobject for <code>o</code> if possible, otherwise it should call the superclass\nimplementation (to raise <code>TypeError</code>).</p>\n"}, {"fullname": "ES.ESValue.ESValueEncoder.default", "modulename": "ES.ESValue", "qualname": "ESValueEncoder.default", "type": "function", "doc": "<p>Implement this method in a subclass such that it returns\na serializable object for <code>o</code>, or calls the base implementation\n(to raise a <code>TypeError</code>).</p>\n\n<p>For example, to support arbitrary iterators, you could\nimplement default like this::</p>\n\n<pre><code>def default(self, o):\n    try:\n        iterable = iter(o)\n    except TypeError:\n        pass\n    else:\n        return list(iterable)\n    # Let the base class default method raise the TypeError\n    return JSONEncoder.default(self, o)\n</code></pre>\n", "parameters": ["self", "value"], "funcdef": "def"}, {"fullname": "ES.ESValue.ESValue", "modulename": "ES.ESValue", "qualname": "ESValue", "type": "class", "doc": "<p>This class is the parent class for each kind of values \n (<code>DatationValue</code>, <code>LocationValue</code>, <code>PropertyValue</code>, <code>ResultValue</code>)</p>\n\n<p><em>Attributes (for @property see methods)</em> :</p>\n\n<ul>\n<li><strong>name</strong> : Name of <code>ESValue.ESValue</code> objects</li>\n</ul>\n\n<p>The methods defined in this class are : </p>\n\n<ul>\n<li><code>simple</code> (@property)</li>\n<li><code>cast</code> (@staticmethod)</li>\n<li><code>isEqual</code></li>\n<li><code>isNotNull</code></li>\n<li><code>json</code></li>\n<li><code>setName</code></li>\n<li><code>getValue</code></li>\n<li><code>setValue</code></li>\n<li><code>vName</code></li>\n</ul>\n"}, {"fullname": "ES.ESValue.ESValue.__init__", "modulename": "ES.ESValue", "qualname": "ESValue.__init__", "type": "function", "doc": "<p>This method initialize the 'name' attribute</p>\n", "parameters": ["self"], "funcdef": "def"}, {"fullname": "ES.ESValue.ESValue.cast", "modulename": "ES.ESValue", "qualname": "ESValue.cast", "type": "function", "doc": "<p>tranform a value in a <code>ESValue</code></p>\n\n<p><em>Parameters</em></p>\n\n<ul>\n<li><strong>value</strong> : value to transform</li>\n<li><strong>ValueClass</strong> : <code>ESValue</code> class</li>\n<li><strong>unique</strong> : boolean (default False) - True if value is unique, False if it is a list</li>\n</ul>\n\n<p><em>Returns</em></p>\n\n<ul>\n<li><strong>ESvalue</strong> : <code>ESValue</code> or list of <code>ESValue</code></li>\n</ul>\n", "parameters": ["value", "ValueClass"], "funcdef": "def"}, {"fullname": "ES.ESValue.ESValue.getValue", "modulename": "ES.ESValue", "qualname": "ESValue.getValue", "type": "function", "doc": "<p>return self.value object</p>\n", "parameters": ["self"], "funcdef": "def"}, {"fullname": "ES.ESValue.ESValue.isEqual", "modulename": "ES.ESValue", "qualname": "ESValue.isEqual", "type": "function", "doc": "<p>Compare two <code>ESValue</code></p>\n\n<p><em>Parameters</em></p>\n\n<ul>\n<li><strong>other</strong> : ESValue</li>\n<li><strong>name</strong> : boolean (default True) - Include Name in comparison</li>\n<li><strong>value</strong> : boolean (default True) - Include Value in comparison</li>\n</ul>\n\n<p><em>Returns</em></p>\n\n<ul>\n<li><strong>boolean</strong> : Result of the comparison</li>\n</ul>\n", "parameters": ["self", "other", "name", "value"], "funcdef": "def"}, {"fullname": "ES.ESValue.ESValue.isNotNull", "modulename": "ES.ESValue", "qualname": "ESValue.isNotNull", "type": "function", "doc": "<p></p>\n", "parameters": ["self"], "funcdef": "def"}, {"fullname": "ES.ESValue.ESValue.json", "modulename": "ES.ESValue", "qualname": "ESValue.json", "type": "function", "doc": "<p>Export in Json format (string or dict). </p>\n\n<p><em>Parameters</em></p>\n\n<ul>\n<li><strong>json_string</strong> : boolean (default True) - choice for return format (string if True, dict else)</li>\n<li><strong>json_res_index</strong> : boolean - include index (for ResultValue)</li>\n</ul>\n\n<p><em>Returns</em></p>\n\n<ul>\n<li><strong>string or dict</strong></li>\n</ul>\n", "parameters": ["self", "kwargs"], "funcdef": "def"}, {"fullname": "ES.ESValue.ESValue.setName", "modulename": "ES.ESValue", "qualname": "ESValue.setName", "type": "function", "doc": "<p>Set the Name of the <code>ESValue</code></p>\n\n<p><em>Parameters</em></p>\n\n<ul>\n<li><strong>nam</strong> : string - value to set</li>\n</ul>\n\n<p><em>Returns</em></p>\n\n<ul>\n<li><strong>None</strong></li>\n</ul>\n", "parameters": ["self", "nam"], "funcdef": "def"}, {"fullname": "ES.ESValue.ESValue.setValue", "modulename": "ES.ESValue", "qualname": "ESValue.setValue", "type": "function", "doc": "<p>Set a new Value</p>\n\n<p><em>Parameters</em></p>\n\n<ul>\n<li><strong>val</strong> : compatible ESValue - New ESValue</li>\n</ul>\n\n<p><em>Returns</em></p>\n\n<ul>\n<li><strong>None</strong></li>\n</ul>\n", "parameters": ["self", "val"], "funcdef": "def"}, {"fullname": "ES.ESValue.ESValue.simple", "modulename": "ES.ESValue", "qualname": "ESValue.simple", "type": "variable", "doc": "<p>vSimple object (@property)</p>\n"}, {"fullname": "ES.ESValue.ESValue.vSimple", "modulename": "ES.ESValue", "qualname": "ESValue.vSimple", "type": "function", "doc": "<p></p>\n", "parameters": ["self"], "funcdef": "def"}, {"fullname": "ES.ESValue.ESValue.vName", "modulename": "ES.ESValue", "qualname": "ESValue.vName", "type": "function", "doc": "<p>Return the Name of the <code>ESValue</code></p>\n\n<p><em>Parameters</em></p>\n\n<ul>\n<li><strong>genName</strong> : string (default nullName) - Return Name if nullName</li>\n</ul>\n\n<p><em>Returns</em></p>\n\n<ul>\n<li><strong>str</strong> : Name of the ESValue</li>\n</ul>\n", "parameters": ["self", "genName"], "funcdef": "def"}, {"fullname": "ES.ESValue.DatationValue", "modulename": "ES.ESValue", "qualname": "DatationValue", "type": "class", "doc": "<p>This class represent Time (instant, interval or set of intervals).</p>\n\n<p><em>Attributes (for @property see methods)</em> :</p>\n\n<ul>\n<li><strong>value</strong> : TimeSlot object (instant, interval or list of interval)</li>\n<li><strong>name</strong> : String</li>\n</ul>\n\n<p>The methods defined in this class are : </p>\n\n<p><em>getters (@property)</em></p>\n\n<ul>\n<li><code>bounds</code></li>\n<li><code>simple</code></li>\n</ul>\n\n<p><em>getters</em></p>\n\n<ul>\n<li><code>getInstant</code></li>\n<li><code>getInterval</code></li>\n<li><code>vSimple</code></li>\n<li><code>vInterval</code></li>\n</ul>\n\n<p><em>conversion (static method)</em></p>\n\n<ul>\n<li><code>Instant</code></li>\n<li><code>Interval</code></li>\n</ul>\n\n<p><em>exports - imports</em></p>\n\n<ul>\n<li><code>from_bytes</code></li>\n<li><code>to_bytes</code></li>\n</ul>\n"}, {"fullname": "ES.ESValue.DatationValue.__init__", "modulename": "ES.ESValue", "qualname": "DatationValue.__init__", "type": "function", "doc": "<p>Several DatationValue creation modes :</p>\n\n<ul>\n<li>DatationValue({name : timeSlot}) where timeSlot is a compatible TimeSlot Object</li>\n<li>DatationValue(timeSlot) where timeSlot is a compatible TimeSlot Object</li>\n<li>DatationValue(name) where name is a string</li>\n<li>DatationValue(datval) where datval is a DatationValue object (copy)</li>\n<li>DatationValue(slot=slot, name=name) where slot is a TimeSlot object \nand name is a string</li>\n</ul>\n", "parameters": ["self", "val", "slot", "name"], "funcdef": "def"}, {"fullname": "ES.ESValue.DatationValue.valName", "modulename": "ES.ESValue", "qualname": "DatationValue.valName", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "ES.ESValue.DatationValue.bounds", "modulename": "ES.ESValue", "qualname": "DatationValue.bounds", "type": "variable", "doc": "<p>list (@property) : datetime.isoformat boundingBox [tmin, tmax]</p>\n"}, {"fullname": "ES.ESValue.DatationValue.from_bytes", "modulename": "ES.ESValue", "qualname": "DatationValue.from_bytes", "type": "function", "doc": "<p>Complete an empty <code>DatationValue</code> with binary data. </p>\n\n<p><em>Parameters</em></p>\n\n<ul>\n<li><strong>byt</strong> : binary representation of a DatationValue (datetime)</li>\n</ul>\n\n<p><em>Returns</em></p>\n\n<ul>\n<li><strong>int</strong> : number of bytes used to decode a dateTime = 7</li>\n</ul>\n", "parameters": ["self", "byt"], "funcdef": "def"}, {"fullname": "ES.ESValue.DatationValue.getInstant", "modulename": "ES.ESValue", "qualname": "DatationValue.getInstant", "type": "function", "doc": "<p>datetime if 'instant', none else</p>\n", "parameters": ["self"], "funcdef": "def"}, {"fullname": "ES.ESValue.DatationValue.getInterval", "modulename": "ES.ESValue", "qualname": "DatationValue.getInterval", "type": "function", "doc": "<p>[datetime t1, datetime t2] if 'interval', none else</p>\n", "parameters": ["self"], "funcdef": "def"}, {"fullname": "ES.ESValue.DatationValue.Instant", "modulename": "ES.ESValue", "qualname": "DatationValue.Instant", "type": "function", "doc": "<p>DatationValue built with a compatible TimeSlot arg (static method)</p>\n", "parameters": ["arg"], "funcdef": "def"}, {"fullname": "ES.ESValue.DatationValue.Interval", "modulename": "ES.ESValue", "qualname": "DatationValue.Interval", "type": "function", "doc": "<p>DatationValue built with a compatible TimeSlot [arg1, arg2] (static method)</p>\n", "parameters": ["minMax"], "funcdef": "def"}, {"fullname": "ES.ESValue.DatationValue.nullValue", "modulename": "ES.ESValue", "qualname": "DatationValue.nullValue", "type": "function", "doc": "<p></p>\n", "parameters": [], "funcdef": "def"}, {"fullname": "ES.ESValue.DatationValue.to_bytes", "modulename": "ES.ESValue", "qualname": "DatationValue.to_bytes", "type": "function", "doc": "<p>Export in binary format. </p>\n\n<p><em>Returns</em></p>\n\n<ul>\n<li><strong>bytes</strong> : binary representation of the <code>DatationValue</code> (datetime)</li>\n</ul>\n", "parameters": ["self"], "funcdef": "def"}, {"fullname": "ES.ESValue.DatationValue.vInterval", "modulename": "ES.ESValue", "qualname": "DatationValue.vInterval", "type": "function", "doc": "<p>[t1, t2] with t1, t2 - Mini, maxi of the DateSlot (timestamp or datetime). </p>\n\n<p><em>Parameters</em></p>\n\n<ul>\n<li><strong>string</strong> : boolean (default True) - choice for return format (timestamp if True, datetime else)</li>\n</ul>\n\n<p><em>Returns</em></p>\n\n<ul>\n<li><strong>JSON with timestamp or list with datetime</strong></li>\n</ul>\n", "parameters": ["self", "string"], "funcdef": "def"}, {"fullname": "ES.ESValue.DatationValue.vSimple", "modulename": "ES.ESValue", "qualname": "DatationValue.vSimple", "type": "function", "doc": "<p>datetime (@property) : middle of the TimeSlot</p>\n", "parameters": ["self", "string"], "funcdef": "def"}, {"fullname": "ES.ESValue.LocationValue", "modulename": "ES.ESValue", "qualname": "LocationValue", "type": "class", "doc": "<p>This class represent the Location of an Observation (point, polygon).</p>\n\n<p><em>Attributes (for @property see methods)</em> :</p>\n\n<ul>\n<li><strong>value</strong> : Shapely object (instant, interval or list of interval)</li>\n<li><strong>name</strong> : String</li>\n</ul>\n\n<p>The methods defined in this class are : </p>\n\n<p><em>getters (@property)</em></p>\n\n<ul>\n<li><code>coords</code></li>\n<li><code>bounds</code></li>\n<li><code>coorInv</code></li>\n</ul>\n\n<p><em>getters</em></p>\n\n<ul>\n<li><code>getPoint</code></li>\n<li><code>vSimple</code></li>\n<li><code>vPointInv</code></li>\n<li><code>vPointX</code></li>\n<li><code>vPointY</code></li>\n<li><code>vCodePlus</code></li>\n</ul>\n\n<p><em>conversion (static method)</em></p>\n\n<ul>\n<li><code>Point</code></li>\n<li><code>Cuboid</code></li>\n</ul>\n\n<p><em>exports - imports</em></p>\n\n<ul>\n<li><code>from_bytes</code></li>\n<li><code>to_bytes</code></li>\n</ul>\n"}, {"fullname": "ES.ESValue.LocationValue.__init__", "modulename": "ES.ESValue", "qualname": "LocationValue.__init__", "type": "function", "doc": "<p>Several LocationValue creation modes :</p>\n\n<ul>\n<li>LocationValue({name : coord}) where coord is a GeoJSON or list coordinates format</li>\n<li>LocationValue(coord) where coord is a is a GeoJSON or list coordinates format</li>\n<li>LocationValue(name) where name is a string</li>\n<li>LocationValue(locval) where locval is a LocationValue object (copy) </li>\n<li>LocationValue(shape=shape, name=name) where shape is a shapely.geometry.Point \n(or Polygon) and name is a string</li>\n</ul>\n", "parameters": ["self", "val", "shape", "name"], "funcdef": "def"}, {"fullname": "ES.ESValue.LocationValue.valName", "modulename": "ES.ESValue", "qualname": "LocationValue.valName", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "ES.ESValue.LocationValue.bounds", "modulename": "ES.ESValue", "qualname": "LocationValue.bounds", "type": "variable", "doc": "<p>tuple (@property) : boundingBox (minx, miny, maxx, maxy)</p>\n"}, {"fullname": "ES.ESValue.LocationValue.coords", "modulename": "ES.ESValue", "qualname": "LocationValue.coords", "type": "variable", "doc": "<p>return geoJson coordinates</p>\n"}, {"fullname": "ES.ESValue.LocationValue.coorInv", "modulename": "ES.ESValue", "qualname": "LocationValue.coorInv", "type": "variable", "doc": "<p>list (@property) : vSimple inverse coordinates [vSimple[1], vSimple[0]]</p>\n"}, {"fullname": "ES.ESValue.LocationValue.Cuboid", "modulename": "ES.ESValue", "qualname": "LocationValue.Cuboid", "type": "function", "doc": "<p>LocationValue built with shapely.geometry.box parameters (static method)</p>\n", "parameters": ["minMax", "ccw"], "funcdef": "def"}, {"fullname": "ES.ESValue.LocationValue.from_bytes", "modulename": "ES.ESValue", "qualname": "LocationValue.from_bytes", "type": "function", "doc": "<p>Complete an empty <code>LocationValue</code> with binary data (point)</p>\n\n<p><em>Parameters</em></p>\n\n<ul>\n<li><strong>byt</strong> : binary representation of a DatationValue (point)</li>\n</ul>\n\n<p><em>Returns</em></p>\n\n<ul>\n<li><strong>int</strong> : number of bytes used to decode a point = 8</li>\n</ul>\n", "parameters": ["self", "byt"], "funcdef": "def"}, {"fullname": "ES.ESValue.LocationValue.getPoint", "modulename": "ES.ESValue", "qualname": "LocationValue.getPoint", "type": "function", "doc": "<p>return a list with point coordinates [x, y] if the shape is a point</p>\n", "parameters": ["self"], "funcdef": "def"}, {"fullname": "ES.ESValue.LocationValue.nullValue", "modulename": "ES.ESValue", "qualname": "LocationValue.nullValue", "type": "function", "doc": "<p></p>\n", "parameters": [], "funcdef": "def"}, {"fullname": "ES.ESValue.LocationValue.Point", "modulename": "ES.ESValue", "qualname": "LocationValue.Point", "type": "function", "doc": "<p>LocationValue built with a compatible TimeSlot arg (static method)</p>\n", "parameters": ["x", "y"], "funcdef": "def"}, {"fullname": "ES.ESValue.LocationValue.to_bytes", "modulename": "ES.ESValue", "qualname": "LocationValue.to_bytes", "type": "function", "doc": "<p>Export in binary format. </p>\n\n<p><em>Returns</em></p>\n\n<ul>\n<li><strong>bytes</strong> : binary representation of the <code>LocationValue</code> (point coordinates)</li>\n</ul>\n", "parameters": ["self"], "funcdef": "def"}, {"fullname": "ES.ESValue.LocationValue.vCodePlus", "modulename": "ES.ESValue", "qualname": "LocationValue.vCodePlus", "type": "function", "doc": "<p>return CodePlus value (string) of the point property value</p>\n", "parameters": ["self"], "funcdef": "def"}, {"fullname": "ES.ESValue.LocationValue.vSimple", "modulename": "ES.ESValue", "qualname": "LocationValue.vSimple", "type": "function", "doc": "<p>return simple value (centroid coordinates for the shape : [x, y]) in a string format or in a object format</p>\n", "parameters": ["self", "string"], "funcdef": "def"}, {"fullname": "ES.ESValue.LocationValue.vPointInv", "modulename": "ES.ESValue", "qualname": "LocationValue.vPointInv", "type": "function", "doc": "<p>return point (property) inversed coordinates in a string format or\nin a list format [y, x]</p>\n", "parameters": ["self", "string"], "funcdef": "def"}, {"fullname": "ES.ESValue.LocationValue.vPointX", "modulename": "ES.ESValue", "qualname": "LocationValue.vPointX", "type": "function", "doc": "<p>return point (property) coordinates x</p>\n", "parameters": ["self"], "funcdef": "def"}, {"fullname": "ES.ESValue.LocationValue.vPointY", "modulename": "ES.ESValue", "qualname": "LocationValue.vPointY", "type": "function", "doc": "<p>return point (property) coordinates y</p>\n", "parameters": ["self"], "funcdef": "def"}, {"fullname": "ES.ESValue.PropertyValue", "modulename": "ES.ESValue", "qualname": "PropertyValue", "type": "class", "doc": "<p>This class represent the Property of an Observation.</p>\n\n<p><em>Attributes (for @property see methods)</em> :</p>\n\n<ul>\n<li><strong>value</strong> : dict</li>\n<li><strong>name</strong> : String</li>\n</ul>\n\n<p>The methods defined in this class are : </p>\n\n<p><em>getters</em></p>\n\n<ul>\n<li><code>vSimple</code></li>\n</ul>\n\n<p><em>exports - imports</em></p>\n\n<ul>\n<li><code>from_bytes</code></li>\n<li><code>to_bytes</code></li>\n</ul>\n"}, {"fullname": "ES.ESValue.PropertyValue.__init__", "modulename": "ES.ESValue", "qualname": "PropertyValue.__init__", "type": "function", "doc": "<p>This method initialize the 'name' attribute</p>\n", "parameters": ["self", "val"], "funcdef": "def"}, {"fullname": "ES.ESValue.PropertyValue.valName", "modulename": "ES.ESValue", "qualname": "PropertyValue.valName", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "ES.ESValue.PropertyValue.from_bytes", "modulename": "ES.ESValue", "qualname": "PropertyValue.from_bytes", "type": "function", "doc": "<p></p>\n", "parameters": ["self", "byt"], "funcdef": "def"}, {"fullname": "ES.ESValue.PropertyValue.nullValue", "modulename": "ES.ESValue", "qualname": "PropertyValue.nullValue", "type": "function", "doc": "<p></p>\n", "parameters": [], "funcdef": "def"}, {"fullname": "ES.ESValue.PropertyValue.vSimple", "modulename": "ES.ESValue", "qualname": "PropertyValue.vSimple", "type": "function", "doc": "<p>return simple value (type for the property) in a string format or in a object format</p>\n", "parameters": ["self", "string"], "funcdef": "def"}, {"fullname": "ES.ESValue.PropertyValue.to_bytes", "modulename": "ES.ESValue", "qualname": "PropertyValue.to_bytes", "type": "function", "doc": "<p></p>\n", "parameters": ["self"], "funcdef": "def"}, {"fullname": "ES.ESValue.ResultValue", "modulename": "ES.ESValue", "qualname": "ResultValue", "type": "class", "doc": "<p>This class represent the Result of an Observation.</p>\n\n<p><em>Attributes (for @property see methods)</em> :</p>\n\n<ul>\n<li><strong>value</strong> : any kind of object</li>\n<li><strong>ind</strong> : list, index [location, datation, property]</li>\n<li><strong>name</strong> : String</li>\n</ul>\n\n<p>The methods defined in this class are : </p>\n\n<p><em>setters</em></p>\n\n<ul>\n<li><code>setIndValue</code></li>\n</ul>\n\n<p><em>exports - imports</em></p>\n\n<ul>\n<li><code>from_bytes</code></li>\n<li><code>to_bytes</code></li>\n<li><code>to_float</code></li>\n</ul>\n"}, {"fullname": "ES.ESValue.ResultValue.__init__", "modulename": "ES.ESValue", "qualname": "ResultValue.__init__", "type": "function", "doc": "<p>Several ResultValue creation modes :</p>\n\n<ul>\n<li>ResultValue({name : value}) </li>\n<li>ResultValue(value) </li>\n<li>ResultValue(resval) </li>\n<li>ResultValue(value, ind=ind, name=name) </li>\n</ul>\n\n<p>where 'resval' is a ResultValue(copy), 'value' is a 'result' or ['result', 'ind'],\n'result' is an Object, 'ind' is a list with three integer and 'name' is a string.</p>\n", "parameters": ["self", "val", "name"], "funcdef": "def"}, {"fullname": "ES.ESValue.ResultValue.valName", "modulename": "ES.ESValue", "qualname": "ResultValue.valName", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "ES.ESValue.ResultValue.nullValue", "modulename": "ES.ESValue", "qualname": "ResultValue.nullValue", "type": "function", "doc": "<p></p>\n", "parameters": [], "funcdef": "def"}, {"fullname": "ES.ESValue.ResultValue.to_float", "modulename": "ES.ESValue", "qualname": "ResultValue.to_float", "type": "function", "doc": "<p></p>\n", "parameters": ["self"], "funcdef": "def"}, {"fullname": "ES.ESValue.ResultValue.vSimple", "modulename": "ES.ESValue", "qualname": "ResultValue.vSimple", "type": "function", "doc": "<p>float value</p>\n", "parameters": ["self", "string"], "funcdef": "def"}, {"fullname": "ES.ESconstante", "modulename": "ES.ESconstante", "qualname": "", "type": "module", "doc": "<p>Created on Sun Aug  1 13:35:28 2021</p>\n\n<p>@author: philippe@loco-labs.io</p>\n\n<p>This module describes the constants and default values used in other modules.</p>\n"}, {"fullname": "ES.ESconstante.Es", "modulename": "ES.ESconstante", "qualname": "Es", "type": "class", "doc": "<p>initialization of constant data.</p>\n"}, {"fullname": "ES.ESconstante.Es.__init__", "modulename": "ES.ESconstante", "qualname": "Es.__init__", "type": "function", "doc": "<p></p>\n", "parameters": ["self"], "funcdef": "def"}, {"fullname": "ES.ESconstante.Es.mOption", "modulename": "ES.ESconstante", "qualname": "Es.mOption", "type": "variable", "doc": "<p>Default options for <code>ES.ESObservation.Observation</code></p>\n"}, {"fullname": "ES.ESconstante.Es.vName", "modulename": "ES.ESconstante", "qualname": "Es.vName", "type": "variable", "doc": "<p>name for json classES identification</p>\n"}, {"fullname": "ES.ESconstante.Es.json_type", "modulename": "ES.ESconstante", "qualname": "Es.json_type", "type": "variable", "doc": "<p>ordered list for json_type</p>\n"}, {"fullname": "ES.ESconstante.Es.json_nval", "modulename": "ES.ESconstante", "qualname": "Es.json_nval", "type": "variable", "doc": "<p>ordered list for json_type</p>\n"}, {"fullname": "ES.ESconstante.Es.esObsClass", "modulename": "ES.ESconstante", "qualname": "Es.esObsClass", "type": "variable", "doc": "<p>ordered list for classES</p>\n"}, {"fullname": "ES.ESconstante.Es.mTypeAtt", "modulename": "ES.ESconstante", "qualname": "Es.mTypeAtt", "type": "variable", "doc": "<p>Assignment of attributes to ESObs objects</p>\n"}, {"fullname": "ES.ESconstante.Es.obsCat", "modulename": "ES.ESconstante", "qualname": "Es.obsCat", "type": "variable", "doc": "<p>Default name for <code>ES.ESObservation.Observation.score</code></p>\n"}, {"fullname": "ES.ESconstante.Es.codeb", "modulename": "ES.ESconstante", "qualname": "Es.codeb", "type": "variable", "doc": "<p>Code for bynary interface <code>ES.ESObservation.Observation.from_bytes</code> and\n<code>ES.ESObservation.Observation.to_bytes</code></p>\n"}, {"fullname": "ES.ESconstante.Es.prop", "modulename": "ES.ESconstante", "qualname": "Es.prop", "type": "variable", "doc": "<p>Dictionnary for property codification (BLE - Environnemental Sensing Service)</p>\n"}, {"fullname": "ES.ESconstante.Es.invProp", "modulename": "ES.ESconstante", "qualname": "Es.invProp", "type": "variable", "doc": "<p>Dictionnary for property codification (BLE - Environnemental Sensing Service)</p>\n"}, {"fullname": "ES.ESconstante.Es.sampling", "modulename": "ES.ESconstante", "qualname": "Es.sampling", "type": "variable", "doc": "<p>Dictionnary for property sampling mode (BLE - Environnemental Sensing Service)</p>\n"}, {"fullname": "ES.ESconstante.Es.invSampling", "modulename": "ES.ESconstante", "qualname": "Es.invSampling", "type": "variable", "doc": "<p>Dictionnary for property sampling mode (BLE - Environnemental Sensing Service)</p>\n"}, {"fullname": "ES.ESconstante.Es.application", "modulename": "ES.ESconstante", "qualname": "Es.application", "type": "variable", "doc": "<p>Dictionnary for property application (BLE - Environnemental Sensing Service)</p>\n"}, {"fullname": "ES.ESconstante.Es.invApplication", "modulename": "ES.ESconstante", "qualname": "Es.invApplication", "type": "variable", "doc": "<p>Dictionnary for property application (BLE - Environnemental Sensing Service)</p>\n"}, {"fullname": "ES.ESconstante.Es.nax", "modulename": "ES.ESconstante", "qualname": "Es.nax", "type": "variable", "doc": "<p>Dictionnary for axis Number</p>\n"}, {"fullname": "ES.ESconstante.Es.axes", "modulename": "ES.ESconstante", "qualname": "Es.axes", "type": "variable", "doc": "<p>Dictionnary for Xarray axis name</p>\n"}, {"fullname": "ES.ESconstante.Es.xattrs", "modulename": "ES.ESconstante", "qualname": "Es.xattrs", "type": "variable", "doc": "<p>Dictionnary for Xarray attrs informations</p>\n"}, {"fullname": "ES.ESconstante.ES", "modulename": "ES.ESconstante", "qualname": "ES", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "ES.EStestunitaire", "modulename": "ES.EStestunitaire", "qualname": "", "type": "module", "doc": "<p>Created on Sun Aug  1 22:05:08 2021</p>\n\n<p>@author: Philippe@loco-labs.io</p>\n\n<p>The <code>ES.EStestunitaire</code> module contains the unit tests (class unittest) for all the \nEnvironmental Sensing functions.</p>\n"}, {"fullname": "ES.EStestunitaire.res2", "modulename": "ES.EStestunitaire", "qualname": "res2", "type": "variable", "doc": "<p>reslist = [ResultValue(21, 'test'), ResultValue(22, 'test2'),\n           ResultValue(23, 'test3'), ResultValue(24, 'test4')]\nir5 = ResultValue(25)</p>\n\n<p>resind = [[0,2,3,1], [2,1,3,0], [0,1,2,3]]\nsetres = ESIlistSet([reslist, resind])</p>\n"}, {"fullname": "ES.EStestunitaire.TestExemples", "modulename": "ES.EStestunitaire", "qualname": "TestExemples", "type": "class", "doc": "<p>A class whose instances are single test cases.</p>\n\n<p>By default, the test code itself should be placed in a method named\n'runTest'.</p>\n\n<p>If the fixture may be used for many test cases, create as\nmany test methods as are needed. When instantiating such a TestCase\nsubclass, specify in the constructor arguments the name of the test method\nthat the instance is to execute.</p>\n\n<p>Test authors should subclass TestCase for their own tests. Construction\nand deconstruction of the test's environment ('fixture') can be\nimplemented by overriding the 'setUp' and 'tearDown' methods respectively.</p>\n\n<p>If it is necessary to override the __init__ method, the base class\n__init__ method must always be called. It is important that subclasses\nshould not change the signature of their __init__ method, since instances\nof the classes are instantiated automatically by parts of the framework\nin order to be run.</p>\n\n<p>When subclassing TestCase, you can set these attributes:</p>\n\n<ul>\n<li>failureException: determines which exception will be raised when\nthe instance's assertion methods fail; test methods raising this\nexception will be deemed to have 'failed' rather than 'errored'.</li>\n<li>longMessage: determines whether long messages (including repr of\nobjects used in assert methods) will be printed on failure in <em>addition</em>\nto any explicit message passed.</li>\n<li>maxDiff: sets the maximum length of a diff in failure messages\nby assert methods using difflib. It is looked up as an instance\nattribute so can be configured by individual tests if required.</li>\n</ul>\n"}, {"fullname": "ES.EStestunitaire.TestExemples.test_first_observation", "modulename": "ES.EStestunitaire", "qualname": "TestExemples.test_first_observation", "type": "function", "doc": "<p></p>\n", "parameters": ["self"], "funcdef": "def"}, {"fullname": "ES.EStestunitaire.TestObservation", "modulename": "ES.EStestunitaire", "qualname": "TestObservation", "type": "class", "doc": "<p>Unit tests for <code>ES.ESObservation.Observation</code></p>\n"}, {"fullname": "ES.EStestunitaire.TestObservation.test_obs_creation", "modulename": "ES.EStestunitaire", "qualname": "TestObservation.test_obs_creation", "type": "function", "doc": "<p></p>\n", "parameters": ["self"], "funcdef": "def"}, {"fullname": "ES.EStestunitaire.TestObservation.test_obs_loc_iloc_maj", "modulename": "ES.EStestunitaire", "qualname": "TestObservation.test_obs_loc_iloc_maj", "type": "function", "doc": "<p></p>\n", "parameters": ["self"], "funcdef": "def"}, {"fullname": "ES.EStestunitaire.TestObservation.test_obs_vList", "modulename": "ES.EStestunitaire", "qualname": "TestObservation.test_obs_vList", "type": "function", "doc": "<p></p>\n", "parameters": ["self"], "funcdef": "def"}, {"fullname": "ES.EStestunitaire.TestObservation.test_obs_simple", "modulename": "ES.EStestunitaire", "qualname": "TestObservation.test_obs_simple", "type": "function", "doc": "<p></p>\n", "parameters": ["self"], "funcdef": "def"}, {"fullname": "ES.EStestunitaire.TestObservation.test_obs_att", "modulename": "ES.EStestunitaire", "qualname": "TestObservation.test_obs_att", "type": "function", "doc": "<p></p>\n", "parameters": ["self"], "funcdef": "def"}, {"fullname": "ES.EStestunitaire.TestObservation.test_obs_options", "modulename": "ES.EStestunitaire", "qualname": "TestObservation.test_obs_options", "type": "function", "doc": "<p></p>\n", "parameters": ["self"], "funcdef": "def"}, {"fullname": "ES.EStestunitaire.TestObservation.test_obs_maj_type", "modulename": "ES.EStestunitaire", "qualname": "TestObservation.test_obs_maj_type", "type": "function", "doc": "<p></p>\n", "parameters": ["self"], "funcdef": "def"}, {"fullname": "ES.EStestunitaire.TestObservation.test_obs_dim", "modulename": "ES.EStestunitaire", "qualname": "TestObservation.test_obs_dim", "type": "function", "doc": "<p></p>\n", "parameters": ["self"], "funcdef": "def"}, {"fullname": "ES.EStestunitaire.TestObservation.test_obs_majListName_majListValue", "modulename": "ES.EStestunitaire", "qualname": "TestObservation.test_obs_majListName_majListValue", "type": "function", "doc": "<p></p>\n", "parameters": ["self"], "funcdef": "def"}, {"fullname": "ES.EStestunitaire.TestObservation.test_obs_majIndex_iLoc", "modulename": "ES.EStestunitaire", "qualname": "TestObservation.test_obs_majIndex_iLoc", "type": "function", "doc": "<p></p>\n", "parameters": ["self"], "funcdef": "def"}, {"fullname": "ES.EStestunitaire.TestObservation.test_append_obs", "modulename": "ES.EStestunitaire", "qualname": "TestObservation.test_append_obs", "type": "function", "doc": "<p></p>\n", "parameters": ["self"], "funcdef": "def"}, {"fullname": "ES.EStestunitaire.TestObservation.test_obs_sort", "modulename": "ES.EStestunitaire", "qualname": "TestObservation.test_obs_sort", "type": "function", "doc": "<p></p>\n", "parameters": ["self"], "funcdef": "def"}, {"fullname": "ES.EStestunitaire.TestObservation.test_obs_add", "modulename": "ES.EStestunitaire", "qualname": "TestObservation.test_obs_add", "type": "function", "doc": "<p></p>\n", "parameters": ["self"], "funcdef": "def"}, {"fullname": "ES.EStestunitaire.TestObservation.test_obs_full", "modulename": "ES.EStestunitaire", "qualname": "TestObservation.test_obs_full", "type": "function", "doc": "<p></p>\n", "parameters": ["self"], "funcdef": "def"}, {"fullname": "ES.EStestunitaire.TestObservation.test_obs_extend", "modulename": "ES.EStestunitaire", "qualname": "TestObservation.test_obs_extend", "type": "function", "doc": "<p></p>\n", "parameters": ["self"], "funcdef": "def"}, {"fullname": "ES.EStestunitaire.TestObservation.test_sensor", "modulename": "ES.EStestunitaire", "qualname": "TestObservation.test_sensor", "type": "function", "doc": "<p></p>\n", "parameters": ["self"], "funcdef": "def"}, {"fullname": "ES.EStestunitaire.TestExports", "modulename": "ES.EStestunitaire", "qualname": "TestExports", "type": "class", "doc": "<p>Unit tests for <code>ES.ESObservation.Observation</code> exports</p>\n"}, {"fullname": "ES.EStestunitaire.TestExports.test__envoi_mongo", "modulename": "ES.EStestunitaire", "qualname": "TestExports.test__envoi_mongo", "type": "function", "doc": "<p></p>\n", "parameters": ["self"], "funcdef": "def"}, {"fullname": "ES.EStestunitaire.TestExports.test_geo_interface", "modulename": "ES.EStestunitaire", "qualname": "TestExports.test_geo_interface", "type": "function", "doc": "<p></p>\n", "parameters": ["self"], "funcdef": "def"}, {"fullname": "ES.EStestunitaire.TestExports.test_obs_polygon", "modulename": "ES.EStestunitaire", "qualname": "TestExports.test_obs_polygon", "type": "function", "doc": "<p></p>\n", "parameters": ["self"], "funcdef": "def"}, {"fullname": "ES.EStestunitaire.TestExports.test_to_numpy", "modulename": "ES.EStestunitaire", "qualname": "TestExports.test_to_numpy", "type": "function", "doc": "<p></p>\n", "parameters": ["self"], "funcdef": "def"}, {"fullname": "ES.EStestunitaire.TestExports.test_xarray", "modulename": "ES.EStestunitaire", "qualname": "TestExports.test_xarray", "type": "function", "doc": "<p></p>\n", "parameters": ["self"], "funcdef": "def"}, {"fullname": "ES.EStestunitaire.TestExports.test_exports", "modulename": "ES.EStestunitaire", "qualname": "TestExports.test_exports", "type": "function", "doc": "<p></p>\n", "parameters": ["self"], "funcdef": "def"}, {"fullname": "ES.ilist", "modulename": "ES.ilist", "qualname": "", "type": "module", "doc": "<p>Created on Sun Jan  2 18:30:14 2022</p>\n\n<p>@author: Philippe@loco-labs.io</p>\n\n<p>The <code>ES.ilist</code> module contains the <code>Ilist</code> class.</p>\n\n<h1 id=\"what-is-the-ilist-object\">What is the Ilist Object ?</h1>\n\n<p>The Ilist Object is a combination of a set of data and properties that describe it.\nIn the example below, the set of data is scores of students and the properties are the name, the age and the subject.</p>\n\n<p><img src=\"./ilist_example.png\" width=\"600\"></p>\n\n<p>The Ilist Object has many properties and can be converted into a matrix (e.g. numpy\nor Xarray object to perform statistical processing) or into several formats (e.g. json, csv).</p>\n\n<p><img src=\"./ilist_xarray.png\" width=\"400\"></p>\n\n<p>The data model is as follows :</p>\n\n<p><img src=\"./ilist_data_structure.png\" width=\"600\"></p>\n\n<ul>\n<li>the user data (extval, extidx) can be everything,</li>\n<li>the internal data (ival, iidx) are integers, which makes the processing to be performed much simpler</li>\n<li>the index user data (extidx) are dynamic to reduce the size of data.</li>\n</ul>\n"}, {"fullname": "ES.ilist.identity", "modulename": "ES.ilist", "qualname": "identity", "type": "function", "doc": "<p></p>\n", "parameters": ["args", "kwargs"], "funcdef": "def"}, {"fullname": "ES.ilist.Ilist", "modulename": "ES.ilist", "qualname": "Ilist", "type": "class", "doc": "<p>An <code>Ilist</code> is a representation of an indexed list (a list is indexed by others list). E.g. python zip or csv file.</p>\n\n<p><em>Attributes (for @property see methods)</em> :</p>\n\n<ul>\n<li><strong>extval</strong> : list of data to be indexed</li>\n<li><strong>valname</strong> : name of the extval list</li>\n<li><strong>setval</strong> : list of the different extval values (dynamic value)</li>\n<li><strong>ival</strong> : index of the extval (dynamic value)</li>\n<li><strong>extidx</strong> : list of index (dynamic value)</li>\n<li><strong>idxname</strong> : list of the index name</li>\n<li><strong>setidx</strong> : list of the different idxval values</li>\n<li><strong>iidx</strong> : index of the extidx list of values</li>\n</ul>\n\n<p>The methods defined in this class are : </p>\n\n<p><em>class methods (constructor)</em></p>\n\n<ul>\n<li><code>Ilist.Idict</code></li>\n<li><code>Ilist.Iset</code></li>\n<li><code>Ilist.Iidx</code></li>\n<li><code>Ilist.Iext</code></li>\n<li><code>Ilist.Izip</code></li>\n<li><code>Ilist.Icsv</code></li>\n</ul>\n\n<p><em>dynamic value property (getters)</em></p>\n\n<ul>\n<li><code>Ilist.ival</code></li>\n<li><code>Ilist.setval</code></li>\n<li><code>Ilist.extidx</code></li>\n<li><code>Ilist.tiidx</code></li>\n<li><code>Ilist.textidx</code></li>\n</ul>\n\n<p><em>global property (getters)</em></p>\n\n<ul>\n<li><code>Ilist.axes</code></li>\n<li><code>Ilist.axesall</code></li>\n<li><code>Ilist.axeslen</code></li>\n<li><code>Ilist.axesmin</code></li>\n<li><code>Ilist.complete</code></li>\n<li><code>Ilist.consistent</code></li>\n<li><code>Ilist.dimension</code></li>\n<li><code>Ilist.lencomplete</code></li>\n<li><code>Ilist.rate</code></li>\n<li><code>Ilist.setvallen</code></li>\n<li><code>Ilist.zip</code></li>\n</ul>\n\n<p><em>idx property (getters)</em></p>\n\n<ul>\n<li><code>Ilist.idxcoupled</code></li>\n<li><code>Ilist.idxderived</code></li>\n<li><code>Ilist.idxlen</code></li>\n<li><code>Ilist.idxref</code></li>\n<li><code>Ilist.idxunique</code></li>\n<li><code>Ilist.ind</code></li>\n<li><code>Ilist.lenidx</code></li>\n<li><code>Ilist.minMaxIndex</code></li>\n</ul>\n\n<p><em>add - update methods</em></p>\n\n<ul>\n<li><code>Ilist.addextidx</code></li>\n<li><code>Ilist.addlistidx</code></li>\n<li><code>Ilist.append</code></li>\n<li><code>Ilist.appendi</code></li>\n<li><code>Ilist.updateidx</code></li>\n<li><code>Ilist.updatelist</code></li>\n</ul>\n\n<p><em>selecting methods</em></p>\n\n<ul>\n<li><code>Ilist.extidxtoi</code></li>\n<li><code>Ilist.iidxtoext</code></li>\n<li><code>Ilist.iloc</code></li>\n<li><code>Ilist.isextIndex</code></li>\n<li><code>Ilist.isiIndex</code></li>\n<li><code>Ilist.isValue</code>    </li>\n<li><code>Ilist.loc</code></li>\n</ul>\n\n<p><em>management - conversion methods</em></p>\n\n<ul>\n<li><code>Ilist.full</code></li>\n<li><code>Ilist.reindex</code></li>\n<li><code>Ilist.reorder</code></li>\n<li><code>Ilist.sort</code></li>\n<li><code>Ilist.sortidx</code></li>\n<li><code>Ilist.swapindex</code></li>\n</ul>\n\n<p><em>exports methods</em></p>\n\n<ul>\n<li><code>Ilist.json</code></li>\n<li><code>Ilist.to_csv</code></li>\n<li><code>Ilist.to_numpy</code></li>\n<li><code>Ilist.to_xarray</code></li>\n<li><code>Ilist.vlist</code></li>\n</ul>\n"}, {"fullname": "ES.ilist.Ilist.__init__", "modulename": "ES.ilist", "qualname": "Ilist.__init__", "type": "function", "doc": "<p>Ilist constructor.</p>\n\n<p><em>Parameters</em></p>\n\n<ul>\n<li><strong>extval</strong> : list (default []) - indexed list (see data model)</li>\n<li><strong>setidx</strong> :  list (default []) - external different values of index (see data model)</li>\n<li><strong>iidx</strong> :  list (default [])  - integer value of index (see data model)</li>\n<li><strong>valname</strong> : string (default 'value') - name of indexed list (see data model)</li>\n<li><strong>idxname</strong> : list of string (default []) - name of index list (see data model)</li>\n<li><strong>defaultidx</strong> : boolean (default True) - If True, a generic index is generated if no index is defined</li>\n</ul>\n\n<p><em>Returns</em></p>\n\n<ul>\n<li><strong>Ilist</strong></li>\n</ul>\n", "parameters": ["self", "extval", "setidx", "iidx", "valname", "idxname", "defaultidx"], "funcdef": "def"}, {"fullname": "ES.ilist.Ilist.Idict", "modulename": "ES.ilist", "qualname": "Ilist.Idict", "type": "function", "doc": "<p>Ilist constructor (dictionnary data).</p>\n\n<p><em>Parameters</em></p>\n\n<ul>\n<li><strong>dictvaliidx</strong> :  {valname : valiidx} with val=list(list(val, indexval))</li>\n<li><strong>dictsetidx</strong> :  {idxname0 : setidx0, ... , idxnamen : setidxn}</li>\n<li><strong>order</strong> : list (default []) of axes used if there is no indexval in valiidx</li>\n<li><strong>idxref</strong> : list (default []) of reference axes used if there is no indexval in valiidx</li>\n<li><strong>defaultidx</strong> : boolean (default True). If True, a generic index is generated if no index is defined</li>\n</ul>\n\n<p><em>Returns</em></p>\n\n<ul>\n<li><strong>Ilist</strong></li>\n</ul>\n", "parameters": ["cls", "dictvaliidx", "dictsetidx", "order", "idxref", "defaultidx"], "funcdef": "def"}, {"fullname": "ES.ilist.Ilist.Iset", "modulename": "ES.ilist", "qualname": "Ilist.Iset", "type": "function", "doc": "<p>Ilist constructor (list data with indexed values ).</p>\n\n<p><em>Parameters</em></p>\n\n<ul>\n<li><strong>valiidx</strong> :  coupled val / index list : list(list(val, indexval))</li>\n<li><strong>setidx</strong> :  external different values of index (see data model)</li>\n<li><strong>order</strong> : list (default []) of axes used if there is no indexval in valiidx</li>\n<li><strong>idxref</strong> : list (default []) of reference axes used if there is no indexval in valiidx</li>\n<li><strong>valname</strong> : string (default 'value') name of indexed list (see data model)</li>\n<li><strong>idxname</strong> : list of string (default []) name of index list (see data model)</li>\n<li><strong>defaultidx</strong> : boolean (default True). If True, a generic index is generated if no index is defined</li>\n</ul>\n\n<p><em>Returns</em></p>\n\n<ul>\n<li><strong>Ilist</strong></li>\n</ul>\n", "parameters": ["cls", "valiidx", "setidx", "order", "idxref", "valname", "idxname", "defaultidx"], "funcdef": "def"}, {"fullname": "ES.ilist.Ilist.Iidx", "modulename": "ES.ilist", "qualname": "Ilist.Iidx", "type": "function", "doc": "<p>Ilist constructor (automatic index).</p>\n\n<p><em>Parameters</em></p>\n\n<ul>\n<li><strong>extval</strong> : indexed list (see data model)</li>\n<li><strong>idxlen</strong> : integer - number of index</li>\n<li><strong>idxref</strong> : list (default []) of reference axes used</li>\n<li><strong>order</strong> : list (default []) of axes used to order the index</li>\n<li><strong>valname</strong> : string (default 'value') name of indexed list (see data model)</li>\n<li><strong>idxname</strong> : list of string (default []) name of index list (see data model)</li>\n<li><strong>defaultidx</strong> : boolean (default True). If True, a generic index is generated if no index is defined</li>\n</ul>\n\n<p><em>Returns</em></p>\n\n<ul>\n<li><strong>Ilist</strong></li>\n</ul>\n", "parameters": ["cls", "extval", "idxlen", "idxref", "order", "valname", "idxname", "defaultidx"], "funcdef": "def"}, {"fullname": "ES.ilist.Ilist.Iext", "modulename": "ES.ilist", "qualname": "Ilist.Iext", "type": "function", "doc": "<p>Ilist constructor (external index).</p>\n\n<p><em>Parameters</em></p>\n\n<ul>\n<li><strong>extval</strong> : indexed list (see data model)</li>\n<li><strong>extidx</strong> : index list (see data model)</li>\n<li><strong>valname</strong> : string (default 'value') name of indexed list (see data model)</li>\n<li><strong>idxname</strong> : list of string (default []) name of index list (see data model)</li>\n<li><strong>defaultidx</strong> : boolean (default True). If True, a generic index is generated if no index is defined</li>\n</ul>\n\n<p><em>Returns</em></p>\n\n<ul>\n<li><strong>Ilist</strong></li>\n</ul>\n", "parameters": ["cls", "extval", "extidx", "valname", "idxname", "defaultidx"], "funcdef": "def"}, {"fullname": "ES.ilist.Ilist.Izip", "modulename": "ES.ilist", "qualname": "Ilist.Izip", "type": "function", "doc": "<p>Ilist constructor (external index only).</p>\n\n<p><em>Parameters</em></p>\n\n<ul>\n<li><strong>args</strong> : index list extidx=list(args) (see data model)</li>\n</ul>\n\n<p><em>Returns</em></p>\n\n<ul>\n<li><strong>Ilist</strong></li>\n</ul>\n", "parameters": ["cls", "args"], "funcdef": "def"}, {"fullname": "ES.ilist.Ilist.Icsv", "modulename": "ES.ilist", "qualname": "Ilist.Icsv", "type": "function", "doc": "<p>Ilist constructor (from a csv file). Each column represents extidx or extval values.</p>\n\n<p><em>Parameters</em></p>\n\n<ul>\n<li><strong>filename</strong> : string (default 'ilist.csv'), name of the file to read</li>\n<li><strong>valfirst</strong> : boolean (default False). If False extval is the last columns else it's the first</li>\n<li><strong>header</strong> : boolean (default True). If True, the first raw is dedicated to names</li>\n</ul>\n\n<p><em>Returns</em></p>\n\n<ul>\n<li><strong>Ilist</strong></li>\n</ul>\n", "parameters": ["cls", "filename", "valfirst", "header", "kwargs"], "funcdef": "def"}, {"fullname": "ES.ilist.Ilist.extval", "modulename": "ES.ilist", "qualname": "Ilist.extval", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "ES.ilist.Ilist.iidx", "modulename": "ES.ilist", "qualname": "Ilist.iidx", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "ES.ilist.Ilist.setidx", "modulename": "ES.ilist", "qualname": "Ilist.setidx", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "ES.ilist.Ilist.valname", "modulename": "ES.ilist", "qualname": "Ilist.valname", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "ES.ilist.Ilist.idxname", "modulename": "ES.ilist", "qualname": "Ilist.idxname", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "ES.ilist.Ilist.axes", "modulename": "ES.ilist", "qualname": "Ilist.axes", "type": "variable", "doc": "<p>return the list of independant axes (not coupled and not unique)</p>\n"}, {"fullname": "ES.ilist.Ilist.axesall", "modulename": "ES.ilist", "qualname": "Ilist.axesall", "type": "variable", "doc": "<p>return the list of all axes</p>\n"}, {"fullname": "ES.ilist.Ilist.axesmin", "modulename": "ES.ilist", "qualname": "Ilist.axesmin", "type": "variable", "doc": "<p>return the list of independant axes (not coupled, not derived and not unique)</p>\n"}, {"fullname": "ES.ilist.Ilist.axeslen", "modulename": "ES.ilist", "qualname": "Ilist.axeslen", "type": "variable", "doc": "<p>return the list of axes lenght</p>\n"}, {"fullname": "ES.ilist.Ilist.complete", "modulename": "ES.ilist", "qualname": "Ilist.complete", "type": "variable", "doc": "<p>return a boolean (True if Ilist is complete and consistent)</p>\n"}, {"fullname": "ES.ilist.Ilist.consistent", "modulename": "ES.ilist", "qualname": "Ilist.consistent", "type": "variable", "doc": "<p>return a boolean (True if Ilist is consistent : only one extval for one list of index values</p>\n"}, {"fullname": "ES.ilist.Ilist.dimension", "modulename": "ES.ilist", "qualname": "Ilist.dimension", "type": "variable", "doc": "<p>return an integer : the number of index non coupled and non unique</p>\n"}, {"fullname": "ES.ilist.Ilist.extidx", "modulename": "ES.ilist", "qualname": "Ilist.extidx", "type": "variable", "doc": "<p>return extidx (see data model)</p>\n"}, {"fullname": "ES.ilist.Ilist.idxcoupled", "modulename": "ES.ilist", "qualname": "Ilist.idxcoupled", "type": "variable", "doc": "<p>return a list of boolean for each index (True if coupled)</p>\n"}, {"fullname": "ES.ilist.Ilist.idxder", "modulename": "ES.ilist", "qualname": "Ilist.idxder", "type": "variable", "doc": "<p>return the list of derived index</p>\n"}, {"fullname": "ES.ilist.Ilist.idxderived", "modulename": "ES.ilist", "qualname": "Ilist.idxderived", "type": "variable", "doc": "<p>return a list of boolean for each index (True if derived)</p>\n"}, {"fullname": "ES.ilist.Ilist.idxlen", "modulename": "ES.ilist", "qualname": "Ilist.idxlen", "type": "variable", "doc": "<p>return the list of setidx lenght</p>\n"}, {"fullname": "ES.ilist.Ilist.idxref", "modulename": "ES.ilist", "qualname": "Ilist.idxref", "type": "variable", "doc": "<p>return the list of reference index</p>\n"}, {"fullname": "ES.ilist.Ilist.idxunique", "modulename": "ES.ilist", "qualname": "Ilist.idxunique", "type": "variable", "doc": "<p>return a list of boolean for each index (True if unique)</p>\n"}, {"fullname": "ES.ilist.Ilist.ind", "modulename": "ES.ilist", "qualname": "Ilist.ind", "type": "variable", "doc": "<p>return the textidx (see data model)</p>\n"}, {"fullname": "ES.ilist.Ilist.ival", "modulename": "ES.ilist", "qualname": "Ilist.ival", "type": "variable", "doc": "<p>return the ival (see data model)</p>\n"}, {"fullname": "ES.ilist.Ilist.lencomplete", "modulename": "ES.ilist", "qualname": "Ilist.lencomplete", "type": "variable", "doc": "<p>return an integer : number of values if complete (prod(idxlen,not coupled))</p>\n"}, {"fullname": "ES.ilist.Ilist.lenidx", "modulename": "ES.ilist", "qualname": "Ilist.lenidx", "type": "variable", "doc": "<p>return an integer : number of index</p>\n"}, {"fullname": "ES.ilist.Ilist.minMaxIndex", "modulename": "ES.ilist", "qualname": "Ilist.minMaxIndex", "type": "variable", "doc": "<p>return a list : [ minimal value of index, maximal value of index]</p>\n"}, {"fullname": "ES.ilist.Ilist.rate", "modulename": "ES.ilist", "qualname": "Ilist.rate", "type": "variable", "doc": "<p>return the float ratio : len / lencomplete</p>\n"}, {"fullname": "ES.ilist.Ilist.setval", "modulename": "ES.ilist", "qualname": "Ilist.setval", "type": "variable", "doc": "<p>return the setval (see data model)</p>\n"}, {"fullname": "ES.ilist.Ilist.setvallen", "modulename": "ES.ilist", "qualname": "Ilist.setvallen", "type": "variable", "doc": "<p>return the integer lenght of setval (see data model)</p>\n"}, {"fullname": "ES.ilist.Ilist.tiidx", "modulename": "ES.ilist", "qualname": "Ilist.tiidx", "type": "variable", "doc": "<p>return the tiidx (see data model)</p>\n"}, {"fullname": "ES.ilist.Ilist.textidx", "modulename": "ES.ilist", "qualname": "Ilist.textidx", "type": "variable", "doc": "<p>return the textidx (see data model)</p>\n"}, {"fullname": "ES.ilist.Ilist.zip", "modulename": "ES.ilist", "qualname": "Ilist.zip", "type": "variable", "doc": "<p>return a zip format for textidx : tuple(tuple(idx)</p>\n"}, {"fullname": "ES.ilist.Ilist.addextidx", "modulename": "ES.ilist", "qualname": "Ilist.addextidx", "type": "function", "doc": "<p>add a new index with name = idxname and extidx.</p>\n\n<p><em>Parameters</em></p>\n\n<ul>\n<li><strong>idxname</strong> : string - name of index list (see data model)</li>\n<li><strong>extidx</strong> : list - new index list (see data model)</li>\n</ul>\n\n<p><em>Returns</em> : none</p>\n", "parameters": ["self", "idxname", "extidx"], "funcdef": "def"}, {"fullname": "ES.ilist.Ilist.addlistidx", "modulename": "ES.ilist", "qualname": "Ilist.addlistidx", "type": "function", "doc": "<p>add a new index with name = idxname and setidx / iidx.</p>\n\n<p><em>Parameters</em></p>\n\n<ul>\n<li><strong>idxname</strong> : string - name of index list (see data model)</li>\n<li><strong>setidx</strong> :  list - external different values of index (see data model)</li>\n<li><strong>iidx</strong> :  list - integer value of index (see data model)</li>\n</ul>\n\n<p><em>Returns</em> : none</p>\n", "parameters": ["self", "idxname", "setidx", "iidx"], "funcdef": "def"}, {"fullname": "ES.ilist.Ilist.append", "modulename": "ES.ilist", "qualname": "Ilist.append", "type": "function", "doc": "<p>add a new value extval with index extind.</p>\n\n<p><em>Parameters</em></p>\n\n<ul>\n<li><strong>extval</strong> : new object value</li>\n<li><strong>extind</strong> :  list - new index values to add to extidx</li>\n<li><strong>unique</strong> :  boolean (default False) - If True and extidx present in textidx append is refuse.</li>\n</ul>\n\n<p><em>Returns</em> : none</p>\n", "parameters": ["self", "extval", "extind", "unique"], "funcdef": "def"}, {"fullname": "ES.ilist.Ilist.appendi", "modulename": "ES.ilist", "qualname": "Ilist.appendi", "type": "function", "doc": "<p>add a new value extval with index intind.</p>\n\n<p><em>Parameters</em></p>\n\n<ul>\n<li><strong>extval</strong> : new object value</li>\n<li><strong>intind</strong> :  list - new index values to add to iidx</li>\n<li><strong>unique</strong> :  boolean (default False) - If True and intind present in tiidx append is refuse.</li>\n</ul>\n\n<p><em>Returns</em> : none</p>\n", "parameters": ["self", "extval", "intind", "unique"], "funcdef": "def"}, {"fullname": "ES.ilist.Ilist.extidxtoi", "modulename": "ES.ilist", "qualname": "Ilist.extidxtoi", "type": "function", "doc": "<p>convert an extind (value for each extidx) to an intind (value for each iidx).</p>\n\n<p><em>Parameters</em></p>\n\n<ul>\n<li><strong>extind</strong> : value for each extidx</li>\n</ul>\n\n<p><em>Returns</em> </p>\n\n<ul>\n<li><strong>list</strong> : intind, value for each iidx</li>\n</ul>\n", "parameters": ["self", "extind"], "funcdef": "def"}, {"fullname": "ES.ilist.Ilist.full", "modulename": "ES.ilist", "qualname": "Ilist.full", "type": "function", "doc": "<p>add new extval with new extidx to have a complet Ilist </p>\n\n<p><em>Parameters</em></p>\n\n<ul>\n<li><strong>axes</strong> : list (default []) - list of index to be completed. If [], self.axes is used.</li>\n<li><strong>fillvalue</strong> : object value used for the new extval</li>\n<li><strong>inplace</strong> : boolean (default True) - if True, new values are added, if False a new Ilist is created.</li>\n</ul>\n\n<p><em>Returns</em> </p>\n\n<ul>\n<li><strong>None, if inplace. Ilist if not inplace</strong></li>\n</ul>\n", "parameters": ["self", "axes", "fillvalue", "inplace"], "funcdef": "def"}, {"fullname": "ES.ilist.Ilist.iadd", "modulename": "ES.ilist", "qualname": "Ilist.iadd", "type": "function", "doc": "<p>Add other's values to self's values</p>\n\n<p><em>Parameters</em></p>\n\n<ul>\n<li><strong>other</strong> : Ilist to be copied</li>\n<li><strong>unique</strong> :  boolean (default False) - If True and iidx present in tiidx append is refuse.</li>\n</ul>\n\n<p><em>Returns</em> : None</p>\n", "parameters": ["self", "other", "unique"], "funcdef": "def"}, {"fullname": "ES.ilist.Ilist.iidxtoext", "modulename": "ES.ilist", "qualname": "Ilist.iidxtoext", "type": "function", "doc": "<p>convert an intind (value for each iidx) to an extind (value for each extidx).</p>\n\n<p><em>Parameters</em></p>\n\n<ul>\n<li><strong>intind</strong> : value for each iidx</li>\n</ul>\n\n<p><em>Returns</em> </p>\n\n<ul>\n<li><strong>list</strong> : extind, value for each extidx</li>\n</ul>\n", "parameters": ["self", "intind"], "funcdef": "def"}, {"fullname": "ES.ilist.Ilist.iloc", "modulename": "ES.ilist", "qualname": "Ilist.iloc", "type": "function", "doc": "<p>Return extval corresponding to intind.</p>\n\n<p><em>Parameters</em></p>\n\n<ul>\n<li><strong>intind</strong> : list - value for each iidx</li>\n</ul>\n\n<p><em>Returns</em> </p>\n\n<ul>\n<li><strong>object</strong> : extval value</li>\n</ul>\n", "parameters": ["self", "intind"], "funcdef": "def"}, {"fullname": "ES.ilist.Ilist.isextIndex", "modulename": "ES.ilist", "qualname": "Ilist.isextIndex", "type": "function", "doc": "<p>Return True if extind is present in extidx.</p>\n\n<p><em>Parameters</em></p>\n\n<ul>\n<li><strong>extind</strong> : list - value for each extidx</li>\n</ul>\n\n<p><em>Returns</em> : boolean - True if found</p>\n", "parameters": ["self", "extind"], "funcdef": "def"}, {"fullname": "ES.ilist.Ilist.isiIndex", "modulename": "ES.ilist", "qualname": "Ilist.isiIndex", "type": "function", "doc": "<p>Return True if intind is present in iidx.</p>\n\n<p><em>Parameters</em></p>\n\n<ul>\n<li><strong>intind</strong> : list - value for each iidx</li>\n</ul>\n\n<p><em>Returns</em> : boolean - True if found</p>\n", "parameters": ["self", "intind"], "funcdef": "def"}, {"fullname": "ES.ilist.Ilist.isValue", "modulename": "ES.ilist", "qualname": "Ilist.isValue", "type": "function", "doc": "<p>Return True if present in extval.</p>\n\n<p><em>Parameters</em></p>\n\n<ul>\n<li><strong>extval</strong> : value to test</li>\n</ul>\n\n<p><em>Returns</em> : boolean - True if found</p>\n", "parameters": ["self", "extval"], "funcdef": "def"}, {"fullname": "ES.ilist.Ilist.json", "modulename": "ES.ilist", "qualname": "Ilist.json", "type": "function", "doc": "<p>Return json string with val (extval or ival) and idx (extidx or iidx or none).</p>\n\n<p><em>Parameters (option)</em></p>\n\n<ul>\n<li><strong>json_string</strong> : defaut False - if True return string, else return dict</li>\n<li><strong>json_res_index</strong> : default True - if True add the index to the value</li>\n<li><strong>json_mode[0]</strong> : char - if 'v', value is extval else ival</li>\n<li><strong>json_mode[1]</strong> : char - if 'v', index is extidx else iidx</li>\n</ul>\n\n<p><em>Returns</em> : string or dict</p>\n", "parameters": ["self", "option"], "funcdef": "def"}, {"fullname": "ES.ilist.Ilist.loc", "modulename": "ES.ilist", "qualname": "Ilist.loc", "type": "function", "doc": "<p>Return extval corresponding to extind.</p>\n\n<p><em>Parameters</em></p>\n\n<ul>\n<li><strong>extind</strong> : list - value for each extidx</li>\n</ul>\n\n<p><em>Returns</em> </p>\n\n<ul>\n<li><strong>object</strong> : extval value</li>\n</ul>\n", "parameters": ["self", "extind"], "funcdef": "def"}, {"fullname": "ES.ilist.Ilist.reindex", "modulename": "ES.ilist", "qualname": "Ilist.reindex", "type": "function", "doc": "<p>Define new sorted index.</p>\n\n<p><em>Parameters</em></p>\n\n<ul>\n<li><strong>index</strong> : list (default [])- list of the index to reindex. If [] all the index are reindexed.</li>\n</ul>\n\n<p><em>Returns</em> : None</p>\n", "parameters": ["self", "index"], "funcdef": "def"}, {"fullname": "ES.ilist.Ilist.reorder", "modulename": "ES.ilist", "qualname": "Ilist.reorder", "type": "function", "doc": "<p>Change the order of extval and iidx with a new order define by sort.</p>\n\n<p><em>Parameters</em></p>\n\n<ul>\n<li><strong>sort</strong> : list (default [])- new order to apply. If [], no change.</li>\n<li><strong>inplace</strong> : boolean (default True) - if True, new order is apply to self,\nif False a new Ilist is created.</li>\n</ul>\n\n<p><em>Returns</em> </p>\n\n<ul>\n<li><strong>None, if inplace. Ilist if not inplace</strong></li>\n</ul>\n", "parameters": ["self", "sort", "inplace"], "funcdef": "def"}, {"fullname": "ES.ilist.Ilist.sort", "modulename": "ES.ilist", "qualname": "Ilist.sort", "type": "function", "doc": "<p>sort : calculate a new list order</p>\n", "parameters": ["self", "sort", "order", "reindex", "inplace"], "funcdef": "def"}, {"fullname": "ES.ilist.Ilist.sortidx", "modulename": "ES.ilist", "qualname": "Ilist.sortidx", "type": "function", "doc": "<p>Define a new order to apply to extval and iidx (reorder method).</p>\n\n<p><em>Parameters</em></p>\n\n<ul>\n<li><strong>order</strong> : list (default [])- new order of index to apply in sort function. \nIf [], the sort function is applied to extval.</li>\n<li><strong>sort</strong> : list (default [])- new order to apply. If [], the new order is calculated.</li>\n<li><strong>reindex</strong> : boolean (default True) - if True, the index are reindexed.</li>\n</ul>\n\n<p><em>Returns</em> </p>\n\n<ul>\n<li><strong>list</strong> : sort - new order to apply</li>\n</ul>\n", "parameters": ["self", "order", "sort", "reindex"], "funcdef": "def"}, {"fullname": "ES.ilist.Ilist.swapindex", "modulename": "ES.ilist", "qualname": "Ilist.swapindex", "type": "function", "doc": "<p>Change the order of the index (iidx, setidx, idxname).</p>\n\n<p><em>Parameters</em></p>\n\n<ul>\n<li><strong>order</strong> : list - new order of index to apply. </li>\n</ul>\n\n<p><em>Returns</em> : none</p>\n", "parameters": ["self", "order"], "funcdef": "def"}, {"fullname": "ES.ilist.Ilist.to_csv", "modulename": "ES.ilist", "qualname": "Ilist.to_csv", "type": "function", "doc": "<p>Generate a csv file with Ilist data (a column for extval and each extidx)</p>\n\n<p><em>Parameters</em></p>\n\n<ul>\n<li><strong>filename</strong> : string (default 'ilist.csv') - name of the file to create</li>\n<li><strong>func</strong> : function (default none) - function to apply to extval before writting csv file</li>\n<li><strong>ifunc</strong> : list of function (default []) - function to apply to extidx before writting csv file</li>\n<li><strong>valfirst</strong> : boolean (default False). If False extval is the last columns else it's the first</li>\n<li><strong>order</strong> : list of integer (default []) - ordered list of index in columns</li>\n<li><strong>header</strong> : boolean (default True). If True, the first raw is dedicated to names</li>\n<li><strong>kwargs</strong> : parameter for csv.writer or func</li>\n</ul>\n\n<p><em>Returns</em> : none</p>\n", "parameters": ["self", "filename", "func", "ifunc", "valfirst", "order", "header", "kwargs"], "funcdef": "def"}, {"fullname": "ES.ilist.Ilist.to_numpy", "modulename": "ES.ilist", "qualname": "Ilist.to_numpy", "type": "function", "doc": "<p>Complete the Ilist and generate a Numpy array with the dimension define by ind.</p>\n\n<p><em>Parameters</em></p>\n\n<ul>\n<li><strong>func</strong> : function (default none) - function to apply to extval before export</li>\n<li><strong>ind</strong> : string (default 'axe') - 'axe' -> independant axes, 'all' -> all axes, 'flat' -> one list</li>\n<li><strong>fillvalue</strong> : object (default '?') - value used for the new extval</li>\n<li><strong>kwargs</strong> : parameter for func</li>\n</ul>\n\n<p><em>Returns</em> : none</p>\n", "parameters": ["self", "func", "ind", "fillvalue", "kwargs"], "funcdef": "def"}, {"fullname": "ES.ilist.Ilist.to_xarray", "modulename": "ES.ilist", "qualname": "Ilist.to_xarray", "type": "function", "doc": "<p>Complete the Ilist and generate a Xarray DataArray with the dimension define by ind.</p>\n\n<p><em>Parameters</em></p>\n\n<ul>\n<li><strong>info</strong> : boolean (default False) - if True, add _dict attributes to attrs Xarray</li>\n<li><strong>axes</strong> : list (default []) - list of index to be completed. If [], self.axes is used.</li>\n<li><strong>fillvalue</strong> : object (default '?') - value used for the new extval</li>\n<li><strong>func</strong> : function (default none) - function to apply to extval before export</li>\n<li><strong>ifunc</strong> : list of function (default []) - function to apply to extidx before export</li>\n<li><strong>name</strong> : string (default 'Ilist') - DataArray name</li>\n<li><strong>kwargs</strong> : parameter for func and ifunc</li>\n</ul>\n\n<p><em>Returns</em> : none</p>\n", "parameters": ["self", "info", "axes", "fillvalue", "func", "ifunc", "name", "kwargs"], "funcdef": "def"}, {"fullname": "ES.ilist.Ilist.updateidx", "modulename": "ES.ilist", "qualname": "Ilist.updateidx", "type": "function", "doc": "<p>Update the index of an extval.</p>\n\n<p><em>Parameters</em></p>\n\n<ul>\n<li><strong>indval</strong> : integer - row of the value in extval</li>\n<li><strong>extind</strong> : list - new value for each extidx</li>\n<li><strong>unique</strong> :  boolean (default False) - If True and extind present in textidx, update is refuse.</li>\n</ul>\n\n<p><em>Returns</em> : none</p>\n", "parameters": ["self", "indval", "extind", "unique"], "funcdef": "def"}, {"fullname": "ES.ilist.Ilist.updatelist", "modulename": "ES.ilist", "qualname": "Ilist.updatelist", "type": "function", "doc": "<p>Update extval or extidx.</p>\n\n<p><em>Parameters</em></p>\n\n<ul>\n<li><strong>extlist</strong> : list of list - list of values to update</li>\n<li><strong>idx</strong> : list of integer - list of index to update (idx=-1 for extval)</li>\n</ul>\n\n<p><em>Returns</em> : none</p>\n", "parameters": ["self", "extlist", "idx"], "funcdef": "def"}, {"fullname": "ES.ilist.Ilist.vlist", "modulename": "ES.ilist", "qualname": "Ilist.vlist", "type": "function", "doc": "<p>Apply a function to extval or extidx and return the result.</p>\n\n<p><em>Parameters</em></p>\n\n<ul>\n<li><strong>func</strong> : function (default none) - function to apply to extval or extidx</li>\n<li><strong>args, kwargs</strong> : parameters for the function</li>\n<li><strong>idx</strong> : integer - index to update (idx=-1 for extval)</li>\n</ul>\n\n<p><em>Returns</em> : list of func result</p>\n", "parameters": ["self", "args", "func", "idx", "kwargs"], "funcdef": "def"}, {"fullname": "ES.ilist.IlistError", "modulename": "ES.ilist", "qualname": "IlistError", "type": "class", "doc": "<p>Common base class for all non-exit exceptions.</p>\n"}, {"fullname": "ES.openlocationcode", "modulename": "ES.openlocationcode", "qualname": "", "type": "module", "doc": "<p></p>\n"}, {"fullname": "ES.openlocationcode.isValid", "modulename": "ES.openlocationcode", "qualname": "isValid", "type": "function", "doc": "<p>Determines if a code is valid.\nTo be valid, all characters must be from the Open Location Code character\nset with at most one separator. The separator can be in any even-numbered\nposition up to the eighth digit.</p>\n", "parameters": ["code"], "funcdef": "def"}, {"fullname": "ES.openlocationcode.isShort", "modulename": "ES.openlocationcode", "qualname": "isShort", "type": "function", "doc": "<p>Determines if a code is a valid short code.\nA short Open Location Code is a sequence created by removing four or more\ndigits from an Open Location Code. It must include a separator\ncharacter.</p>\n", "parameters": ["code"], "funcdef": "def"}, {"fullname": "ES.openlocationcode.isFull", "modulename": "ES.openlocationcode", "qualname": "isFull", "type": "function", "doc": "<p>Determines if a code is a valid full Open Location Code.\nNot all possible combinations of Open Location Code characters decode to\nvalid latitude and longitude values. This checks that a code is valid\nand also that the latitude and longitude values are legal. If the prefix\ncharacter is present, it must be the first character. If the separator\ncharacter is present, it must be after four characters.</p>\n", "parameters": ["code"], "funcdef": "def"}, {"fullname": "ES.openlocationcode.encode", "modulename": "ES.openlocationcode", "qualname": "encode", "type": "function", "doc": "<p>Encode a location into an Open Location Code.\nProduces a code of the specified length, or the default length if no length\nis provided.\nThe length determines the accuracy of the code. The default length is\n10 characters, returning a code of approximately 13.5x13.5 meters. Longer\ncodes represent smaller areas, but lengths &gt; 14 are sub-centimetre and so\n11 or 12 are probably the limit of useful codes.\nArgs:\n  latitude: A latitude in signed decimal degrees. Will be clipped to the\n      range -90 to 90.\n  longitude: A longitude in signed decimal degrees. Will be normalised to\n      the range -180 to 180.\n  codeLength: The number of significant digits in the output code, not\n      including any separator characters.</p>\n", "parameters": ["latitude", "longitude", "codeLength"], "funcdef": "def"}, {"fullname": "ES.openlocationcode.decode", "modulename": "ES.openlocationcode", "qualname": "decode", "type": "function", "doc": "<p>Decodes an Open Location Code into the location coordinates.\nReturns a CodeArea object that includes the coordinates of the bounding\nbox - the lower left, center and upper right.\nArgs:\n  code: The Open Location Code to decode.\nReturns:\n  A CodeArea object that provides the latitude and longitude of two of the\n  corners of the area, the center, and the length of the original code.</p>\n", "parameters": ["code"], "funcdef": "def"}, {"fullname": "ES.openlocationcode.recoverNearest", "modulename": "ES.openlocationcode", "qualname": "recoverNearest", "type": "function", "doc": "<p>Recover the nearest matching code to a specified location.\nGiven a short code of between four and seven characters, this recovers\nthe nearest matching full code to the specified location.\nArgs:\n  code: A valid OLC character sequence.\n  referenceLatitude: The latitude (in signed decimal degrees) to use to\n      find the nearest matching full code.\n  referenceLongitude: The longitude (in signed decimal degrees) to use\n      to find the nearest matching full code.\nReturns:\n  The nearest full Open Location Code to the reference location that matches\n  the short code. If the passed code was not a valid short code, but was a\n  valid full code, it is returned with proper capitalization but otherwise\n  unchanged.</p>\n", "parameters": ["code", "referenceLatitude", "referenceLongitude"], "funcdef": "def"}, {"fullname": "ES.openlocationcode.shorten", "modulename": "ES.openlocationcode", "qualname": "shorten", "type": "function", "doc": "<p>Remove characters from the start of an OLC code.\nThis uses a reference location to determine how many initial characters\ncan be removed from the OLC code. The number of characters that can be\nremoved depends on the distance between the code center and the reference\nlocation.\nThe minimum number of characters that will be removed is four. If more than\nfour characters can be removed, the additional characters will be replaced\nwith the padding character. At most eight characters will be removed.\nThe reference location must be within 50% of the maximum range. This ensures\nthat the shortened code will be able to be recovered using slightly different\nlocations.\nArgs:\n  code: A full, valid code to shorten.\n  latitude: A latitude, in signed decimal degrees, to use as the reference\n      point.\n  longitude: A longitude, in signed decimal degrees, to use as the reference\n      point.\nReturns:\n  Either the original code, if the reference location was not close enough,\n  or the .</p>\n", "parameters": ["code", "latitude", "longitude"], "funcdef": "def"}, {"fullname": "ES.openlocationcode.clipLatitude", "modulename": "ES.openlocationcode", "qualname": "clipLatitude", "type": "function", "doc": "<p>Clip a latitude into the range -90 to 90.\nArgs:\n  latitude: A latitude in signed decimal degrees.</p>\n", "parameters": ["latitude"], "funcdef": "def"}, {"fullname": "ES.openlocationcode.computeLatitudePrecision", "modulename": "ES.openlocationcode", "qualname": "computeLatitudePrecision", "type": "function", "doc": "<p>Compute the latitude precision value for a given code length. Lengths &lt;=\n10 have the same precision for latitude and longitude, but lengths &gt; 10\nhave different precisions due to the grid method having fewer columns than\nrows.</p>\n", "parameters": ["codeLength"], "funcdef": "def"}, {"fullname": "ES.openlocationcode.normalizeLongitude", "modulename": "ES.openlocationcode", "qualname": "normalizeLongitude", "type": "function", "doc": "<p>Normalize a longitude into the range -180 to 180, not including 180.\nArgs:\n  longitude: A longitude in signed decimal degrees.</p>\n", "parameters": ["longitude"], "funcdef": "def"}, {"fullname": "ES.openlocationcode.CodeArea", "modulename": "ES.openlocationcode", "qualname": "CodeArea", "type": "class", "doc": "<p>Coordinates of a decoded Open Location Code.\nThe coordinates include the latitude and longitude of the lower left and\nupper right corners and the center of the bounding box for the area the\ncode represents.\nAttributes:\n  latitude_lo: The latitude of the SW corner in degrees.\n  longitude_lo: The longitude of the SW corner in degrees.\n  latitude_hi: The latitude of the NE corner in degrees.\n  longitude_hi: The longitude of the NE corner in degrees.\n  latitude_center: The latitude of the center in degrees.\n  longitude_center: The longitude of the center in degrees.\n  code_length: The number of significant characters that were in the code.\n      This excludes the separator.</p>\n"}, {"fullname": "ES.openlocationcode.CodeArea.__init__", "modulename": "ES.openlocationcode", "qualname": "CodeArea.__init__", "type": "function", "doc": "<p></p>\n", "parameters": ["self", "latitudeLo", "longitudeLo", "latitudeHi", "longitudeHi", "codeLength"], "funcdef": "def"}, {"fullname": "ES.openlocationcode.CodeArea.latlng", "modulename": "ES.openlocationcode", "qualname": "CodeArea.latlng", "type": "function", "doc": "<p></p>\n", "parameters": ["self"], "funcdef": "def"}, {"fullname": "ES.test_ilist", "modulename": "ES.test_ilist", "qualname": "", "type": "module", "doc": "<p>Created on Sat Jan 29 22:44:05 2022</p>\n\n<p>@author: a179227</p>\n"}, {"fullname": "ES.test_ilist.il", "modulename": "ES.test_ilist", "qualname": "il", "type": "variable", "doc": "<p>ob = Observation(dict((obs_1, dat3, loc3, prop2, _res(6))), order='px')\nlres = ob.setResult.vList(ResultValue.getValue)\nlind = il._transpose(ob.setResult.vListIndex)\niobs = Ilist.Iext(lres,lind)</p>\n"}, {"fullname": "ES.test_ilist.Test_ilist", "modulename": "ES.test_ilist", "qualname": "Test_ilist", "type": "class", "doc": "<p>A class whose instances are single test cases.</p>\n\n<p>By default, the test code itself should be placed in a method named\n'runTest'.</p>\n\n<p>If the fixture may be used for many test cases, create as\nmany test methods as are needed. When instantiating such a TestCase\nsubclass, specify in the constructor arguments the name of the test method\nthat the instance is to execute.</p>\n\n<p>Test authors should subclass TestCase for their own tests. Construction\nand deconstruction of the test's environment ('fixture') can be\nimplemented by overriding the 'setUp' and 'tearDown' methods respectively.</p>\n\n<p>If it is necessary to override the __init__ method, the base class\n__init__ method must always be called. It is important that subclasses\nshould not change the signature of their __init__ method, since instances\nof the classes are instantiated automatically by parts of the framework\nin order to be run.</p>\n\n<p>When subclassing TestCase, you can set these attributes:</p>\n\n<ul>\n<li>failureException: determines which exception will be raised when\nthe instance's assertion methods fail; test methods raising this\nexception will be deemed to have 'failed' rather than 'errored'.</li>\n<li>longMessage: determines whether long messages (including repr of\nobjects used in assert methods) will be printed on failure in <em>addition</em>\nto any explicit message passed.</li>\n<li>maxDiff: sets the maximum length of a diff in failure messages\nby assert methods using difflib. It is looked up as an instance\nattribute so can be configured by individual tests if required.</li>\n</ul>\n"}, {"fullname": "ES.test_ilist.Test_ilist.il", "modulename": "ES.test_ilist", "qualname": "Test_ilist.il", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "ES.test_ilist.Test_ilist.test_static", "modulename": "ES.test_ilist", "qualname": "Test_ilist.test_static", "type": "function", "doc": "<p></p>\n", "parameters": ["self"], "funcdef": "def"}, {"fullname": "ES.test_ilist.Test_ilist.test_creation_list", "modulename": "ES.test_ilist", "qualname": "Test_ilist.test_creation_list", "type": "function", "doc": "<p></p>\n", "parameters": ["self"], "funcdef": "def"}, {"fullname": "ES.test_ilist.Test_ilist.test_creation", "modulename": "ES.test_ilist", "qualname": "Test_ilist.test_creation", "type": "function", "doc": "<p></p>\n", "parameters": ["self"], "funcdef": "def"}, {"fullname": "ES.test_ilist.Test_ilist.test_init_dict", "modulename": "ES.test_ilist", "qualname": "Test_ilist.test_init_dict", "type": "function", "doc": "<p></p>\n", "parameters": ["self"], "funcdef": "def"}, {"fullname": "ES.test_ilist.Test_ilist.test_init_set", "modulename": "ES.test_ilist", "qualname": "Test_ilist.test_init_set", "type": "function", "doc": "<p></p>\n", "parameters": ["self"], "funcdef": "def"}, {"fullname": "ES.test_ilist.Test_ilist.test_init_index", "modulename": "ES.test_ilist", "qualname": "Test_ilist.test_init_index", "type": "function", "doc": "<p></p>\n", "parameters": ["self"], "funcdef": "def"}, {"fullname": "ES.test_ilist.Test_ilist.test_properties", "modulename": "ES.test_ilist", "qualname": "Test_ilist.test_properties", "type": "function", "doc": "<p></p>\n", "parameters": ["self"], "funcdef": "def"}, {"fullname": "ES.test_ilist.Test_ilist.test_sort", "modulename": "ES.test_ilist", "qualname": "Test_ilist.test_sort", "type": "function", "doc": "<p></p>\n", "parameters": ["self"], "funcdef": "def"}, {"fullname": "ES.test_ilist.Test_ilist.test_full", "modulename": "ES.test_ilist", "qualname": "Test_ilist.test_full", "type": "function", "doc": "<p></p>\n", "parameters": ["self"], "funcdef": "def"}, {"fullname": "ES.test_ilist.Test_ilist.test_append", "modulename": "ES.test_ilist", "qualname": "Test_ilist.test_append", "type": "function", "doc": "<p></p>\n", "parameters": ["self"], "funcdef": "def"}, {"fullname": "ES.test_ilist.Test_ilist.test_vlist", "modulename": "ES.test_ilist", "qualname": "Test_ilist.test_vlist", "type": "function", "doc": "<p></p>\n", "parameters": ["self"], "funcdef": "def"}, {"fullname": "ES.test_ilist.Test_ilist.test_add_update_list", "modulename": "ES.test_ilist", "qualname": "Test_ilist.test_add_update_list", "type": "function", "doc": "<p></p>\n", "parameters": ["self"], "funcdef": "def"}, {"fullname": "ES.test_ilist.Test_ilist.test_add", "modulename": "ES.test_ilist", "qualname": "Test_ilist.test_add", "type": "function", "doc": "<p></p>\n", "parameters": ["self"], "funcdef": "def"}, {"fullname": "ES.test_ilist.Test_ilist.test_extend", "modulename": "ES.test_ilist", "qualname": "Test_ilist.test_extend", "type": "function", "doc": "<p></p>\n", "parameters": ["self"], "funcdef": "def"}, {"fullname": "ES.test_ilist.Test_ilist.test_swap", "modulename": "ES.test_ilist", "qualname": "Test_ilist.test_swap", "type": "function", "doc": "<p></p>\n", "parameters": ["self"], "funcdef": "def"}, {"fullname": "ES.test_ilist.Test_ilist.test_to_numpy", "modulename": "ES.test_ilist", "qualname": "Test_ilist.test_to_numpy", "type": "function", "doc": "<p></p>\n", "parameters": ["self"], "funcdef": "def"}, {"fullname": "ES.test_ilist.Test_ilist.test_to_xarray", "modulename": "ES.test_ilist", "qualname": "Test_ilist.test_to_xarray", "type": "function", "doc": "<p></p>\n", "parameters": ["self"], "funcdef": "def"}, {"fullname": "ES.test_ilist.Test_ilist.test_csv", "modulename": "ES.test_ilist", "qualname": "Test_ilist.test_csv", "type": "function", "doc": "<p></p>\n", "parameters": ["self"], "funcdef": "def"}, {"fullname": "ES.test_ilist.Test_ilist.test_list", "modulename": "ES.test_ilist", "qualname": "Test_ilist.test_list", "type": "function", "doc": "<p></p>\n", "parameters": ["self"], "funcdef": "def"}, {"fullname": "ES.test_ilist.Test_ilist.test_zip", "modulename": "ES.test_ilist", "qualname": "Test_ilist.test_zip", "type": "function", "doc": "<p></p>\n", "parameters": ["self"], "funcdef": "def"}, {"fullname": "ES.test_ilist.Test_ilist.test_example", "modulename": "ES.test_ilist", "qualname": "Test_ilist.test_example", "type": "function", "doc": "<p></p>\n", "parameters": ["self"], "funcdef": "def"}];

    // mirrored in build-search-index.js (part 1)
    // Also split on html tags. this is a cheap heuristic, but good enough.
    elasticlunr.tokenizer.setSeperator(/[\s\-.;&]+|<[^>]*>/);

    let searchIndex;
    if (docs._isPrebuiltIndex) {
        console.info("using precompiled search index");
        searchIndex = elasticlunr.Index.load(docs);
    } else {
        console.time("building search index");
        // mirrored in build-search-index.js (part 2)
        searchIndex = elasticlunr(function () {
            this.addField("qualname");
            this.addField("fullname");
            this.addField("doc");
            this.setRef("fullname");
        });
        for (let doc of docs) {
            searchIndex.addDoc(doc);
        }
        console.timeEnd("building search index");
    }

    return (term) => searchIndex.search(term, {
        fields: {
            qualname: {boost: 4},
            fullname: {boost: 2},
            doc: {boost: 1},
        },
        expand: true
    });
})();